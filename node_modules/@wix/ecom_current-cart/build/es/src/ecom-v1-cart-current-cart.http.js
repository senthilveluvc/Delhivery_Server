import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';
import { transformSDKFloatToRESTFloat } from '@wix/sdk-runtime/transformations/float';
import { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';
import { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformSDKFieldMaskToRESTFieldMask } from '@wix/sdk-runtime/transformations/field-mask';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { resolveUrl } from '@wix/sdk-runtime/rest-modules';
function resolveComWixEcomCartApiV1CurrentCartServiceUrl(opts) {
    const domainToMappings = {
        'api._api_base_domain_': [
            {
                srcPath: '/cart',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'www.wixgateway.com': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        _: [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
            {
                srcPath: '/_api/cart',
                destPath: '',
            },
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'editor._base_domain_': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        'blocks._base_domain_': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        'create.editorx': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        '*.dev.wix-code.com': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        'www._base_domain_': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        'bo._base_domain_': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'wixbo.ai': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'wix-bo.com': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
    };
    return resolveUrl(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/ecom_current-cart';
/**
 * Retrieves the current site visitor's cart.
 *
 *
 * The `getCurrentCart()` function returns a Promise that resolves when the current cart is retrieved.
 */
export function currentCartGetCurrentCart(payload) {
    function __currentCartGetCurrentCart({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'GET',
            methodFqn: 'com.wix.ecom.cart.api.v1.CurrentCartService.GetCurrentCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
                protoPath: '/v1/carts/current',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __currentCartGetCurrentCart;
}
/**
 * Updates the current site visitor's cart.
 *
 *
 * The `updateCurrentCart()` function returns a Promise that resolves when the current cart's properties are updated.
 *
 * > **Note:** When updating catalog items, `options.lineItems.catalogReference` is required.
 */
export function updateCurrentCart(payload) {
    function __updateCurrentCart({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'cartFieldmask' }],
            },
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'cartInfo.createdDate' },
                    { path: 'cartInfo.updatedDate' },
                    { path: 'cartInfo.lineItems.image.urlExpirationDate' },
                    {
                        path: 'cartInfo.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'cartInfo.lineItems.serviceProperties.scheduledDate' },
                    { path: 'lineItems.image.urlExpirationDate' },
                    {
                        path: 'lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'lineItems.serviceProperties.scheduledDate' },
                    {
                        path: 'customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'customLineItems.serviceProperties.scheduledDate' },
                ],
            },
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'cartInfo.lineItems.image.focalPoint.x' },
                    { path: 'cartInfo.lineItems.image.focalPoint.y' },
                    { path: 'lineItems.image.focalPoint.x' },
                    { path: 'lineItems.image.focalPoint.y' },
                    { path: 'cartInfo.lineItems.physicalProperties.weight' },
                    {
                        path: 'cartInfo.lineItems.catalogOverrideFields.physicalProperties.weight',
                    },
                    { path: 'cartInfo.contactInfo.address.geocode.latitude' },
                    { path: 'cartInfo.contactInfo.address.geocode.longitude' },
                    { path: 'lineItems.physicalProperties.weight' },
                    { path: 'lineItems.catalogOverrideFields.physicalProperties.weight' },
                    { path: 'customLineItems.physicalProperties.weight' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'PATCH',
            methodFqn: 'com.wix.ecom.cart.api.v1.CurrentCartService.UpdateCurrentCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
                protoPath: '/v1/carts/current',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateCurrentCart;
}
/**
 * Adds catalog line items to the current site visitor's cart.
 *
 *
 * The `addToCurrentCart()` function returns a Promise that resolves to the updated current cart when the specified items have been added.
 *
 * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
 */
export function addToCurrentCart(payload) {
    function __addToCurrentCart({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'lineItems.image.urlExpirationDate' },
                    {
                        path: 'lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'lineItems.serviceProperties.scheduledDate' },
                    {
                        path: 'customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'customLineItems.serviceProperties.scheduledDate' },
                ],
            },
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'lineItems.image.focalPoint.x' },
                    { path: 'lineItems.image.focalPoint.y' },
                    { path: 'lineItems.physicalProperties.weight' },
                    { path: 'lineItems.catalogOverrideFields.physicalProperties.weight' },
                    { path: 'customLineItems.physicalProperties.weight' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CurrentCartService.AddToCurrentCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
                protoPath: '/v1/carts/current/add-to-cart',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __addToCurrentCart;
}
/**
 * Removes line items from the current site visitor's cart.
 *
 *
 * The `removeLineItemsFromCurrentCart()` function returns a Promise that resolves to the updated current cart when the line items are removed.
 */
export function removeLineItemsFromCurrentCart(payload) {
    function __removeLineItemsFromCurrentCart({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CurrentCartService.RemoveLineItemsFromCurrentCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
                protoPath: '/v1/carts/current/remove-line-items',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __removeLineItemsFromCurrentCart;
}
/**
 * Creates a checkout from the current site visitor’s cart.
 *
 *
 * The `createCheckoutFromCurrentCart()` function returns a Promise that resolves to the new checkout's ID when it's created.
 *
 * If a checkout was already created from the current cart, that checkout will be updated with any new information from the cart.
 *
 * > **Note:** `options.channelType` is a required field.
 */
export function createCheckoutFromCurrentCart(payload) {
    function __createCheckoutFromCurrentCart({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'shippingAddress.geocode.latitude' },
                    { path: 'shippingAddress.geocode.longitude' },
                    { path: 'billingAddress.geocode.latitude' },
                    { path: 'billingAddress.geocode.longitude' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CurrentCartService.CreateCheckoutFromCurrentCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
                protoPath: '/v1/carts/current/create-checkout',
                data: serializedData,
                host,
            }),
            data: serializedData,
        };
        return metadata;
    }
    return __createCheckoutFromCurrentCart;
}
/**
 * Removes the coupon from the current site visitor's cart.
 *
 *
 * The `removeCouponFromCurrentCart()` function returns a Promise that resolves to the updated current cart when the coupon is removed.
 */
export function removeCouponFromCurrentCart(payload) {
    function __removeCouponFromCurrentCart({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CurrentCartService.RemoveCouponFromCurrentCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
                protoPath: '/v1/carts/current/remove-coupon',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __removeCouponFromCurrentCart;
}
/**
 * Updates the quantity of one or more line items in the current site visitor's cart.
 *
 *
 * The `updateCurrentCartLineItemQuantity()` function returns a Promise that resolves when the quantities of the current cart's line items are updated. This endpoint is only for updating the quantity of line items. To entirely remove a line item from the current cart, use [`removeLineItemsFromCurrentCart()`](#removelineitemsfromcurrentcart).
 * To add a new line item to the current cart, use [`addToCurrentCart()`](#addtocurrentcart).
 *
 * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity` is greater than the remaining stock, then the `quantity` returned in the response is the total amount of remaining stock.
 */
export function updateCurrentCartLineItemQuantity(payload) {
    function __updateCurrentCartLineItemQuantity({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CurrentCartService.UpdateCurrentCartLineItemQuantity',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
                protoPath: '/v1/carts/current/update-line-items-quantity',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateCurrentCartLineItemQuantity;
}
/**
 * Estimates the current cart's price totals (including tax), based on a selected carrier service, shipping address, and billing information.
 *
 *
 * The `estimateCurrentCartTotals()` function returns a Promise that resolves when the estimated totals are generated.
 *
 * > **Note:** Not passing any `options` properties will only estimate the cart items price totals.
 */
export function estimateCurrentCartTotals(payload) {
    function __estimateCurrentCartTotals({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'shippingAddress.geocode.latitude' },
                    { path: 'shippingAddress.geocode.longitude' },
                    { path: 'billingAddress.geocode.latitude' },
                    { path: 'billingAddress.geocode.longitude' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CurrentCartService.EstimateCurrentCartTotals',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
                protoPath: '/v1/carts/current/estimate-totals',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                        {
                            path: 'shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                        },
                        { path: 'membershipOptions.eligibleMemberships.expirationDate' },
                        {
                            path: 'membershipOptions.invalidMemberships.membership.expirationDate',
                        },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                        {
                            path: 'shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                        },
                        {
                            path: 'shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'appliedDiscounts.merchantDiscount.percentage' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __estimateCurrentCartTotals;
}
/**
 * Deletes the current site visitor's cart.
 *
 *
 * The `deleteCurrentCart()` function returns a Promise that resolves when the current cart is deleted.
 */
export function deleteCurrentCart(payload) {
    function __deleteCurrentCart({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'DELETE',
            methodFqn: 'com.wix.ecom.cart.api.v1.CurrentCartService.DeleteCurrentCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CurrentCartServiceUrl({
                protoPath: '/v1/carts/current',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
        };
        return metadata;
    }
    return __deleteCurrentCart;
}
//# sourceMappingURL=ecom-v1-cart-current-cart.http.js.map