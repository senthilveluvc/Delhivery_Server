import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';
import { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';
import { transformRESTPageURLV2ToSDKPageURLV2 } from '@wix/sdk-runtime/transformations/page-url-v2';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { EventDefinition } from '@wix/sdk-types';
import { addToCurrentCart as universalAddToCurrentCart, createCheckoutFromCurrentCart as universalCreateCheckoutFromCurrentCart, deleteCurrentCart as universalDeleteCurrentCart, estimateCurrentCartTotals as universalEstimateCurrentCartTotals, getCurrentCart as universalGetCurrentCart, removeCouponFromCurrentCart as universalRemoveCouponFromCurrentCart, removeLineItemsFromCurrentCart as universalRemoveLineItemsFromCurrentCart, updateCurrentCart as universalUpdateCurrentCart, updateCurrentCartLineItemQuantity as universalUpdateCurrentCartLineItemQuantity, } from './ecom-v1-cart-current-cart.universal.js';
export const __metadata = { PACKAGE_NAME: '@wix/ecom' };
export function getCurrentCart(httpClient) {
    return () => universalGetCurrentCart(
    // @ts-ignore
    { httpClient });
}
export function updateCurrentCart(httpClient) {
    return (options) => universalUpdateCurrentCart(options, 
    // @ts-ignore
    { httpClient });
}
export function addToCurrentCart(httpClient) {
    return (options) => universalAddToCurrentCart(options, 
    // @ts-ignore
    { httpClient });
}
export function removeLineItemsFromCurrentCart(httpClient) {
    return (lineItemIds) => universalRemoveLineItemsFromCurrentCart(lineItemIds, 
    // @ts-ignore
    { httpClient });
}
export function createCheckoutFromCurrentCart(httpClient) {
    return (options) => universalCreateCheckoutFromCurrentCart(options, 
    // @ts-ignore
    { httpClient });
}
export function removeCouponFromCurrentCart(httpClient) {
    return () => universalRemoveCouponFromCurrentCart(
    // @ts-ignore
    { httpClient });
}
export function updateCurrentCartLineItemQuantity(httpClient) {
    return (lineItems) => universalUpdateCurrentCartLineItemQuantity(lineItems, 
    // @ts-ignore
    { httpClient });
}
export function estimateCurrentCartTotals(httpClient) {
    return (options) => universalEstimateCurrentCartTotals(options, 
    // @ts-ignore
    { httpClient });
}
export function deleteCurrentCart(httpClient) {
    return () => universalDeleteCurrentCart(
    // @ts-ignore
    { httpClient });
}
export const onCartDeleted = EventDefinition('wix.ecom.v1.cart_deleted', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'undefined.createdDate' },
            { path: 'undefined.updatedDate' },
            {
                path: 'undefined.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
            },
            { path: 'undefined.lineItems.serviceProperties.scheduledDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTPageURLV2ToSDKPageURLV2,
        paths: [{ path: 'undefined.lineItems.url' }],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [
            { path: 'undefined.lineItems.image' },
            { path: 'undefined.lineItems.catalogOverrideFields.image' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            { path: 'undefined.lineItems.physicalProperties.weight' },
            {
                path: 'undefined.lineItems.catalogOverrideFields.physicalProperties.weight',
            },
        ],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [{ path: 'undefined.contactInfo.address' }],
    },
])))();
export const onCartUpdated = EventDefinition('wix.ecom.v1.cart_updated', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.updatedDate' },
            {
                path: 'entity.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
            },
            { path: 'entity.lineItems.serviceProperties.scheduledDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTPageURLV2ToSDKPageURLV2,
        paths: [{ path: 'entity.lineItems.url' }],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [
            { path: 'entity.lineItems.image' },
            { path: 'entity.lineItems.catalogOverrideFields.image' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            { path: 'entity.lineItems.physicalProperties.weight' },
            {
                path: 'entity.lineItems.catalogOverrideFields.physicalProperties.weight',
            },
        ],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [{ path: 'entity.contactInfo.address' }],
    },
])))();
export const onCartCreated = EventDefinition('wix.ecom.v1.cart_created', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.updatedDate' },
            {
                path: 'entity.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
            },
            { path: 'entity.lineItems.serviceProperties.scheduledDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTPageURLV2ToSDKPageURLV2,
        paths: [{ path: 'entity.lineItems.url' }],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [
            { path: 'entity.lineItems.image' },
            { path: 'entity.lineItems.catalogOverrideFields.image' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            { path: 'entity.lineItems.physicalProperties.weight' },
            {
                path: 'entity.lineItems.catalogOverrideFields.physicalProperties.weight',
            },
        ],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [{ path: 'entity.contactInfo.address' }],
    },
])))();
export { AdditionalFeeSource, AppliedDiscountDiscountType, ChannelType, ChargeType, DescriptionLineType, DiscountType, FallbackReason, FileType, ItemAvailabilityStatus, ItemTypeItemType, JurisdictionType, ManualCalculationReason, NameInLineItem, NameInOther, PaymentOptionType, PickupMethod, RateType, RuleType, Severity, SubscriptionFrequency, SuggestedFix, TaxableAddressType, VatType, WebhookIdentityType, WeightUnit, } from './ecom-v1-cart-current-cart.universal.js';
//# sourceMappingURL=ecom-v1-cart-current-cart.public.js.map