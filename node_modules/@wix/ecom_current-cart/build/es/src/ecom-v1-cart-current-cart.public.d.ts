import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { AddToCartResponse, AddToCartResponseNonNullableFields, AddToCurrentCartOptions, Cart, CartCreatedEnvelope, CartDeletedEnvelope, CartNonNullableFields, CartUpdatedEnvelope, CreateCheckoutFromCurrentCartOptions, CreateCheckoutResponse, CreateCheckoutResponseNonNullableFields, EstimateCurrentCartTotalsOptions, EstimateTotalsResponse, EstimateTotalsResponseNonNullableFields, LineItemQuantityUpdate, RemoveCouponResponse, RemoveCouponResponseNonNullableFields, RemoveLineItemsResponse, RemoveLineItemsResponseNonNullableFields, UpdateCurrentCartOptions, UpdateLineItemsQuantityResponse, UpdateLineItemsQuantityResponseNonNullableFields } from './ecom-v1-cart-current-cart.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function getCurrentCart(httpClient: HttpClient): GetCurrentCartSignature;
interface GetCurrentCartSignature {
    /**
     * Retrieves the current site visitor's cart.
     *
     *
     * The `getCurrentCart()` function returns a Promise that resolves when the current cart is retrieved.
     * @returns Current session's active cart.
     */
    (): Promise<Cart & CartNonNullableFields>;
}
export declare function updateCurrentCart(httpClient: HttpClient): UpdateCurrentCartSignature;
interface UpdateCurrentCartSignature {
    /**
     * Updates the current site visitor's cart.
     *
     *
     * The `updateCurrentCart()` function returns a Promise that resolves when the current cart's properties are updated.
     *
     * > **Note:** When updating catalog items, `options.lineItems.catalogReference` is required.
     * @param - Current cart update options.
     * @returns Fulfilled - The updated current cart.
     */
    (options?: UpdateCurrentCartOptions | undefined): Promise<Cart & CartNonNullableFields>;
}
export declare function addToCurrentCart(httpClient: HttpClient): AddToCurrentCartSignature;
interface AddToCurrentCartSignature {
    /**
     * Adds catalog line items to the current site visitor's cart.
     *
     *
     * The `addToCurrentCart()` function returns a Promise that resolves to the updated current cart when the specified items have been added.
     *
     * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
     * @param - Items to be added to the current cart.
     */
    (options?: AddToCurrentCartOptions | undefined): Promise<AddToCartResponse & AddToCartResponseNonNullableFields>;
}
export declare function removeLineItemsFromCurrentCart(httpClient: HttpClient): RemoveLineItemsFromCurrentCartSignature;
interface RemoveLineItemsFromCurrentCartSignature {
    /**
     * Removes line items from the current site visitor's cart.
     *
     *
     * The `removeLineItemsFromCurrentCart()` function returns a Promise that resolves to the updated current cart when the line items are removed.
     * @param - IDs of the line items to remove from the cart.
     */
    (lineItemIds: string[]): Promise<RemoveLineItemsResponse & RemoveLineItemsResponseNonNullableFields>;
}
export declare function createCheckoutFromCurrentCart(httpClient: HttpClient): CreateCheckoutFromCurrentCartSignature;
interface CreateCheckoutFromCurrentCartSignature {
    /**
     * Creates a checkout from the current site visitorâ€™s cart.
     *
     *
     * The `createCheckoutFromCurrentCart()` function returns a Promise that resolves to the new checkout's ID when it's created.
     *
     * If a checkout was already created from the current cart, that checkout will be updated with any new information from the cart.
     *
     * > **Note:** `options.channelType` is a required field.
     * @param - Checkout creation options.
     */
    (options?: CreateCheckoutFromCurrentCartOptions | undefined): Promise<CreateCheckoutResponse & CreateCheckoutResponseNonNullableFields>;
}
export declare function removeCouponFromCurrentCart(httpClient: HttpClient): RemoveCouponFromCurrentCartSignature;
interface RemoveCouponFromCurrentCartSignature {
    /**
     * Removes the coupon from the current site visitor's cart.
     *
     *
     * The `removeCouponFromCurrentCart()` function returns a Promise that resolves to the updated current cart when the coupon is removed.
     * @returns Fulfilled - Updated current cart.
     */
    (): Promise<RemoveCouponResponse & RemoveCouponResponseNonNullableFields>;
}
export declare function updateCurrentCartLineItemQuantity(httpClient: HttpClient): UpdateCurrentCartLineItemQuantitySignature;
interface UpdateCurrentCartLineItemQuantitySignature {
    /**
     * Updates the quantity of one or more line items in the current site visitor's cart.
     *
     *
     * The `updateCurrentCartLineItemQuantity()` function returns a Promise that resolves when the quantities of the current cart's line items are updated. This endpoint is only for updating the quantity of line items. To entirely remove a line item from the current cart, use [`removeLineItemsFromCurrentCart()`](#removelineitemsfromcurrentcart).
     * To add a new line item to the current cart, use [`addToCurrentCart()`](#addtocurrentcart).
     *
     * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity` is greater than the remaining stock, then the `quantity` returned in the response is the total amount of remaining stock.
     * @param - Line item IDs and their new quantity.
     * @returns Fulfilled - The updated current cart.
     */
    (lineItems: LineItemQuantityUpdate[]): Promise<UpdateLineItemsQuantityResponse & UpdateLineItemsQuantityResponseNonNullableFields>;
}
export declare function estimateCurrentCartTotals(httpClient: HttpClient): EstimateCurrentCartTotalsSignature;
interface EstimateCurrentCartTotalsSignature {
    /**
     * Estimates the current cart's price totals (including tax), based on a selected carrier service, shipping address, and billing information.
     *
     *
     * The `estimateCurrentCartTotals()` function returns a Promise that resolves when the estimated totals are generated.
     *
     * > **Note:** Not passing any `options` properties will only estimate the cart items price totals.
     * @param - Total estimation options.
     */
    (options?: EstimateCurrentCartTotalsOptions | undefined): Promise<EstimateTotalsResponse & EstimateTotalsResponseNonNullableFields>;
}
export declare function deleteCurrentCart(httpClient: HttpClient): DeleteCurrentCartSignature;
interface DeleteCurrentCartSignature {
    /**
     * Deletes the current site visitor's cart.
     *
     *
     * The `deleteCurrentCart()` function returns a Promise that resolves when the current cart is deleted.
     * @returns Fulfilled - When the current cart is deleted. Rejected - Error message.
     */
    (): Promise<void>;
}
export declare const onCartDeleted: EventDefinition<CartDeletedEnvelope, "wix.ecom.v1.cart_deleted">;
export declare const onCartUpdated: EventDefinition<CartUpdatedEnvelope, "wix.ecom.v1.cart_updated">;
export declare const onCartCreated: EventDefinition<CartCreatedEnvelope, "wix.ecom.v1.cart_created">;
export { ActionEvent, AddToCartRequest, AddToCartResponse, AddToCartResponseNonNullableFields, AddToCurrentCartAndEstimateTotalsRequest, AddToCurrentCartOptions, AddToCurrentCartRequest, AdditionalFee, AdditionalFeeSource, Address, AddressLocation, AddressWithContact, AggregatedTaxBreakdown, ApplicableLineItems, ApplicationError, AppliedDiscount, AppliedDiscountDiscountSourceOneOf, AppliedDiscountDiscountType, AutoTaxFallbackCalculationDetails, BaseEventMetadata, BuyerInfo, BuyerInfoIdOneOf, CalculatedLineItem, CalculationErrors, CalculationErrorsShippingCalculationErrorOneOf, Carrier, CarrierError, CarrierErrors, CarrierServiceOption, Cart, CartCreatedEnvelope, CartDeletedEnvelope, CartDiscount, CartDiscountDiscountSourceOneOf, CartNonNullableFields, CartUpdatedEnvelope, CatalogOverrideFields, CatalogReference, ChannelType, ChargeType, Color, Coupon, CreateCartRequest, CreateCartResponse, CreateCheckoutFromCurrentCartOptions, CreateCheckoutFromCurrentCartRequest, CreateCheckoutRequest, CreateCheckoutResponse, CreateCheckoutResponseNonNullableFields, CustomLineItem, DeleteCartRequest, DeleteCartResponse, DeleteCurrentCartRequest, DeliveryAllocation, DeliveryLogistics, DeliveryTimeSlot, Description, DescriptionLine, DescriptionLineDescriptionLineValueOneOf, DescriptionLineName, DescriptionLineType, DescriptionLineValueOneOf, Details, DetailsKindOneOf, DiscountRule, DiscountRuleName, DiscountType, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EstimateCurrentCartTotalsOptions, EstimateCurrentCartTotalsRequest, EstimateTotalsRequest, EstimateTotalsResponse, EstimateTotalsResponseNonNullableFields, EventMetadata, ExtendedFields, FallbackReason, FieldViolation, FileType, FocalPoint, FreeTrialPeriod, FullAddressContactDetails, GetCartByCheckoutIdRequest, GetCartByCheckoutIdResponse, GetCartRequest, GetCartResponse, GetCurrentCartRequest, GetCurrentCartResponse, GetCurrentCartResponseNonNullableFields, GiftCard, Group, HostSelectedMembership, IdentificationData, IdentificationDataIdOneOf, InvalidMembership, ItemAvailabilityInfo, ItemAvailabilityStatus, ItemTaxFullDetails, ItemType, ItemTypeItemType, ItemTypeItemTypeDataOneOf, JurisdictionType, LineItem, LineItemDiscount, LineItemPricesData, LineItemQuantityUpdate, ManualCalculationReason, Membership, MembershipName, MembershipOptions, MembershipPaymentCredits, MerchantDiscount, MerchantDiscountInput, MessageEnvelope, MultiCurrencyPrice, NameInLineItem, NameInOther, Other, OtherCharge, PaymentOption, PaymentOptionType, PhysicalProperties, PickupDetails, PickupMethod, PlainTextValue, Policy, PriceDescription, PriceSummary, ProductName, RateType, Region, RemoveCouponFromCurrentCartRequest, RemoveCouponRequest, RemoveCouponResponse, RemoveCouponResponseNonNullableFields, RemoveLineItemsFromCurrentCartRequest, RemoveLineItemsRequest, RemoveLineItemsResponse, RemoveLineItemsResponseNonNullableFields, RestoreInfo, RuleType, Scope, SecuredMedia, SelectedCarrierServiceOption, SelectedCarrierServiceOptionOtherCharge, SelectedCarrierServiceOptionPrices, SelectedMembership, SelectedMemberships, SelectedShippingOption, ServiceProperties, Severity, ShippingInformation, ShippingOption, ShippingPrice, ShippingRegion, StreetAddress, SubscriptionFrequency, SubscriptionOptionInfo, SubscriptionSettings, SuggestedFix, SystemError, Target, TargetLineItem, TargetTargetTypeOneOf, TaxBreakdown, TaxCalculationDetails, TaxCalculationDetailsCalculationDetailsOneOf, TaxRateBreakdown, TaxSummary, TaxableAddress, TaxableAddressTaxableAddressDataOneOf, TaxableAddressType, Title, UpdateCartRequest, UpdateCartResponse, UpdateCartResponseNonNullableFields, UpdateCurrentCartLineItemQuantityRequest, UpdateCurrentCartOptions, UpdateLineItemsQuantityRequest, UpdateLineItemsQuantityResponse, UpdateLineItemsQuantityResponseNonNullableFields, V1Coupon, V1DiscountRule, V1DiscountRuleName, V1MerchantDiscount, ValidationError, VatId, VatType, Violation, WebhookIdentityType, WeightUnit, } from './ecom-v1-cart-current-cart.universal.js';
