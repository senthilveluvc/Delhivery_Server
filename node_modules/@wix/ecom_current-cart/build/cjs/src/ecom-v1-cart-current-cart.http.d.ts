import { RequestOptionsFactory } from '@wix/sdk-types';
/**
 * Retrieves the current site visitor's cart.
 *
 *
 * The `getCurrentCart()` function returns a Promise that resolves when the current cart is retrieved.
 */
export declare function currentCartGetCurrentCart(payload: object): RequestOptionsFactory<any>;
/**
 * Updates the current site visitor's cart.
 *
 *
 * The `updateCurrentCart()` function returns a Promise that resolves when the current cart's properties are updated.
 *
 * > **Note:** When updating catalog items, `options.lineItems.catalogReference` is required.
 */
export declare function updateCurrentCart(payload: object): RequestOptionsFactory<any>;
/**
 * Adds catalog line items to the current site visitor's cart.
 *
 *
 * The `addToCurrentCart()` function returns a Promise that resolves to the updated current cart when the specified items have been added.
 *
 * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
 */
export declare function addToCurrentCart(payload: object): RequestOptionsFactory<any>;
/**
 * Removes line items from the current site visitor's cart.
 *
 *
 * The `removeLineItemsFromCurrentCart()` function returns a Promise that resolves to the updated current cart when the line items are removed.
 */
export declare function removeLineItemsFromCurrentCart(payload: object): RequestOptionsFactory<any>;
/**
 * Creates a checkout from the current site visitorâ€™s cart.
 *
 *
 * The `createCheckoutFromCurrentCart()` function returns a Promise that resolves to the new checkout's ID when it's created.
 *
 * If a checkout was already created from the current cart, that checkout will be updated with any new information from the cart.
 *
 * > **Note:** `options.channelType` is a required field.
 */
export declare function createCheckoutFromCurrentCart(payload: object): RequestOptionsFactory<any>;
/**
 * Removes the coupon from the current site visitor's cart.
 *
 *
 * The `removeCouponFromCurrentCart()` function returns a Promise that resolves to the updated current cart when the coupon is removed.
 */
export declare function removeCouponFromCurrentCart(payload: object): RequestOptionsFactory<any>;
/**
 * Updates the quantity of one or more line items in the current site visitor's cart.
 *
 *
 * The `updateCurrentCartLineItemQuantity()` function returns a Promise that resolves when the quantities of the current cart's line items are updated. This endpoint is only for updating the quantity of line items. To entirely remove a line item from the current cart, use [`removeLineItemsFromCurrentCart()`](#removelineitemsfromcurrentcart).
 * To add a new line item to the current cart, use [`addToCurrentCart()`](#addtocurrentcart).
 *
 * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity` is greater than the remaining stock, then the `quantity` returned in the response is the total amount of remaining stock.
 */
export declare function updateCurrentCartLineItemQuantity(payload: object): RequestOptionsFactory<any>;
/**
 * Estimates the current cart's price totals (including tax), based on a selected carrier service, shipping address, and billing information.
 *
 *
 * The `estimateCurrentCartTotals()` function returns a Promise that resolves when the estimated totals are generated.
 *
 * > **Note:** Not passing any `options` properties will only estimate the cart items price totals.
 */
export declare function estimateCurrentCartTotals(payload: object): RequestOptionsFactory<any>;
/**
 * Deletes the current site visitor's cart.
 *
 *
 * The `deleteCurrentCart()` function returns a Promise that resolves when the current cart is deleted.
 */
export declare function deleteCurrentCart(payload: object): RequestOptionsFactory<any>;
