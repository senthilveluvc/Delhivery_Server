"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteCurrentCart = exports.estimateCurrentCartTotals = exports.updateCurrentCartLineItemQuantity = exports.removeCouponFromCurrentCart = exports.createCheckoutFromCurrentCart = exports.removeLineItemsFromCurrentCart = exports.addToCurrentCart = exports.updateCurrentCart = exports.getCurrentCart = exports.WebhookIdentityType = exports.ChannelType = exports.SuggestedFix = exports.NameInLineItem = exports.NameInOther = exports.Severity = exports.AdditionalFeeSource = exports.RuleType = exports.AppliedDiscountDiscountType = exports.ChargeType = exports.PickupMethod = exports.FallbackReason = exports.ManualCalculationReason = exports.RateType = exports.JurisdictionType = exports.VatType = exports.DiscountType = exports.WeightUnit = exports.TaxableAddressType = exports.PaymentOptionType = exports.FileType = exports.SubscriptionFrequency = exports.ItemTypeItemType = exports.ItemAvailabilityStatus = exports.DescriptionLineType = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixEcomV1Cart = __importStar(require("./ecom-v1-cart-current-cart.http.js"));
const address_1 = require("@wix/sdk-runtime/transformations/address");
const address_2 = require("@wix/sdk-runtime/transformations/address");
const image_1 = require("@wix/sdk-runtime/transformations/image");
const image_2 = require("@wix/sdk-runtime/transformations/image");
const page_url_v2_1 = require("@wix/sdk-runtime/transformations/page-url-v2");
const page_url_v2_2 = require("@wix/sdk-runtime/transformations/page-url-v2");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
var DescriptionLineType;
(function (DescriptionLineType) {
    /** Unrecognized type. */
    DescriptionLineType["UNRECOGNISED"] = "UNRECOGNISED";
    /** Plain text type. */
    DescriptionLineType["PLAIN_TEXT"] = "PLAIN_TEXT";
    /** Color type. */
    DescriptionLineType["COLOR"] = "COLOR";
})(DescriptionLineType || (exports.DescriptionLineType = DescriptionLineType = {}));
var ItemAvailabilityStatus;
(function (ItemAvailabilityStatus) {
    ItemAvailabilityStatus["AVAILABLE"] = "AVAILABLE";
    /** Item does not exist */
    ItemAvailabilityStatus["NOT_FOUND"] = "NOT_FOUND";
    /** Item not in stock */
    ItemAvailabilityStatus["NOT_AVAILABLE"] = "NOT_AVAILABLE";
    /** Available quantity is less than requested */
    ItemAvailabilityStatus["PARTIALLY_AVAILABLE"] = "PARTIALLY_AVAILABLE";
})(ItemAvailabilityStatus || (exports.ItemAvailabilityStatus = ItemAvailabilityStatus = {}));
var ItemTypeItemType;
(function (ItemTypeItemType) {
    ItemTypeItemType["UNRECOGNISED"] = "UNRECOGNISED";
    ItemTypeItemType["PHYSICAL"] = "PHYSICAL";
    ItemTypeItemType["DIGITAL"] = "DIGITAL";
    ItemTypeItemType["GIFT_CARD"] = "GIFT_CARD";
    ItemTypeItemType["SERVICE"] = "SERVICE";
})(ItemTypeItemType || (exports.ItemTypeItemType = ItemTypeItemType = {}));
/** Frequency unit of recurring payment */
var SubscriptionFrequency;
(function (SubscriptionFrequency) {
    SubscriptionFrequency["UNDEFINED"] = "UNDEFINED";
    SubscriptionFrequency["DAY"] = "DAY";
    SubscriptionFrequency["WEEK"] = "WEEK";
    SubscriptionFrequency["MONTH"] = "MONTH";
    SubscriptionFrequency["YEAR"] = "YEAR";
})(SubscriptionFrequency || (exports.SubscriptionFrequency = SubscriptionFrequency = {}));
var FileType;
(function (FileType) {
    FileType["UNSPECIFIED"] = "UNSPECIFIED";
    FileType["SECURE_PICTURE"] = "SECURE_PICTURE";
    FileType["SECURE_VIDEO"] = "SECURE_VIDEO";
    FileType["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
    FileType["SECURE_MUSIC"] = "SECURE_MUSIC";
    FileType["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
})(FileType || (exports.FileType = FileType = {}));
/** Type of selected payment option for catalog item */
var PaymentOptionType;
(function (PaymentOptionType) {
    /** The entire payment for this item happens as part of the checkout. */
    PaymentOptionType["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    PaymentOptionType["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    PaymentOptionType["MEMBERSHIP"] = "MEMBERSHIP";
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    PaymentOptionType["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    PaymentOptionType["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
})(PaymentOptionType || (exports.PaymentOptionType = PaymentOptionType = {}));
var TaxableAddressType;
(function (TaxableAddressType) {
    TaxableAddressType["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
    TaxableAddressType["BUSINESS"] = "BUSINESS";
    TaxableAddressType["BILLING"] = "BILLING";
    TaxableAddressType["SHIPPING"] = "SHIPPING";
})(TaxableAddressType || (exports.TaxableAddressType = TaxableAddressType = {}));
var WeightUnit;
(function (WeightUnit) {
    /** Weight unit can't be classified, due to an error */
    WeightUnit["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
    /** Kilograms */
    WeightUnit["KG"] = "KG";
    /** Pounds */
    WeightUnit["LB"] = "LB";
})(WeightUnit || (exports.WeightUnit = WeightUnit = {}));
var DiscountType;
(function (DiscountType) {
    /** "GLOBAL" - discount applies to entire order. */
    DiscountType["GLOBAL"] = "GLOBAL";
    /** "SPECIFIC-ITEMS" - discount applies to specific items. */
    DiscountType["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
    /** "SHIPPING" - discount applies to shipping. For example, free shipping. */
    DiscountType["SHIPPING"] = "SHIPPING";
})(DiscountType || (exports.DiscountType = DiscountType = {}));
/** tax info types */
var VatType;
(function (VatType) {
    VatType["UNSPECIFIED"] = "UNSPECIFIED";
    /** CPF - for individual tax payers. */
    VatType["CPF"] = "CPF";
    /** CNPJ - for corporations */
    VatType["CNPJ"] = "CNPJ";
})(VatType || (exports.VatType = VatType = {}));
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
var JurisdictionType;
(function (JurisdictionType) {
    JurisdictionType["UNDEFINED"] = "UNDEFINED";
    JurisdictionType["COUNTRY"] = "COUNTRY";
    JurisdictionType["STATE"] = "STATE";
    JurisdictionType["COUNTY"] = "COUNTY";
    JurisdictionType["CITY"] = "CITY";
    JurisdictionType["SPECIAL"] = "SPECIAL";
})(JurisdictionType || (exports.JurisdictionType = JurisdictionType = {}));
var RateType;
(function (RateType) {
    /** no tax being collected for this request due to location of purchase */
    RateType["NO_TAX_COLLECTED"] = "NO_TAX_COLLECTED";
    /** manual rate used for calculation */
    RateType["MANUAL_RATE"] = "MANUAL_RATE";
    /** autotax rate used for calculation */
    RateType["AUTO_RATE"] = "AUTO_RATE";
    /** fallback rate used for calculation */
    RateType["FALLBACK_RATE"] = "FALLBACK_RATE";
})(RateType || (exports.RateType = RateType = {}));
var ManualCalculationReason;
(function (ManualCalculationReason) {
    /** user set calculator in Business Manager to be Manual */
    ManualCalculationReason["GLOBAL_SETTING_TO_MANUAL"] = "GLOBAL_SETTING_TO_MANUAL";
    /** specific region is on manual even though Global setting is Auto-tax */
    ManualCalculationReason["REGION_SETTING_TO_MANUAL"] = "REGION_SETTING_TO_MANUAL";
})(ManualCalculationReason || (exports.ManualCalculationReason = ManualCalculationReason = {}));
var FallbackReason;
(function (FallbackReason) {
    /** auto-tax failed to be calculated */
    FallbackReason["AUTO_TAX_FAILED"] = "AUTO_TAX_FAILED";
    /** auto-tax was temporarily deactivated on a system-level */
    FallbackReason["AUTO_TAX_DEACTIVATED"] = "AUTO_TAX_DEACTIVATED";
})(FallbackReason || (exports.FallbackReason = FallbackReason = {}));
var PickupMethod;
(function (PickupMethod) {
    PickupMethod["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
    PickupMethod["STORE_PICKUP"] = "STORE_PICKUP";
    PickupMethod["PICKUP_POINT"] = "PICKUP_POINT";
})(PickupMethod || (exports.PickupMethod = PickupMethod = {}));
var ChargeType;
(function (ChargeType) {
    ChargeType["HANDLING_FEE"] = "HANDLING_FEE";
    ChargeType["INSURANCE"] = "INSURANCE";
})(ChargeType || (exports.ChargeType = ChargeType = {}));
var AppliedDiscountDiscountType;
(function (AppliedDiscountDiscountType) {
    AppliedDiscountDiscountType["GLOBAL"] = "GLOBAL";
    AppliedDiscountDiscountType["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
    AppliedDiscountDiscountType["SHIPPING"] = "SHIPPING";
})(AppliedDiscountDiscountType || (exports.AppliedDiscountDiscountType = AppliedDiscountDiscountType = {}));
var RuleType;
(function (RuleType) {
    RuleType["VALIDATION"] = "VALIDATION";
    RuleType["OTHER"] = "OTHER";
    RuleType["MAX"] = "MAX";
    RuleType["MIN"] = "MIN";
    RuleType["MAX_LENGTH"] = "MAX_LENGTH";
    RuleType["MIN_LENGTH"] = "MIN_LENGTH";
    RuleType["MAX_SIZE"] = "MAX_SIZE";
    RuleType["MIN_SIZE"] = "MIN_SIZE";
    RuleType["FORMAT"] = "FORMAT";
    RuleType["DECIMAL_LTE"] = "DECIMAL_LTE";
    RuleType["DECIMAL_GTE"] = "DECIMAL_GTE";
    RuleType["DECIMAL_LT"] = "DECIMAL_LT";
    RuleType["DECIMAL_GT"] = "DECIMAL_GT";
    RuleType["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
    RuleType["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
    RuleType["REQUIRED_FIELD"] = "REQUIRED_FIELD";
    RuleType["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
    RuleType["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
    RuleType["EXACT_LENGTH"] = "EXACT_LENGTH";
    RuleType["EXACT_SIZE"] = "EXACT_SIZE";
    RuleType["REQUIRED_ONE_OF_FIELD"] = "REQUIRED_ONE_OF_FIELD";
})(RuleType || (exports.RuleType = RuleType = {}));
var AdditionalFeeSource;
(function (AdditionalFeeSource) {
    AdditionalFeeSource["UNKNOWN_ADDITIONAL_FEE_SOURCE"] = "UNKNOWN_ADDITIONAL_FEE_SOURCE";
    /** The additional fee was added by an additional fee service plugin */
    AdditionalFeeSource["SERVICE_PLUGIN"] = "SERVICE_PLUGIN";
    /** The additional fee was added on the item either via the catalog or on custom line item */
    AdditionalFeeSource["ITEM"] = "ITEM";
    /** The additional fee was added manually on the request */
    AdditionalFeeSource["MANUAL"] = "MANUAL";
})(AdditionalFeeSource || (exports.AdditionalFeeSource = AdditionalFeeSource = {}));
var Severity;
(function (Severity) {
    /** The user is allowed to move forward in the flow. */
    Severity["WARNING"] = "WARNING";
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    Severity["ERROR"] = "ERROR";
})(Severity || (exports.Severity = Severity = {}));
/** Available locations on the webpage */
var NameInOther;
(function (NameInOther) {
    /** Default location, in case no specific location is specified. */
    NameInOther["OTHER_DEFAULT"] = "OTHER_DEFAULT";
})(NameInOther || (exports.NameInOther = NameInOther = {}));
/** Available locations on the line item */
var NameInLineItem;
(function (NameInLineItem) {
    /** Default location, in case no specific location is specified. */
    NameInLineItem["LINE_ITEM_DEFAULT"] = "LINE_ITEM_DEFAULT";
})(NameInLineItem || (exports.NameInLineItem = NameInLineItem = {}));
var SuggestedFix;
(function (SuggestedFix) {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    SuggestedFix["UNKNOWN_SUGGESTED_FIX"] = "UNKNOWN_SUGGESTED_FIX";
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    SuggestedFix["REMOVE_LINE_ITEM"] = "REMOVE_LINE_ITEM";
})(SuggestedFix || (exports.SuggestedFix = SuggestedFix = {}));
var ChannelType;
(function (ChannelType) {
    /** Unspecified sales channel. This value is not supported. */
    ChannelType["UNSPECIFIED"] = "UNSPECIFIED";
    /** A web client. */
    ChannelType["WEB"] = "WEB";
    /** [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395). */
    ChannelType["POS"] = "POS";
    /** [eBay shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop). */
    ChannelType["EBAY"] = "EBAY";
    /** [Amazon shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop). */
    ChannelType["AMAZON"] = "AMAZON";
    /** Other sales platform. */
    ChannelType["OTHER_PLATFORM"] = "OTHER_PLATFORM";
    /** [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview). */
    ChannelType["WIX_APP_STORE"] = "WIX_APP_STORE";
    /** Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings) */
    ChannelType["WIX_INVOICES"] = "WIX_INVOICES";
    /** Wix merchant backoffice. */
    ChannelType["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
    /** Wish sales channel. */
    ChannelType["WISH"] = "WISH";
    /** [ClassPass sales channel](https://support.wix.com/en/article/wix-bookings-letting-clients-book-your-services-with-classpass). */
    ChannelType["CLASS_PASS"] = "CLASS_PASS";
    /** Global-E sales channel. */
    ChannelType["GLOBAL_E"] = "GLOBAL_E";
    /** [Facebook shop](https://support.wix.com/en/article/wix-stores-changes-to-facebook-shops). */
    ChannelType["FACEBOOK"] = "FACEBOOK";
    /** [Etsy sales channel](https://support.wix.com/en/article/wix-stores-request-adding-etsy-as-a-sales-channel). */
    ChannelType["ETSY"] = "ETSY";
    /** [TikTok sales channel](https://support.wix.com/en/article/wix-stores-request-adding-tiktok-as-a-sales-channel). */
    ChannelType["TIKTOK"] = "TIKTOK";
    /** [Faire marketplace integration](https://support.wix.com/en/article/wix-stores-creating-a-faire-store-using-the-faire-integration-app). */
    ChannelType["FAIRE_COM"] = "FAIRE_COM";
})(ChannelType || (exports.ChannelType = ChannelType = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Retrieves the current site visitor's cart.
 *
 *
 * The `getCurrentCart()` function returns a Promise that resolves when the current cart is retrieved.
 * @public
 * @permissionId ECOM.READ_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Current session's active cart.
 * @fqn com.wix.ecom.cart.api.v1.CurrentCartService.GetCurrentCart
 */
async function getCurrentCart() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({});
    const reqOpts = ambassadorWixEcomV1Cart.currentCartGetCurrentCart(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'cart.lineItems.url' }],
            },
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'cart.lineItems.image' },
                    { path: 'cart.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'cart.contactInfo.address' }],
            },
        ]))?.cart;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getCurrentCart = getCurrentCart;
/**
 * Updates the current site visitor's cart.
 *
 *
 * The `updateCurrentCart()` function returns a Promise that resolves when the current cart's properties are updated.
 *
 * > **Note:** When updating catalog items, `options.lineItems.catalogReference` is required.
 * @public
 * @requiredField options.lineItems.catalogReference
 * @param options - Current cart update options.
 * @permissionId ECOM.MODIFY_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - The updated current cart.
 * @fqn com.wix.ecom.cart.api.v1.CurrentCartService.UpdateCurrentCart
 */
async function updateCurrentCart(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        cartInfo: options?.cartInfo,
        couponCode: options?.couponCode,
        merchantDiscounts: options?.merchantDiscounts,
        lineItems: options?.lineItems,
        customLineItems: options?.customLineItems,
    }), [
        {
            transformFn: page_url_v2_1.transformSDKPageURLV2ToRESTPageURLV2,
            paths: [
                { path: 'cartInfo.lineItems.url' },
                { path: 'lineItems.url' },
                { path: 'customLineItems.url' },
            ],
        },
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [
                { path: 'cartInfo.lineItems.image' },
                { path: 'cartInfo.lineItems.catalogOverrideFields.image' },
                { path: 'lineItems.image' },
                { path: 'lineItems.catalogOverrideFields.image' },
                { path: 'customLineItems.media' },
            ],
        },
        {
            transformFn: address_1.transformSDKAddressToRESTAddress,
            paths: [{ path: 'cartInfo.contactInfo.address' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1Cart.updateCurrentCart(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'cart.lineItems.url' }],
            },
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'cart.lineItems.image' },
                    { path: 'cart.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'cart.contactInfo.address' }],
            },
        ]))?.cart;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                cartInfo: '$[0].cartInfo',
                couponCode: '$[0].couponCode',
                merchantDiscounts: '$[0].merchantDiscounts',
                lineItems: '$[0].lineItems',
                customLineItems: '$[0].customLineItems',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateCurrentCart = updateCurrentCart;
/**
 * Adds catalog line items to the current site visitor's cart.
 *
 *
 * The `addToCurrentCart()` function returns a Promise that resolves to the updated current cart when the specified items have been added.
 *
 * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
 * @public
 * @requiredField options.customLineItems.descriptionLines
 * @requiredField options.customLineItems.descriptionLines.name
 * @requiredField options.customLineItems.itemType
 * @requiredField options.customLineItems.price
 * @requiredField options.customLineItems.productName
 * @requiredField options.customLineItems.quantity
 * @requiredField options.lineItems.catalogReference
 * @requiredField options.lineItems.quantity
 * @requiredField options.lineItems.selectedMembership._id
 * @requiredField options.lineItems.selectedMembership.appId
 * @param options - Items to be added to the current cart.
 * @permissionId ECOM.MODIFY_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.cart.api.v1.CurrentCartService.AddToCurrentCart
 */
async function addToCurrentCart(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        lineItems: options?.lineItems,
        customLineItems: options?.customLineItems,
    }), [
        {
            transformFn: page_url_v2_1.transformSDKPageURLV2ToRESTPageURLV2,
            paths: [{ path: 'lineItems.url' }, { path: 'customLineItems.url' }],
        },
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [
                { path: 'lineItems.image' },
                { path: 'lineItems.catalogOverrideFields.image' },
                { path: 'customLineItems.media' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1Cart.addToCurrentCart(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'cart.lineItems.url' }],
            },
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'cart.lineItems.image' },
                    { path: 'cart.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'cart.contactInfo.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                lineItems: '$[0].lineItems',
                customLineItems: '$[0].customLineItems',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.addToCurrentCart = addToCurrentCart;
/**
 * Removes line items from the current site visitor's cart.
 *
 *
 * The `removeLineItemsFromCurrentCart()` function returns a Promise that resolves to the updated current cart when the line items are removed.
 * @public
 * @requiredField lineItemIds
 * @param lineItemIds - IDs of the line items to remove from the cart.
 * @permissionId ECOM.MODIFY_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.cart.api.v1.CurrentCartService.RemoveLineItemsFromCurrentCart
 */
async function removeLineItemsFromCurrentCart(lineItemIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        lineItemIds: lineItemIds,
    });
    const reqOpts = ambassadorWixEcomV1Cart.removeLineItemsFromCurrentCart(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'cart.lineItems.url' }],
            },
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'cart.lineItems.image' },
                    { path: 'cart.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'cart.contactInfo.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { lineItemIds: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['lineItemIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.removeLineItemsFromCurrentCart = removeLineItemsFromCurrentCart;
/**
 * Creates a checkout from the current site visitor’s cart.
 *
 *
 * The `createCheckoutFromCurrentCart()` function returns a Promise that resolves to the new checkout's ID when it's created.
 *
 * If a checkout was already created from the current cart, that checkout will be updated with any new information from the cart.
 *
 * > **Note:** `options.channelType` is a required field.
 * @public
 * @param options - Checkout creation options.
 * @permissionId ECOM.CREATE_CHECKOUT_FROM_CART
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.cart.api.v1.CurrentCartService.CreateCheckoutFromCurrentCart
 */
async function createCheckoutFromCurrentCart(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        channelType: options?.channelType,
        shippingAddress: options?.shippingAddress,
        billingAddress: options?.billingAddress,
        selectedShippingOption: options?.selectedShippingOption,
        email: options?.email,
    }), [
        {
            transformFn: address_1.transformSDKAddressToRESTAddress,
            paths: [{ path: 'shippingAddress' }, { path: 'billingAddress' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1Cart.createCheckoutFromCurrentCart(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                channelType: '$[0].channelType',
                shippingAddress: '$[0].shippingAddress',
                billingAddress: '$[0].billingAddress',
                selectedShippingOption: '$[0].selectedShippingOption',
                email: '$[0].email',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createCheckoutFromCurrentCart = createCheckoutFromCurrentCart;
/**
 * Removes the coupon from the current site visitor's cart.
 *
 *
 * The `removeCouponFromCurrentCart()` function returns a Promise that resolves to the updated current cart when the coupon is removed.
 * @public
 * @permissionId ECOM.MODIFY_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - Updated current cart.
 * @fqn com.wix.ecom.cart.api.v1.CurrentCartService.RemoveCouponFromCurrentCart
 */
async function removeCouponFromCurrentCart() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({});
    const reqOpts = ambassadorWixEcomV1Cart.removeCouponFromCurrentCart(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'cart.lineItems.url' }],
            },
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'cart.lineItems.image' },
                    { path: 'cart.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'cart.contactInfo.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.removeCouponFromCurrentCart = removeCouponFromCurrentCart;
/**
 * Updates the quantity of one or more line items in the current site visitor's cart.
 *
 *
 * The `updateCurrentCartLineItemQuantity()` function returns a Promise that resolves when the quantities of the current cart's line items are updated. This endpoint is only for updating the quantity of line items. To entirely remove a line item from the current cart, use [`removeLineItemsFromCurrentCart()`](#removelineitemsfromcurrentcart).
 * To add a new line item to the current cart, use [`addToCurrentCart()`](#addtocurrentcart).
 *
 * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity` is greater than the remaining stock, then the `quantity` returned in the response is the total amount of remaining stock.
 * @param lineItems - Line item IDs and their new quantity.
 * @public
 * @requiredField lineItems
 * @permissionId ECOM.MODIFY_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - The updated current cart.
 * @fqn com.wix.ecom.cart.api.v1.CurrentCartService.UpdateCurrentCartLineItemQuantity
 */
async function updateCurrentCartLineItemQuantity(lineItems) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        lineItems: lineItems,
    });
    const reqOpts = ambassadorWixEcomV1Cart.updateCurrentCartLineItemQuantity(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'cart.lineItems.url' }],
            },
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'cart.lineItems.image' },
                    { path: 'cart.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'cart.contactInfo.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { lineItems: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['lineItems']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateCurrentCartLineItemQuantity = updateCurrentCartLineItemQuantity;
/**
 * Estimates the current cart's price totals (including tax), based on a selected carrier service, shipping address, and billing information.
 *
 *
 * The `estimateCurrentCartTotals()` function returns a Promise that resolves when the estimated totals are generated.
 *
 * > **Note:** Not passing any `options` properties will only estimate the cart items price totals.
 * @public
 * @param options - Total estimation options.
 * @permissionId ECOM.READ_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.cart.api.v1.CurrentCartService.EstimateCurrentCartTotals
 */
async function estimateCurrentCartTotals(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        selectedShippingOption: options?.selectedShippingOption,
        shippingAddress: options?.shippingAddress,
        billingAddress: options?.billingAddress,
        selectedMemberships: options?.selectedMemberships,
        calculateTax: options?.calculateTax,
        calculateShipping: options?.calculateShipping,
    }), [
        {
            transformFn: address_1.transformSDKAddressToRESTAddress,
            paths: [{ path: 'shippingAddress' }, { path: 'billingAddress' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1Cart.estimateCurrentCartTotals(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: page_url_v2_2.transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'cart.lineItems.url' }],
            },
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [
                    { path: 'cart.lineItems.image' },
                    { path: 'cart.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'cart.contactInfo.address' },
                    {
                        path: 'shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
                    },
                    {
                        path: 'shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                selectedShippingOption: '$[0].selectedShippingOption',
                shippingAddress: '$[0].shippingAddress',
                billingAddress: '$[0].billingAddress',
                selectedMemberships: '$[0].selectedMemberships',
                calculateTax: '$[0].calculateTax',
                calculateShipping: '$[0].calculateShipping',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.estimateCurrentCartTotals = estimateCurrentCartTotals;
/**
 * Deletes the current site visitor's cart.
 *
 *
 * The `deleteCurrentCart()` function returns a Promise that resolves when the current cart is deleted.
 * @public
 * @permissionId ECOM.MODIFY_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - When the current cart is deleted. Rejected - Error message.
 * @fqn com.wix.ecom.cart.api.v1.CurrentCartService.DeleteCurrentCart
 */
async function deleteCurrentCart() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({});
    const reqOpts = ambassadorWixEcomV1Cart.deleteCurrentCart(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteCurrentCart = deleteCurrentCart;
//# sourceMappingURL=ecom-v1-cart-current-cart.universal.js.map