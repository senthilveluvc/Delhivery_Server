import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';
import { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { resolveUrl } from '@wix/sdk-runtime/rest-modules';
function resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl(opts) {
    const domainToMappings = {
        'bo._base_domain_': [
            {
                srcPath: '/back-in-stock-service',
                destPath: '',
            },
        ],
        'wixbo.ai': [
            {
                srcPath: '/back-in-stock-service',
                destPath: '',
            },
        ],
        'wix-bo.com': [
            {
                srcPath: '/back-in-stock-service',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/back-in-stock-service',
                destPath: '',
            },
        ],
    };
    return resolveUrl(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/ecom_back-in-stock-notifications';
/**
 * Creates a back in stock notification request.
 *
 * If a notification request already exists for the same `catalogReference` and `email`,
 * then a new one isn't created and the existing request is returned.
 */
export function createBackInStockNotificationRequest(payload) {
    function __createBackInStockNotificationRequest({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'request.createdDate' },
                    { path: 'itemDetails.image.urlExpirationDate' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.back_in_stock_notification_request',
            method: 'POST',
            methodFqn: 'com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.CreateBackInStockNotificationRequest',
            packageName: PACKAGE_NAME,
            url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl({
                protoPath: '/v1/back-in-stock-notification-requests',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [{ path: 'request.createdDate' }],
                },
            ]),
        };
        return metadata;
    }
    return __createBackInStockNotificationRequest;
}
/** Retrieves a back in stock notification request. */
export function getBackInStockNotificationRequest(payload) {
    function __getBackInStockNotificationRequest({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.back_in_stock_notification_request',
            method: 'GET',
            methodFqn: 'com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.GetBackInStockNotificationRequest',
            packageName: PACKAGE_NAME,
            url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl({
                protoPath: '/v1/back-in-stock-notification-requests/{id}',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [{ path: 'request.createdDate' }],
                },
            ]),
        };
        return metadata;
    }
    return __getBackInStockNotificationRequest;
}
/** Deletes a back in stock notification request. */
export function deleteBackInStockNotificationRequest(payload) {
    function __deleteBackInStockNotificationRequest({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.back_in_stock_notification_request',
            method: 'DELETE',
            methodFqn: 'com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.DeleteBackInStockNotificationRequest',
            packageName: PACKAGE_NAME,
            url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl({
                protoPath: '/v1/back-in-stock-notification-requests/{id}',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
        };
        return metadata;
    }
    return __deleteBackInStockNotificationRequest;
}
/**
 * Sets `status` of a back in stock request to `NOTIFICATION_SENT`.
 *
 * Use this function if the notification is sent manually offline. If the notification is sent automatically or with the `reportItemsBackInStock()` function, then `status` updates on its own.
 */
export function markAsNotificationSent(payload) {
    function __markAsNotificationSent({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.back_in_stock_notification_request',
            method: 'PUT',
            methodFqn: 'com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.MarkAsNotificationSent',
            packageName: PACKAGE_NAME,
            url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl({
                protoPath: '/v1/back-in-stock-notification-requests/{id}/mark-as-notification-sent',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [{ path: 'request.createdDate' }],
                },
            ]),
        };
        return metadata;
    }
    return __markAsNotificationSent;
}
/**
 * Creates a query to retrieve a list of back in stock notification requests.
 *
 * The `queryBackInStockNotificationRequests()` method builds a query to retrieve a list of back in stock notification requests and returns a `RequestsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the `find()` method.
 *
 * You can refine the query by chaining `RequestsQueryBuilder` methods onto the query. `RequestsQueryBuilder` methods enable you to sort, filter, and control the results that `queryBackInStockNotificationRequests()` returns.
 *
 * The following `RequestsQueryBuilder` methods are supported for `queryBackInStockNotificationRequests()`. For a full description of the Requests object, see the object returned for the `items` property in `RequestsQueryResult`."
 */
export function queryBackInStockNotificationRequests(payload) {
    function __queryBackInStockNotificationRequests({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.back_in_stock_notification_request',
            method: 'GET',
            methodFqn: 'com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.QueryBackInStockNotificationRequests',
            packageName: PACKAGE_NAME,
            url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl({
                protoPath: '/v1/back-in-stock-notification-requests',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload, true),
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [{ path: 'requests.createdDate' }],
                },
            ]),
        };
        return metadata;
    }
    return __queryBackInStockNotificationRequests;
}
/** Retrieves the amount of back in stock requests for a given `catalogReference` item. */
export function getBackInStockNotificationRequestsCountByCatalogReferences(payload) {
    function __getBackInStockNotificationRequestsCountByCatalogReferences({ host, }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.back_in_stock_notification_request',
            method: 'GET',
            methodFqn: 'com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.GetBackInStockNotificationRequestsCountByCatalogReferences',
            packageName: PACKAGE_NAME,
            url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl({
                protoPath: '/v1/back-in-stock-notification-requests/count-by-catalog-reference',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload, true),
        };
        return metadata;
    }
    return __getBackInStockNotificationRequestsCountByCatalogReferences;
}
/**
 * Sends notifications for back in stock requests.
 *
 * > **Important:**
 * > Automations must be turned on in a [site's dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Go%20to%20Back-in-Stock&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https://www.wix.com/dashboard/{{metaSiteId}}/store/back-in-stock) for notifications to send.
 *
 * This endpoint triggers notifications for requests in 1 of 2 ways:
 * 1. For a specific item, with the `catalogReference` information.
 * 2. For specific requests, with `requestIds`.
 *
 * `itemDetails` are required and may populate dynamic values in the notification template, as follows:
 * + `itemDetails.name` passes to the template as `item.name`
 * + `itemDetails.price` passes to the template as `item.price`
 * + `itemDetails.image.url` passes to the template as `item.image.url`
 *
 * If the notification template doesn't include `item.price`, `item.name`, or `item.image.url`, values should
 * be passed in `extraAutomationTemplateParameters`.
 *
 * After this endpoint is called, the `status` for the request will update to `NOTIFICATION_SENT` if it sends
 * successfully, or to `FAILED` if it fails to send.
 */
export function reportItemsBackInStock(payload) {
    function __reportItemsBackInStock({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [{ path: 'itemDetails.image.urlExpirationDate' }],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.back_in_stock_notification_request',
            method: 'POST',
            methodFqn: 'com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.ReportItemsBackInStock',
            packageName: PACKAGE_NAME,
            url: resolveComWixpressEcomBackInStockBackInStockNotificationRequestServiceUrl({
                protoPath: '/v1/back-in-stock-notification-requests/report-items-back-in-stock',
                data: serializedData,
                host,
            }),
            data: serializedData,
        };
        return metadata;
    }
    return __reportItemsBackInStock;
}
//# sourceMappingURL=ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.http.js.map