"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.reportItemsBackInStock = exports.getBackInStockNotificationRequestsCountByCatalogReferences = exports.queryBackInStockNotificationRequests = exports.markAsNotificationSent = exports.deleteBackInStockNotificationRequest = exports.getBackInStockNotificationRequest = exports.createBackInStockNotificationRequest = exports.WebhookIdentityType = exports.SortOrder = exports.Status = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixEcomV1BackInStockNotificationRequest = __importStar(require("./ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.http.js"));
// @ts-ignore
const image_1 = require("@wix/sdk-runtime/transformations/image");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
var Status;
(function (Status) {
    Status["UNSPECIFIED"] = "UNSPECIFIED";
    /** initial status of all new requests */
    Status["RECEIVED"] = "RECEIVED";
    Status["PROCESSING"] = "PROCESSING";
    Status["NOTIFICATION_SENT"] = "NOTIFICATION_SENT";
    Status["FAILED"] = "FAILED";
})(Status || (exports.Status = Status = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Creates a back in stock notification request.
 *
 * If a notification request already exists for the same `catalogReference` and `email`,
 * then a new one isn't created and the existing request is returned.
 * @param request - Notification request information.
 *
 * Includes details for the out of stock item and the email address
 * requesting to be notified when it's back in stock.
 * @param itemDetails - Item details to include in the notification when the item is back in stock.
 * @public
 * @documentationMaturity preview
 * @requiredField itemDetails
 * @requiredField itemDetails.name
 * @requiredField itemDetails.price
 * @requiredField request
 * @requiredField request.catalogReference
 * @requiredField request.catalogReference.appId
 * @requiredField request.catalogReference.catalogItemId
 * @requiredField request.email
 * @permissionId ECOM.CREATE_BACK_IN_STOCK_NOTIFICATION_REQUESTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Created back in stock notification request.
 * @fqn com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.CreateBackInStockNotificationRequest
 */
async function createBackInStockNotificationRequest(request, itemDetails) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        request: request,
        itemDetails: itemDetails,
    }), [
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [{ path: 'itemDetails.image' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1BackInStockNotificationRequest.createBackInStockNotificationRequest(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.request;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { request: '$[0]', itemDetails: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['request', 'itemDetails']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createBackInStockNotificationRequest = createBackInStockNotificationRequest;
/**
 * Retrieves a back in stock notification request.
 * @param _id - ID of the notification request to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @permissionId ECOM.READ_BACK_IN_STOCK_NOTIFICATION_REQUESTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @returns Retrieved back in stock notification request.
 * @fqn com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.GetBackInStockNotificationRequest
 */
async function getBackInStockNotificationRequest(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
    const reqOpts = ambassadorWixEcomV1BackInStockNotificationRequest.getBackInStockNotificationRequest(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)?.request;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getBackInStockNotificationRequest = getBackInStockNotificationRequest;
/**
 * Deletes a back in stock notification request.
 * @param _id - ID of the notification request to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @permissionId ECOM.MODIFY_BACK_IN_STOCK_NOTIFICATION_REQUESTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @fqn com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.DeleteBackInStockNotificationRequest
 */
async function deleteBackInStockNotificationRequest(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
    const reqOpts = ambassadorWixEcomV1BackInStockNotificationRequest.deleteBackInStockNotificationRequest(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteBackInStockNotificationRequest = deleteBackInStockNotificationRequest;
/**
 * Sets `status` of a back in stock request to `NOTIFICATION_SENT`.
 *
 * Use this function if the notification is sent manually offline. If the notification is sent automatically or with the `reportItemsBackInStock()` function, then `status` updates on its own.
 * @param _id - ID of the notification request to mark.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @permissionId ECOM.MODIFY_BACK_IN_STOCK_NOTIFICATION_REQUESTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @fqn com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.MarkAsNotificationSent
 */
async function markAsNotificationSent(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ id: _id });
    const reqOpts = ambassadorWixEcomV1BackInStockNotificationRequest.markAsNotificationSent(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.markAsNotificationSent = markAsNotificationSent;
/**
 * Creates a query to retrieve a list of back in stock notification requests.
 *
 * The `queryBackInStockNotificationRequests()` method builds a query to retrieve a list of back in stock notification requests and returns a `RequestsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the `find()` method.
 *
 * You can refine the query by chaining `RequestsQueryBuilder` methods onto the query. `RequestsQueryBuilder` methods enable you to sort, filter, and control the results that `queryBackInStockNotificationRequests()` returns.
 *
 * The following `RequestsQueryBuilder` methods are supported for `queryBackInStockNotificationRequests()`. For a full description of the Requests object, see the object returned for the `items` property in `RequestsQueryResult`."
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionId ECOM.READ_BACK_IN_STOCK_NOTIFICATION_REQUESTS
 * @applicableIdentity APP
 * @fqn com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.QueryBackInStockNotificationRequests
 */
function queryBackInStockNotificationRequests() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixEcomV1BackInStockNotificationRequest.queryBackInStockNotificationRequests(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(data);
            return {
                items: transformedData?.requests,
                pagingMetadata: transformedData?.metadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
exports.queryBackInStockNotificationRequests = queryBackInStockNotificationRequests;
/**
 * Retrieves the amount of back in stock requests for a given `catalogReference` item.
 * @param catalogReferences - `catalogReference` items to retrieve the notification request for.
 * @public
 * @documentationMaturity preview
 * @requiredField catalogReferences
 * @permissionId ECOM.READ_BACK_IN_STOCK_NOTIFICATION_REQUESTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @fqn com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.GetBackInStockNotificationRequestsCountByCatalogReferences
 */
async function getBackInStockNotificationRequestsCountByCatalogReferences(catalogReferences) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        catalogReferences: catalogReferences,
    });
    const reqOpts = ambassadorWixEcomV1BackInStockNotificationRequest.getBackInStockNotificationRequestsCountByCatalogReferences(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { catalogReferences: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['catalogReferences']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getBackInStockNotificationRequestsCountByCatalogReferences = getBackInStockNotificationRequestsCountByCatalogReferences;
/**
 * Sends notifications for back in stock requests.
 *
 * > **Important:**
 * > Automations must be turned on in a [site's dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Go%20to%20Back-in-Stock&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https://www.wix.com/dashboard/{{metaSiteId}}/store/back-in-stock) for notifications to send.
 *
 * This endpoint triggers notifications for requests in 1 of 2 ways:
 * 1. For a specific item, with the `catalogReference` information.
 * 2. For specific requests, with `requestIds`.
 *
 * `itemDetails` are required and may populate dynamic values in the notification template, as follows:
 * + `itemDetails.name` passes to the template as `item.name`
 * + `itemDetails.price` passes to the template as `item.price`
 * + `itemDetails.image.url` passes to the template as `item.image.url`
 *
 * If the notification template doesn't include `item.price`, `item.name`, or `item.image.url`, values should
 * be passed in `extraAutomationTemplateParameters`.
 *
 * After this endpoint is called, the `status` for the request will update to `NOTIFICATION_SENT` if it sends
 * successfully, or to `FAILED` if it fails to send.
 * @param itemDetails - Item details to use in notifications.
 *
 * `itemDetails` may populate dynamic valyes in the notification template, as follows:
 * + `itemDetails.name` passes to the template as `item.name`
 * + `itemDetails.price` passes to the template as `item.price`
 * + `itemDetails.image.url` passes to the template as `item.image.url`
 *
 * Use `extraAutomationTemplateParameters` to pass additional dynamic values.
 * @public
 * @documentationMaturity preview
 * @requiredField itemDetails
 * @requiredField itemDetails.name
 * @requiredField itemDetails.price
 * @param options - Report options.
 * @permissionId ECOM.MODIFY_BACK_IN_STOCK_NOTIFICATION_REQUESTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @fqn com.wixpress.ecom.back.in.stock.BackInStockNotificationRequestService.ReportItemsBackInStock
 */
async function reportItemsBackInStock(itemDetails, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        itemDetails: itemDetails,
        catalogReference: options?.catalogReference,
        requestIds: options?.requestIds,
        extraAutomationTemplateParameters: options?.extraAutomationTemplateParameters,
    }), [
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [{ path: 'itemDetails.image' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1BackInStockNotificationRequest.reportItemsBackInStock(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                itemDetails: '$[0]',
                catalogReference: '$[1].catalogReference',
                requestIds: '$[1].requestIds',
                extraAutomationTemplateParameters: '$[1].extraAutomationTemplateParameters',
            },
            singleArgumentUnchanged: false,
        }, ['itemDetails', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.reportItemsBackInStock = reportItemsBackInStock;
//# sourceMappingURL=ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.universal.js.map