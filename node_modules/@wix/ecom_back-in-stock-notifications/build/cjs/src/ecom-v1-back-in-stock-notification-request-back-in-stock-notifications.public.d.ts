import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { BackInStockItemDetails, BackInStockNotificationRequest, BackInStockNotificationRequestCreatedEnvelope, BackInStockNotificationRequestDeletedEnvelope, BackInStockNotificationRequestNonNullableFields, BackInStockNotificationRequestUpdatedEnvelope, CatalogReference, GetBackInStockNotificationRequestsCountByCatalogReferencesResponse, GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields, MarkAsNotificationSentResponse, MarkAsNotificationSentResponseNonNullableFields, ReportItemsBackInStockOptions, RequestsQueryBuilder } from './ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createBackInStockNotificationRequest(httpClient: HttpClient): CreateBackInStockNotificationRequestSignature;
interface CreateBackInStockNotificationRequestSignature {
    /**
     * Creates a back in stock notification request.
     *
     * If a notification request already exists for the same `catalogReference` and `email`,
     * then a new one isn't created and the existing request is returned.
     * @param - Notification request information.
     *
     * Includes details for the out of stock item and the email address
     * requesting to be notified when it's back in stock.
     * @param - Item details to include in the notification when the item is back in stock.
     * @returns Created back in stock notification request.
     */
    (request: BackInStockNotificationRequest, itemDetails: BackInStockItemDetails): Promise<BackInStockNotificationRequest & BackInStockNotificationRequestNonNullableFields>;
}
export declare function getBackInStockNotificationRequest(httpClient: HttpClient): GetBackInStockNotificationRequestSignature;
interface GetBackInStockNotificationRequestSignature {
    /**
     * Retrieves a back in stock notification request.
     * @param - ID of the notification request to retrieve.
     * @returns Retrieved back in stock notification request.
     */
    (_id: string): Promise<BackInStockNotificationRequest & BackInStockNotificationRequestNonNullableFields>;
}
export declare function deleteBackInStockNotificationRequest(httpClient: HttpClient): DeleteBackInStockNotificationRequestSignature;
interface DeleteBackInStockNotificationRequestSignature {
    /**
     * Deletes a back in stock notification request.
     * @param - ID of the notification request to delete.
     */
    (_id: string): Promise<void>;
}
export declare function markAsNotificationSent(httpClient: HttpClient): MarkAsNotificationSentSignature;
interface MarkAsNotificationSentSignature {
    /**
     * Sets `status` of a back in stock request to `NOTIFICATION_SENT`.
     *
     * Use this function if the notification is sent manually offline. If the notification is sent automatically or with the `reportItemsBackInStock()` function, then `status` updates on its own.
     * @param - ID of the notification request to mark.
     */
    (_id: string): Promise<MarkAsNotificationSentResponse & MarkAsNotificationSentResponseNonNullableFields>;
}
export declare function queryBackInStockNotificationRequests(httpClient: HttpClient): QueryBackInStockNotificationRequestsSignature;
interface QueryBackInStockNotificationRequestsSignature {
    /**
     * Creates a query to retrieve a list of back in stock notification requests.
     *
     * The `queryBackInStockNotificationRequests()` method builds a query to retrieve a list of back in stock notification requests and returns a `RequestsQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the `find()` method.
     *
     * You can refine the query by chaining `RequestsQueryBuilder` methods onto the query. `RequestsQueryBuilder` methods enable you to sort, filter, and control the results that `queryBackInStockNotificationRequests()` returns.
     *
     * The following `RequestsQueryBuilder` methods are supported for `queryBackInStockNotificationRequests()`. For a full description of the Requests object, see the object returned for the `items` property in `RequestsQueryResult`."
     */
    (): RequestsQueryBuilder;
}
export declare function getBackInStockNotificationRequestsCountByCatalogReferences(httpClient: HttpClient): GetBackInStockNotificationRequestsCountByCatalogReferencesSignature;
interface GetBackInStockNotificationRequestsCountByCatalogReferencesSignature {
    /**
     * Retrieves the amount of back in stock requests for a given `catalogReference` item.
     * @param - `catalogReference` items to retrieve the notification request for.
     */
    (catalogReferences: CatalogReference[]): Promise<GetBackInStockNotificationRequestsCountByCatalogReferencesResponse & GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields>;
}
export declare function reportItemsBackInStock(httpClient: HttpClient): ReportItemsBackInStockSignature;
interface ReportItemsBackInStockSignature {
    /**
     * Sends notifications for back in stock requests.
     *
     * > **Important:**
     * > Automations must be turned on in a [site's dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Go%20to%20Back-in-Stock&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https://www.wix.com/dashboard/{{metaSiteId}}/store/back-in-stock) for notifications to send.
     *
     * This endpoint triggers notifications for requests in 1 of 2 ways:
     * 1. For a specific item, with the `catalogReference` information.
     * 2. For specific requests, with `requestIds`.
     *
     * `itemDetails` are required and may populate dynamic values in the notification template, as follows:
     * + `itemDetails.name` passes to the template as `item.name`
     * + `itemDetails.price` passes to the template as `item.price`
     * + `itemDetails.image.url` passes to the template as `item.image.url`
     *
     * If the notification template doesn't include `item.price`, `item.name`, or `item.image.url`, values should
     * be passed in `extraAutomationTemplateParameters`.
     *
     * After this endpoint is called, the `status` for the request will update to `NOTIFICATION_SENT` if it sends
     * successfully, or to `FAILED` if it fails to send.
     * @param - Item details to use in notifications.
     *
     * `itemDetails` may populate dynamic valyes in the notification template, as follows:
     * + `itemDetails.name` passes to the template as `item.name`
     * + `itemDetails.price` passes to the template as `item.price`
     * + `itemDetails.image.url` passes to the template as `item.image.url`
     *
     * Use `extraAutomationTemplateParameters` to pass additional dynamic values.
     * @param - Report options.
     */
    (itemDetails: BackInStockItemDetails, options?: ReportItemsBackInStockOptions | undefined): Promise<void>;
}
export declare const onBackInStockNotificationRequestCreated: EventDefinition<BackInStockNotificationRequestCreatedEnvelope, "wix.ecom.v1.back_in_stock_notification_request_created">;
export declare const onBackInStockNotificationRequestUpdated: EventDefinition<BackInStockNotificationRequestUpdatedEnvelope, "wix.ecom.v1.back_in_stock_notification_request_updated">;
export declare const onBackInStockNotificationRequestDeleted: EventDefinition<BackInStockNotificationRequestDeletedEnvelope, "wix.ecom.v1.back_in_stock_notification_request_deleted">;
export { ActionEvent, App, BackInStockItemDetails, BackInStockNotificationRequest, BackInStockNotificationRequestCreatedEnvelope, BackInStockNotificationRequestDeletedEnvelope, BackInStockNotificationRequestNonNullableFields, BackInStockNotificationRequestUpdatedEnvelope, BackInStockNotificationRequestsCount, BaseEventMetadata, CatalogReference, CreateBackInStockNotificationRequestRequest, CreateBackInStockNotificationRequestResponse, CreateBackInStockNotificationRequestResponseNonNullableFields, CursorPaging, Cursors, DeleteBackInStockNotificationRequestRequest, DeleteBackInStockNotificationRequestResponse, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, File, GetBackInStockNotificationRequestRequest, GetBackInStockNotificationRequestResponse, GetBackInStockNotificationRequestResponseNonNullableFields, GetBackInStockNotificationRequestsCountByCatalogReferencesRequest, GetBackInStockNotificationRequestsCountByCatalogReferencesResponse, GetBackInStockNotificationRequestsCountByCatalogReferencesResponseNonNullableFields, IdentificationData, IdentificationDataIdOneOf, InvalidateCache, InvalidateCacheGetByOneOf, MarkAsNotificationSentRequest, MarkAsNotificationSentResponse, MarkAsNotificationSentResponseNonNullableFields, MessageEnvelope, Page, PlatformPaging, PlatformPagingMetadata, PlatformQuery, PlatformQueryPagingMethodOneOf, QueryBackInStockNotificationRequestsRequest, QueryBackInStockNotificationRequestsResponse, QueryBackInStockNotificationRequestsResponseNonNullableFields, ReportItemsBackInStockOptions, ReportItemsBackInStockRequest, ReportItemsBackInStockResponse, RequestsQueryBuilder, RequestsQueryResult, RestoreInfo, SortOrder, Sorting, Status, URI, WebhookIdentityType, } from './ecom-v1-back-in-stock-notification-request-back-in-stock-notifications.universal.js';
