import { RequestOptionsFactory } from '@wix/sdk-types';
/**
 * Creates a back in stock notification request.
 *
 * If a notification request already exists for the same `catalogReference` and `email`,
 * then a new one isn't created and the existing request is returned.
 */
export declare function createBackInStockNotificationRequest(payload: object): RequestOptionsFactory<any>;
/** Retrieves a back in stock notification request. */
export declare function getBackInStockNotificationRequest(payload: object): RequestOptionsFactory<any>;
/** Deletes a back in stock notification request. */
export declare function deleteBackInStockNotificationRequest(payload: object): RequestOptionsFactory<any>;
/**
 * Sets `status` of a back in stock request to `NOTIFICATION_SENT`.
 *
 * Use this function if the notification is sent manually offline. If the notification is sent automatically or with the `reportItemsBackInStock()` function, then `status` updates on its own.
 */
export declare function markAsNotificationSent(payload: object): RequestOptionsFactory<any>;
/**
 * Creates a query to retrieve a list of back in stock notification requests.
 *
 * The `queryBackInStockNotificationRequests()` method builds a query to retrieve a list of back in stock notification requests and returns a `RequestsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the `find()` method.
 *
 * You can refine the query by chaining `RequestsQueryBuilder` methods onto the query. `RequestsQueryBuilder` methods enable you to sort, filter, and control the results that `queryBackInStockNotificationRequests()` returns.
 *
 * The following `RequestsQueryBuilder` methods are supported for `queryBackInStockNotificationRequests()`. For a full description of the Requests object, see the object returned for the `items` property in `RequestsQueryResult`."
 */
export declare function queryBackInStockNotificationRequests(payload: object): RequestOptionsFactory<any>;
/** Retrieves the amount of back in stock requests for a given `catalogReference` item. */
export declare function getBackInStockNotificationRequestsCountByCatalogReferences(payload: object): RequestOptionsFactory<any>;
/**
 * Sends notifications for back in stock requests.
 *
 * > **Important:**
 * > Automations must be turned on in a [site's dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Go%20to%20Back-in-Stock&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https://www.wix.com/dashboard/{{metaSiteId}}/store/back-in-stock) for notifications to send.
 *
 * This endpoint triggers notifications for requests in 1 of 2 ways:
 * 1. For a specific item, with the `catalogReference` information.
 * 2. For specific requests, with `requestIds`.
 *
 * `itemDetails` are required and may populate dynamic values in the notification template, as follows:
 * + `itemDetails.name` passes to the template as `item.name`
 * + `itemDetails.price` passes to the template as `item.price`
 * + `itemDetails.image.url` passes to the template as `item.image.url`
 *
 * If the notification template doesn't include `item.price`, `item.name`, or `item.image.url`, values should
 * be passed in `extraAutomationTemplateParameters`.
 *
 * After this endpoint is called, the `status` for the request will update to `NOTIFICATION_SENT` if it sends
 * successfully, or to `FAILED` if it fails to send.
 */
export declare function reportItemsBackInStock(payload: object): RequestOptionsFactory<any>;
