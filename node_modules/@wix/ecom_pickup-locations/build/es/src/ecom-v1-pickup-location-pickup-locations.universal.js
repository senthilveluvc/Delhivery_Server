import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1PickupLocation from './ecom-v1-pickup-location-pickup-locations.http.js';
// @ts-ignore
import { transformSDKAddressToRESTAddress } from '@wix/sdk-runtime/transformations/address';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var ConditionType;
(function (ConditionType) {
    ConditionType["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
    ConditionType["BY_TOTAL_WEIGHT"] = "BY_TOTAL_WEIGHT";
    ConditionType["BY_TOTAL_PRICE"] = "BY_TOTAL_PRICE";
    ConditionType["BY_TOTAL_QUANTITY"] = "BY_TOTAL_QUANTITY";
})(ConditionType || (ConditionType = {}));
export var LogicalOperator;
(function (LogicalOperator) {
    LogicalOperator["UNKNOWN_LOGICAL_OPERATOR_TYPE"] = "UNKNOWN_LOGICAL_OPERATOR_TYPE";
    LogicalOperator["EQ"] = "EQ";
    LogicalOperator["GT"] = "GT";
    LogicalOperator["GTE"] = "GTE";
    LogicalOperator["LT"] = "LT";
    LogicalOperator["LTE"] = "LTE";
})(LogicalOperator || (LogicalOperator = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a new PickupLocation
 * @param pickupLocation - PickupLocation to be created
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocation
 * @requiredField pickupLocation.address
 * @permissionId ECOM.PICKUP_LOCATION_CREATE
 * @returns The created PickupLocation
 * @fqn wix.ecom.v1.PickupLocations.CreatePickupLocation
 */
export async function createPickupLocation(pickupLocation) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({ pickupLocation: pickupLocation }), [
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [{ path: 'pickupLocation.address' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1PickupLocation.createPickupLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'pickupLocation.address' }],
            },
        ]))?.pickupLocation;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { pickupLocation: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['pickupLocation']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Get a PickupLocation by id
 * @param pickupLocationId - Id of the PickupLocation to retrieve
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_READ
 * @returns The retrieved PickupLocation
 * @fqn wix.ecom.v1.PickupLocations.GetPickupLocation
 */
export async function getPickupLocation(pickupLocationId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        pickupLocationId: pickupLocationId,
    });
    const reqOpts = ambassadorWixEcomV1PickupLocation.getPickupLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'pickupLocation.address' }],
            },
        ]))?.pickupLocation;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { pickupLocationId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['pickupLocationId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Update a PickupLocation
 * Delivery regions cannot be updated using this method, use AddDeliveryRegion and RemoveDeliveryRegion instead.
 * @param _id - PickupLocation ID
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField pickupLocation
 * @requiredField pickupLocation.revision
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @returns The updated PickupLocation
 * @fqn wix.ecom.v1.PickupLocations.UpdatePickupLocation
 */
export async function updatePickupLocation(_id, pickupLocation) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        pickupLocation: { ...pickupLocation, id: _id },
    }), [
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [{ path: 'pickupLocation.address' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1PickupLocation.updatePickupLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'pickupLocation.address' }],
            },
        ]))?.pickupLocation;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { pickupLocation: '$[1]' },
            explicitPathsToArguments: { 'pickupLocation.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'pickupLocation']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Delete a PickupLocation
 * @param pickupLocationId - Id of the PickupLocation to delete
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_DELETE
 * @fqn wix.ecom.v1.PickupLocations.DeletePickupLocation
 */
export async function deletePickupLocation(pickupLocationId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        pickupLocationId: pickupLocationId,
    });
    const reqOpts = ambassadorWixEcomV1PickupLocation.deletePickupLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { pickupLocationId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['pickupLocationId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Query PickupLocations using [WQL - Wix Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language)
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.PICKUP_LOCATION_READ
 * @fqn wix.ecom.v1.PickupLocations.QueryPickupLocation
 */
export function queryPickupLocation() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixEcomV1PickupLocation.queryPickupLocation(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(transformPaths(data, [
                {
                    transformFn: transformRESTAddressToSDKAddress,
                    paths: [{ path: 'pickupLocations.address' }],
                },
            ]));
            return {
                items: transformedData?.pickupLocations,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Add a DeliveryRegion to a PickupLocation
 * @param pickupLocationId - Id of the PickupLocation to add to the delivery region
 * @param deliveryRegionId - Id of the DeliveryRegion to add the PickupLocation to
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryRegionId
 * @requiredField options
 * @requiredField options.revision
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @fqn wix.ecom.v1.PickupLocations.AddDeliveryRegion
 */
export async function addDeliveryRegion(pickupLocationId, deliveryRegionId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        pickupLocationId: pickupLocationId,
        deliveryRegionId: deliveryRegionId,
        revision: options?.revision,
    });
    const reqOpts = ambassadorWixEcomV1PickupLocation.addDeliveryRegion(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'pickupLocation.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                pickupLocationId: '$[0]',
                deliveryRegionId: '$[1]',
                revision: '$[2].revision',
            },
            singleArgumentUnchanged: false,
        }, ['pickupLocationId', 'deliveryRegionId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Remove a DeliveryRegion from a PickupLocation
 * @param pickupLocationId - Id of the PickupLocation to add to the delivery region
 * @param deliveryRegionId - Id of the DeliveryRegion to add the PickupLocation to
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryRegionId
 * @requiredField options
 * @requiredField options.revision
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @fqn wix.ecom.v1.PickupLocations.RemoveDeliveryRegion
 */
export async function removeDeliveryRegion(pickupLocationId, deliveryRegionId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        pickupLocationId: pickupLocationId,
        deliveryRegionId: deliveryRegionId,
        revision: options?.revision,
    });
    const reqOpts = ambassadorWixEcomV1PickupLocation.removeDeliveryRegion(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'pickupLocation.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                pickupLocationId: '$[0]',
                deliveryRegionId: '$[1]',
                revision: '$[2].revision',
            },
            singleArgumentUnchanged: false,
        }, ['pickupLocationId', 'deliveryRegionId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Bulk Create for new PickupLocation
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocations
 * @requiredField pickupLocations.address
 * @permissionId ECOM.PICKUP_LOCATION_CREATE
 * @fqn wix.ecom.v1.PickupLocations.BulkCreatePickupLocation
 */
export async function bulkCreatePickupLocation(pickupLocations) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({ pickupLocations: pickupLocations }), [
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [{ path: 'pickupLocations.address' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1PickupLocation.bulkCreatePickupLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'pickupLocations.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { pickupLocations: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['pickupLocations']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Update a PickupLocation
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocations
 * @requiredField pickupLocations._id
 * @requiredField pickupLocations.revision
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @fqn wix.ecom.v1.PickupLocations.BulkUpdatePickupLocation
 */
export async function bulkUpdatePickupLocation(pickupLocations) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({ pickupLocations: pickupLocations }), [
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [{ path: 'pickupLocations.address' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1PickupLocation.bulkUpdatePickupLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'pickupLocations.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { pickupLocations: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['pickupLocations']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Delete a PickupLocation
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocationIds
 * @permissionId ECOM.PICKUP_LOCATION_DELETE
 * @fqn wix.ecom.v1.PickupLocations.BulkDeletePickupLocation
 */
export async function bulkDeletePickupLocation(pickupLocationIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        pickupLocationIds: pickupLocationIds,
    });
    const reqOpts = ambassadorWixEcomV1PickupLocation.bulkDeletePickupLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { pickupLocationIds: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['pickupLocationIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-pickup-location-pickup-locations.universal.js.map