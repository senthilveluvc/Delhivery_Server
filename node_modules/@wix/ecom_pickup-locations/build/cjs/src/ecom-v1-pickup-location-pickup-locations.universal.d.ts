/** PickupLocation is the main entity of PickupLocations that can be used for lorem ipsum dolor */
export interface PickupLocation {
    /**
     * PickupLocation ID
     * @readonly
     */
    _id?: string | null;
    /**
     * Represents the current state of an item. Each time the item is modified, its `revision` changes. for an update operation to succeed, you MUST pass the latest revision
     * @readonly
     */
    revision?: string | null;
    /**
     * Represents the time this PickupLocation was created
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Represents the time this PickupLocation was last updated
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Pickup Location Name */
    name?: string | null;
    /** Pickup Location Address */
    address?: Address;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /** inactive pickup locations should not be shown in checkout */
    active?: boolean | null;
    /** at runtime for a given pickup input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates[];
    /** This pickup location is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
/** Physical address */
export interface Address extends AddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    addressLine1?: string | null;
    /** Country code. */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    addressLine2?: string | null;
}
/** @oneof */
export interface AddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    addressLine?: string | null;
}
export interface StreetAddress {
    number?: string;
    name?: string;
}
export interface ConditionalRates {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition[];
    amount?: string;
}
export interface Condition {
    type?: ConditionType;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator;
}
export declare enum ConditionType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
export declare enum LogicalOperator {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
export interface DiffmatokyPayload {
    left?: string;
    right?: string;
    compareChannel?: string;
    entityId?: string;
    errorInformation?: ErrorInformation;
    tags?: string[];
}
export interface ErrorInformation {
    stackTrace?: string;
}
export interface CreatePickupLocationRequest {
    /** PickupLocation to be created */
    pickupLocation: PickupLocation;
}
export interface CreatePickupLocationResponse {
    /** The created PickupLocation */
    pickupLocation?: PickupLocation;
}
export interface GetPickupLocationRequest {
    /** Id of the PickupLocation to retrieve */
    pickupLocationId: string;
}
export interface GetPickupLocationResponse {
    /** The retrieved PickupLocation */
    pickupLocation?: PickupLocation;
}
export interface UpdatePickupLocationRequest {
    /** PickupLocation to be updated, may be partial */
    pickupLocation: PickupLocation;
}
export interface UpdatePickupLocationResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
export interface DeletePickupLocationRequest {
    /** Id of the PickupLocation to delete */
    pickupLocationId: string;
}
export interface DeletePickupLocationResponse {
}
export interface QueryPickupLocationRequest {
    /** WQL expression */
    query: QueryV2;
}
export interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
export interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface QueryPickupLocationResponse {
    /** The retrieved PickupLocations */
    pickupLocations?: PickupLocation[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata;
}
export interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
export interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
export interface AddDeliveryRegionRequest {
    /** Id of the PickupLocation to add to the delivery region */
    pickupLocationId: string;
    /** Id of the DeliveryRegion to add the PickupLocation to */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
export interface AddDeliveryRegionResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
export interface RemoveDeliveryRegionRequest {
    /** Id of the PickupLocation to add to the delivery region */
    pickupLocationId: string;
    /** Id of the DeliveryRegion to add the PickupLocation to */
    deliveryRegionId: string;
    /** Revision of the PickupLocation */
    revision: string | null;
}
export interface RemoveDeliveryRegionResponse {
    /** The updated PickupLocation */
    pickupLocation?: PickupLocation;
}
export interface BulkCreatePickupLocationRequest {
    pickupLocations: PickupLocation[];
}
export interface BulkCreatePickupLocationResponse {
    pickupLocations?: PickupLocation[];
    errors?: PickupLocationError[];
}
export interface PickupLocationError {
    _id?: string;
    error?: ApplicationError;
}
export interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
export interface BulkUpdatePickupLocationRequest {
    pickupLocations: PickupLocation[];
}
export interface BulkUpdatePickupLocationResponse {
    pickupLocations?: PickupLocation[];
    errors?: PickupLocationError[];
}
export interface BulkDeletePickupLocationRequest {
    pickupLocationIds: string[];
}
export interface BulkDeletePickupLocationResponse {
    errors?: PickupLocationError[];
}
export interface Empty {
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entity?: string;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
export interface ActionEvent {
    body?: string;
}
export interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface StreetAddressNonNullableFields {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields;
}
interface ConditionNonNullableFields {
    type: ConditionType;
    value: string;
    operator: LogicalOperator;
}
interface ConditionalRatesNonNullableFields {
    conditions: ConditionNonNullableFields[];
    amount: string;
}
export interface PickupLocationNonNullableFields {
    address?: AddressNonNullableFields;
    rates: ConditionalRatesNonNullableFields[];
    deliveryRegionIds: string[];
}
export interface CreatePickupLocationResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
export interface GetPickupLocationResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
export interface UpdatePickupLocationResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
export interface QueryPickupLocationResponseNonNullableFields {
    pickupLocations: PickupLocationNonNullableFields[];
}
export interface AddDeliveryRegionResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
export interface RemoveDeliveryRegionResponseNonNullableFields {
    pickupLocation?: PickupLocationNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface PickupLocationErrorNonNullableFields {
    _id: string;
    error?: ApplicationErrorNonNullableFields;
}
export interface BulkCreatePickupLocationResponseNonNullableFields {
    pickupLocations: PickupLocationNonNullableFields[];
    errors: PickupLocationErrorNonNullableFields[];
}
export interface BulkUpdatePickupLocationResponseNonNullableFields {
    pickupLocations: PickupLocationNonNullableFields[];
    errors: PickupLocationErrorNonNullableFields[];
}
export interface BulkDeletePickupLocationResponseNonNullableFields {
    errors: PickupLocationErrorNonNullableFields[];
}
/**
 * Creates a new PickupLocation
 * @param pickupLocation - PickupLocation to be created
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocation
 * @requiredField pickupLocation.address
 * @permissionId ECOM.PICKUP_LOCATION_CREATE
 * @returns The created PickupLocation
 * @fqn wix.ecom.v1.PickupLocations.CreatePickupLocation
 */
export declare function createPickupLocation(pickupLocation: PickupLocation): Promise<PickupLocation & PickupLocationNonNullableFields>;
/**
 * Get a PickupLocation by id
 * @param pickupLocationId - Id of the PickupLocation to retrieve
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_READ
 * @returns The retrieved PickupLocation
 * @fqn wix.ecom.v1.PickupLocations.GetPickupLocation
 */
export declare function getPickupLocation(pickupLocationId: string): Promise<PickupLocation & PickupLocationNonNullableFields>;
/**
 * Update a PickupLocation
 * Delivery regions cannot be updated using this method, use AddDeliveryRegion and RemoveDeliveryRegion instead.
 * @param _id - PickupLocation ID
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField pickupLocation
 * @requiredField pickupLocation.revision
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @returns The updated PickupLocation
 * @fqn wix.ecom.v1.PickupLocations.UpdatePickupLocation
 */
export declare function updatePickupLocation(_id: string | null, pickupLocation: UpdatePickupLocation): Promise<PickupLocation & PickupLocationNonNullableFields>;
export interface UpdatePickupLocation {
    /**
     * PickupLocation ID
     * @readonly
     */
    _id?: string | null;
    /**
     * Represents the current state of an item. Each time the item is modified, its `revision` changes. for an update operation to succeed, you MUST pass the latest revision
     * @readonly
     */
    revision?: string | null;
    /**
     * Represents the time this PickupLocation was created
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Represents the time this PickupLocation was last updated
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Pickup Location Name */
    name?: string | null;
    /** Pickup Location Address */
    address?: Address;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /** inactive pickup locations should not be shown in checkout */
    active?: boolean | null;
    /** at runtime for a given pickup input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates[];
    /** This pickup location is active for the following delivery regions. */
    deliveryRegionIds?: string[];
}
/**
 * Delete a PickupLocation
 * @param pickupLocationId - Id of the PickupLocation to delete
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_DELETE
 * @fqn wix.ecom.v1.PickupLocations.DeletePickupLocation
 */
export declare function deletePickupLocation(pickupLocationId: string): Promise<void>;
/**
 * Query PickupLocations using [WQL - Wix Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language)
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.PICKUP_LOCATION_READ
 * @fqn wix.ecom.v1.PickupLocations.QueryPickupLocation
 */
export declare function queryPickupLocation(): PickupLocationsQueryBuilder;
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
export interface PickupLocationsQueryResult extends QueryCursorResult {
    items: PickupLocation[];
    query: PickupLocationsQueryBuilder;
    next: () => Promise<PickupLocationsQueryResult>;
    prev: () => Promise<PickupLocationsQueryResult>;
}
export interface PickupLocationsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ge: (propertyName: '_createdDate' | '_updatedDate', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    gt: (propertyName: '_createdDate' | '_updatedDate', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    le: (propertyName: '_createdDate' | '_updatedDate', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    lt: (propertyName: '_createdDate' | '_updatedDate', value: any) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: 'name' | 'address.country' | 'address.subdivision' | 'address.city', value: string) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: any[]) => PickupLocationsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasAll: (propertyName: 'deliveryRegionIds', value: any[]) => PickupLocationsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: any) => PickupLocationsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_createdDate' | '_updatedDate' | 'name' | 'address.country' | 'address.subdivision' | 'address.city' | 'deliveryRegionIds', value: boolean) => PickupLocationsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => PickupLocationsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => PickupLocationsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<PickupLocationsQueryResult>;
}
/**
 * Add a DeliveryRegion to a PickupLocation
 * @param pickupLocationId - Id of the PickupLocation to add to the delivery region
 * @param deliveryRegionId - Id of the DeliveryRegion to add the PickupLocation to
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryRegionId
 * @requiredField options
 * @requiredField options.revision
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @fqn wix.ecom.v1.PickupLocations.AddDeliveryRegion
 */
export declare function addDeliveryRegion(pickupLocationId: string, deliveryRegionId: string, options: AddDeliveryRegionOptions): Promise<AddDeliveryRegionResponse & AddDeliveryRegionResponseNonNullableFields>;
export interface AddDeliveryRegionOptions {
    /** Revision of the PickupLocation */
    revision: string | null;
}
/**
 * Remove a DeliveryRegion from a PickupLocation
 * @param pickupLocationId - Id of the PickupLocation to add to the delivery region
 * @param deliveryRegionId - Id of the DeliveryRegion to add the PickupLocation to
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryRegionId
 * @requiredField options
 * @requiredField options.revision
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @fqn wix.ecom.v1.PickupLocations.RemoveDeliveryRegion
 */
export declare function removeDeliveryRegion(pickupLocationId: string, deliveryRegionId: string, options: RemoveDeliveryRegionOptions): Promise<RemoveDeliveryRegionResponse & RemoveDeliveryRegionResponseNonNullableFields>;
export interface RemoveDeliveryRegionOptions {
    /** Revision of the PickupLocation */
    revision: string | null;
}
/**
 * Bulk Create for new PickupLocation
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocations
 * @requiredField pickupLocations.address
 * @permissionId ECOM.PICKUP_LOCATION_CREATE
 * @fqn wix.ecom.v1.PickupLocations.BulkCreatePickupLocation
 */
export declare function bulkCreatePickupLocation(pickupLocations: PickupLocation[]): Promise<BulkCreatePickupLocationResponse & BulkCreatePickupLocationResponseNonNullableFields>;
/**
 * Update a PickupLocation
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocations
 * @requiredField pickupLocations._id
 * @requiredField pickupLocations.revision
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @fqn wix.ecom.v1.PickupLocations.BulkUpdatePickupLocation
 */
export declare function bulkUpdatePickupLocation(pickupLocations: PickupLocation[]): Promise<BulkUpdatePickupLocationResponse & BulkUpdatePickupLocationResponseNonNullableFields>;
/**
 * Delete a PickupLocation
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocationIds
 * @permissionId ECOM.PICKUP_LOCATION_DELETE
 * @fqn wix.ecom.v1.PickupLocations.BulkDeletePickupLocation
 */
export declare function bulkDeletePickupLocation(pickupLocationIds: string[]): Promise<BulkDeletePickupLocationResponse & BulkDeletePickupLocationResponseNonNullableFields>;
export {};
