"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bulkDeletePickupLocation = exports.bulkUpdatePickupLocation = exports.bulkCreatePickupLocation = exports.removeDeliveryRegion = exports.addDeliveryRegion = exports.queryPickupLocation = exports.deletePickupLocation = exports.updatePickupLocation = exports.getPickupLocation = exports.createPickupLocation = exports.WebhookIdentityType = exports.SortOrder = exports.LogicalOperator = exports.ConditionType = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixEcomV1PickupLocation = __importStar(require("./ecom-v1-pickup-location-pickup-locations.http.js"));
// @ts-ignore
const address_1 = require("@wix/sdk-runtime/transformations/address");
const address_2 = require("@wix/sdk-runtime/transformations/address");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
var ConditionType;
(function (ConditionType) {
    ConditionType["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
    ConditionType["BY_TOTAL_WEIGHT"] = "BY_TOTAL_WEIGHT";
    ConditionType["BY_TOTAL_PRICE"] = "BY_TOTAL_PRICE";
    ConditionType["BY_TOTAL_QUANTITY"] = "BY_TOTAL_QUANTITY";
})(ConditionType || (exports.ConditionType = ConditionType = {}));
var LogicalOperator;
(function (LogicalOperator) {
    LogicalOperator["UNKNOWN_LOGICAL_OPERATOR_TYPE"] = "UNKNOWN_LOGICAL_OPERATOR_TYPE";
    LogicalOperator["EQ"] = "EQ";
    LogicalOperator["GT"] = "GT";
    LogicalOperator["GTE"] = "GTE";
    LogicalOperator["LT"] = "LT";
    LogicalOperator["LTE"] = "LTE";
})(LogicalOperator || (exports.LogicalOperator = LogicalOperator = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Creates a new PickupLocation
 * @param pickupLocation - PickupLocation to be created
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocation
 * @requiredField pickupLocation.address
 * @permissionId ECOM.PICKUP_LOCATION_CREATE
 * @returns The created PickupLocation
 * @fqn wix.ecom.v1.PickupLocations.CreatePickupLocation
 */
async function createPickupLocation(pickupLocation) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ pickupLocation: pickupLocation }), [
        {
            transformFn: address_1.transformSDKAddressToRESTAddress,
            paths: [{ path: 'pickupLocation.address' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1PickupLocation.createPickupLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'pickupLocation.address' }],
            },
        ]))?.pickupLocation;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { pickupLocation: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['pickupLocation']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createPickupLocation = createPickupLocation;
/**
 * Get a PickupLocation by id
 * @param pickupLocationId - Id of the PickupLocation to retrieve
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_READ
 * @returns The retrieved PickupLocation
 * @fqn wix.ecom.v1.PickupLocations.GetPickupLocation
 */
async function getPickupLocation(pickupLocationId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        pickupLocationId: pickupLocationId,
    });
    const reqOpts = ambassadorWixEcomV1PickupLocation.getPickupLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'pickupLocation.address' }],
            },
        ]))?.pickupLocation;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { pickupLocationId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['pickupLocationId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getPickupLocation = getPickupLocation;
/**
 * Update a PickupLocation
 * Delivery regions cannot be updated using this method, use AddDeliveryRegion and RemoveDeliveryRegion instead.
 * @param _id - PickupLocation ID
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField pickupLocation
 * @requiredField pickupLocation.revision
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @returns The updated PickupLocation
 * @fqn wix.ecom.v1.PickupLocations.UpdatePickupLocation
 */
async function updatePickupLocation(_id, pickupLocation) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        pickupLocation: { ...pickupLocation, id: _id },
    }), [
        {
            transformFn: address_1.transformSDKAddressToRESTAddress,
            paths: [{ path: 'pickupLocation.address' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1PickupLocation.updatePickupLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'pickupLocation.address' }],
            },
        ]))?.pickupLocation;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: { pickupLocation: '$[1]' },
            explicitPathsToArguments: { 'pickupLocation.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'pickupLocation']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updatePickupLocation = updatePickupLocation;
/**
 * Delete a PickupLocation
 * @param pickupLocationId - Id of the PickupLocation to delete
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_DELETE
 * @fqn wix.ecom.v1.PickupLocations.DeletePickupLocation
 */
async function deletePickupLocation(pickupLocationId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        pickupLocationId: pickupLocationId,
    });
    const reqOpts = ambassadorWixEcomV1PickupLocation.deletePickupLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { pickupLocationId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['pickupLocationId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deletePickupLocation = deletePickupLocation;
/**
 * Query PickupLocations using [WQL - Wix Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language)
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.PICKUP_LOCATION_READ
 * @fqn wix.ecom.v1.PickupLocations.QueryPickupLocation
 */
function queryPickupLocation() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixEcomV1PickupLocation.queryPickupLocation(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(data, [
                {
                    transformFn: address_2.transformRESTAddressToSDKAddress,
                    paths: [{ path: 'pickupLocations.address' }],
                },
            ]));
            return {
                items: transformedData?.pickupLocations,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
exports.queryPickupLocation = queryPickupLocation;
/**
 * Add a DeliveryRegion to a PickupLocation
 * @param pickupLocationId - Id of the PickupLocation to add to the delivery region
 * @param deliveryRegionId - Id of the DeliveryRegion to add the PickupLocation to
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryRegionId
 * @requiredField options
 * @requiredField options.revision
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @fqn wix.ecom.v1.PickupLocations.AddDeliveryRegion
 */
async function addDeliveryRegion(pickupLocationId, deliveryRegionId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        pickupLocationId: pickupLocationId,
        deliveryRegionId: deliveryRegionId,
        revision: options?.revision,
    });
    const reqOpts = ambassadorWixEcomV1PickupLocation.addDeliveryRegion(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'pickupLocation.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                pickupLocationId: '$[0]',
                deliveryRegionId: '$[1]',
                revision: '$[2].revision',
            },
            singleArgumentUnchanged: false,
        }, ['pickupLocationId', 'deliveryRegionId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.addDeliveryRegion = addDeliveryRegion;
/**
 * Remove a DeliveryRegion from a PickupLocation
 * @param pickupLocationId - Id of the PickupLocation to add to the delivery region
 * @param deliveryRegionId - Id of the DeliveryRegion to add the PickupLocation to
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryRegionId
 * @requiredField options
 * @requiredField options.revision
 * @requiredField pickupLocationId
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @fqn wix.ecom.v1.PickupLocations.RemoveDeliveryRegion
 */
async function removeDeliveryRegion(pickupLocationId, deliveryRegionId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        pickupLocationId: pickupLocationId,
        deliveryRegionId: deliveryRegionId,
        revision: options?.revision,
    });
    const reqOpts = ambassadorWixEcomV1PickupLocation.removeDeliveryRegion(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'pickupLocation.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                pickupLocationId: '$[0]',
                deliveryRegionId: '$[1]',
                revision: '$[2].revision',
            },
            singleArgumentUnchanged: false,
        }, ['pickupLocationId', 'deliveryRegionId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.removeDeliveryRegion = removeDeliveryRegion;
/**
 * Bulk Create for new PickupLocation
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocations
 * @requiredField pickupLocations.address
 * @permissionId ECOM.PICKUP_LOCATION_CREATE
 * @fqn wix.ecom.v1.PickupLocations.BulkCreatePickupLocation
 */
async function bulkCreatePickupLocation(pickupLocations) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ pickupLocations: pickupLocations }), [
        {
            transformFn: address_1.transformSDKAddressToRESTAddress,
            paths: [{ path: 'pickupLocations.address' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1PickupLocation.bulkCreatePickupLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'pickupLocations.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { pickupLocations: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['pickupLocations']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkCreatePickupLocation = bulkCreatePickupLocation;
/**
 * Update a PickupLocation
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocations
 * @requiredField pickupLocations._id
 * @requiredField pickupLocations.revision
 * @permissionId ECOM.PICKUP_LOCATION_UPDATE
 * @fqn wix.ecom.v1.PickupLocations.BulkUpdatePickupLocation
 */
async function bulkUpdatePickupLocation(pickupLocations) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ pickupLocations: pickupLocations }), [
        {
            transformFn: address_1.transformSDKAddressToRESTAddress,
            paths: [{ path: 'pickupLocations.address' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1PickupLocation.bulkUpdatePickupLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'pickupLocations.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { pickupLocations: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['pickupLocations']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkUpdatePickupLocation = bulkUpdatePickupLocation;
/**
 * Delete a PickupLocation
 * @public
 * @documentationMaturity preview
 * @requiredField pickupLocationIds
 * @permissionId ECOM.PICKUP_LOCATION_DELETE
 * @fqn wix.ecom.v1.PickupLocations.BulkDeletePickupLocation
 */
async function bulkDeletePickupLocation(pickupLocationIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        pickupLocationIds: pickupLocationIds,
    });
    const reqOpts = ambassadorWixEcomV1PickupLocation.bulkDeletePickupLocation(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { pickupLocationIds: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['pickupLocationIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.bulkDeletePickupLocation = bulkDeletePickupLocation;
//# sourceMappingURL=ecom-v1-pickup-location-pickup-locations.universal.js.map