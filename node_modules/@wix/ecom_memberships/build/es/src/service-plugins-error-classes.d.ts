import { MembershipInvalidSelectionErrors, MembershipCannotBeChargedError, MembershipAlreadyChargedError } from './service-plugins-types.js';
/**
 * The provided membership selection is invalid
 */
export declare class InvalidSelectionWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: MembershipInvalidSelectionErrors;
    constructor(data?: MembershipInvalidSelectionErrors);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * The membership was found, but does not apply for the provided item
 */
export declare class MembershipDoesNotApplyToItemWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * The membership was found, applied to the provided item but cannot be charged. For example because a limited membership doesn't have enough credits
 */
export declare class MembershipCannotBeUsedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: MembershipCannotBeChargedError;
    constructor(data?: MembershipCannotBeChargedError);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * This charge was already done, per the idempotency key of membershipId + orderId + rootCatalogItemId
 */
export declare class MembershipAlreadyChargedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorSchemaName: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    data: MembershipAlreadyChargedError;
    constructor(data?: MembershipAlreadyChargedError);
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Transaction not found
 */
export declare class TransactionNotFoundWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Transaction exists but cannot be voided
 */
export declare class TransactionCannotBeVoidedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
/**
 * Transaction was already voided
 */
export declare class TransactionAlreadyVoidedWixError extends Error {
    /** @hidden */
    httpCode: number;
    /** @hidden */
    statusCode: string;
    /** @hidden */
    applicationCode: string;
    /** @hidden */
    name: string;
    /** @hidden */
    errorType: string;
    /** @hidden */
    spiErrorData: object;
    constructor();
    /** @hidden */
    static readonly __type = "wix_spi_error";
}
