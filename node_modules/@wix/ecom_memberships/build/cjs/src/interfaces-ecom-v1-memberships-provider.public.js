"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.provideHandlers = void 0;
const sdk_types_1 = require("@wix/sdk-types");
const timestamp_1 = require("@wix/sdk-runtime/transformations/timestamp");
const timestamp_2 = require("@wix/sdk-runtime/transformations/timestamp");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
exports.provideHandlers = (0, sdk_types_1.ServicePluginDefinition)('ECOM_MEMBERSHIPS', [
    {
        name: 'listEligibleMemberships',
        primaryHttpMappingPath: '/v1/list-eligible-memberships',
        transformations: {
            toREST: (payload) => {
                const toRestResponse = (0, transform_paths_1.transformPaths)(payload, [
                    {
                        transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                        paths: [
                            { path: 'eligibleMemberships.expirationDate' },
                            { path: 'invalidMemberships.membership.expirationDate' },
                        ],
                    },
                ]);
                return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)(toRestResponse);
            },
            fromREST: (payload) => {
                const fromRestRequest = (0, transform_paths_1.transformPaths)(payload, [
                    {
                        transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                        paths: [
                            { path: 'request.lineItems.serviceProperties.scheduledDate' },
                        ],
                    },
                ]);
                return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(fromRestRequest);
            },
        },
    },
    {
        name: 'chargeMembership',
        primaryHttpMappingPath: '/v1/charge-membership',
        transformations: {
            toREST: (payload) => {
                const toRestResponse = payload;
                return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)(toRestResponse);
            },
            fromREST: (payload) => {
                const fromRestRequest = (0, transform_paths_1.transformPaths)(payload, [
                    {
                        transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                        paths: [{ path: 'request.serviceProperties.scheduledDate' }],
                    },
                ]);
                return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(fromRestRequest);
            },
        },
    },
    {
        name: 'getMembershipVoidability',
        primaryHttpMappingPath: '/v1/get-voidability',
        transformations: {
            toREST: (payload) => {
                const toRestResponse = payload;
                return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)(toRestResponse);
            },
            fromREST: (payload) => {
                const fromRestRequest = payload;
                return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(fromRestRequest);
            },
        },
    },
    {
        name: 'voidMembershipCharge',
        primaryHttpMappingPath: '/v1/void-membership-charge',
        transformations: {
            toREST: (payload) => {
                const toRestResponse = payload;
                return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)(toRestResponse);
            },
            fromREST: (payload) => {
                const fromRestRequest = payload;
                return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(fromRestRequest);
            },
        },
    },
]);
//# sourceMappingURL=interfaces-ecom-v1-memberships-provider.public.js.map