"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionAlreadyVoidedWixError = exports.TransactionCannotBeVoidedWixError = exports.TransactionNotFoundWixError = exports.MembershipAlreadyChargedWixError = exports.MembershipCannotBeUsedWixError = exports.MembershipDoesNotApplyToItemWixError = exports.InvalidSelectionWixError = void 0;
/**
 * The provided membership selection is invalid
 */
class InvalidSelectionWixError extends Error {
    constructor(data = {}) {
        super('InvalidSelection');
        this.httpCode = 400;
        this.statusCode = 'INVALID_ARGUMENT';
        this.applicationCode = 'INVALID_SELECTION';
        this.name = 'InvalidSelection';
        this.errorSchemaName =
            'com.wix.ecom.memberships_spi.v1.MembershipInvalidSelectionErrors';
        this.errorType = 'SPI';
        this.spiErrorData = {
            name: 'InvalidSelection',
            applicationCode: 'INVALID_SELECTION',
        };
        this.data = data;
    }
}
exports.InvalidSelectionWixError = InvalidSelectionWixError;
/** @hidden */
InvalidSelectionWixError.__type = 'wix_spi_error';
/**
 * The membership was found, but does not apply for the provided item
 */
class MembershipDoesNotApplyToItemWixError extends Error {
    constructor() {
        super('MembershipDoesNotApplyToItem');
        this.httpCode = 400;
        this.statusCode = 'INVALID_ARGUMENT';
        this.applicationCode = 'MEMBERSHIP_DOES_NOT_APPLY_TO_ITEM';
        this.name = 'MembershipDoesNotApplyToItem';
        this.errorType = 'SPI';
        this.spiErrorData = {
            name: 'MembershipDoesNotApplyToItem',
            applicationCode: 'MEMBERSHIP_DOES_NOT_APPLY_TO_ITEM',
        };
    }
}
exports.MembershipDoesNotApplyToItemWixError = MembershipDoesNotApplyToItemWixError;
/** @hidden */
MembershipDoesNotApplyToItemWixError.__type = 'wix_spi_error';
/**
 * The membership was found, applied to the provided item but cannot be charged. For example because a limited membership doesn't have enough credits
 */
class MembershipCannotBeUsedWixError extends Error {
    constructor(data = {}) {
        super('MembershipCannotBeUsed');
        this.httpCode = 428;
        this.statusCode = 'FAILED_PRECONDITION';
        this.applicationCode = 'MEMBERSHIP_CANNOT_BE_CHARGED';
        this.name = 'MembershipCannotBeUsed';
        this.errorSchemaName =
            'com.wix.ecom.memberships_spi.v1.MembershipCannotBeChargedError';
        this.errorType = 'SPI';
        this.spiErrorData = {
            name: 'MembershipCannotBeUsed',
            applicationCode: 'MEMBERSHIP_CANNOT_BE_CHARGED',
        };
        this.data = data;
    }
}
exports.MembershipCannotBeUsedWixError = MembershipCannotBeUsedWixError;
/** @hidden */
MembershipCannotBeUsedWixError.__type = 'wix_spi_error';
/**
 * This charge was already done, per the idempotency key of membershipId + orderId + rootCatalogItemId
 */
class MembershipAlreadyChargedWixError extends Error {
    constructor(data = {}) {
        super('MembershipAlreadyCharged');
        this.httpCode = 409;
        this.statusCode = 'ALREADY_EXISTS';
        this.applicationCode = 'MEMBERSHIP_ALREADY_CHARGED';
        this.name = 'MembershipAlreadyCharged';
        this.errorSchemaName =
            'com.wix.ecom.memberships_spi.v1.MembershipAlreadyChargedError';
        this.errorType = 'SPI';
        this.spiErrorData = {
            name: 'MembershipAlreadyCharged',
            applicationCode: 'MEMBERSHIP_ALREADY_CHARGED',
        };
        this.data = data;
    }
}
exports.MembershipAlreadyChargedWixError = MembershipAlreadyChargedWixError;
/** @hidden */
MembershipAlreadyChargedWixError.__type = 'wix_spi_error';
/**
 * Transaction not found
 */
class TransactionNotFoundWixError extends Error {
    constructor() {
        super('TransactionNotFound');
        this.httpCode = 404;
        this.statusCode = 'NOT_FOUND';
        this.applicationCode = 'TRANSACTION_NOT_FOUND';
        this.name = 'TransactionNotFound';
        this.errorType = 'SPI';
        this.spiErrorData = {
            name: 'TransactionNotFound',
            applicationCode: 'TRANSACTION_NOT_FOUND',
        };
    }
}
exports.TransactionNotFoundWixError = TransactionNotFoundWixError;
/** @hidden */
TransactionNotFoundWixError.__type = 'wix_spi_error';
/**
 * Transaction exists but cannot be voided
 */
class TransactionCannotBeVoidedWixError extends Error {
    constructor() {
        super('TransactionCannotBeVoided');
        this.httpCode = 428;
        this.statusCode = 'FAILED_PRECONDITION';
        this.applicationCode = 'TRANSACTION_CANNOT_BE_VOIDED';
        this.name = 'TransactionCannotBeVoided';
        this.errorType = 'SPI';
        this.spiErrorData = {
            name: 'TransactionCannotBeVoided',
            applicationCode: 'TRANSACTION_CANNOT_BE_VOIDED',
        };
    }
}
exports.TransactionCannotBeVoidedWixError = TransactionCannotBeVoidedWixError;
/** @hidden */
TransactionCannotBeVoidedWixError.__type = 'wix_spi_error';
/**
 * Transaction was already voided
 */
class TransactionAlreadyVoidedWixError extends Error {
    constructor() {
        super('TransactionAlreadyVoided');
        this.httpCode = 409;
        this.statusCode = 'ALREADY_EXISTS';
        this.applicationCode = 'TRANSACTION_ALREADY_VOIDED';
        this.name = 'TransactionAlreadyVoided';
        this.errorType = 'SPI';
        this.spiErrorData = {
            name: 'TransactionAlreadyVoided',
            applicationCode: 'TRANSACTION_ALREADY_VOIDED',
        };
    }
}
exports.TransactionAlreadyVoidedWixError = TransactionAlreadyVoidedWixError;
/** @hidden */
TransactionAlreadyVoidedWixError.__type = 'wix_spi_error';
//# sourceMappingURL=service-plugins-error-classes.js.map