import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1CheckoutSettings from './ecom-v1-checkout-settings-checkout-settings.http.js';
import { transformSDKImageToRESTImage } from '@wix/sdk-runtime/transformations/image';
import { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var LogoSize;
(function (LogoSize) {
    LogoSize["UNKNOWN_LOGO_SIZE"] = "UNKNOWN_LOGO_SIZE";
    LogoSize["SMALL"] = "SMALL";
    LogoSize["MEDIUM"] = "MEDIUM";
    LogoSize["LARGE"] = "LARGE";
})(LogoSize || (LogoSize = {}));
export var Alignment;
(function (Alignment) {
    Alignment["UNKNOWN_ALIGNMENT"] = "UNKNOWN_ALIGNMENT";
    Alignment["SIDE"] = "SIDE";
    Alignment["CENTER"] = "CENTER";
})(Alignment || (Alignment = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Retrieves the sites' checkout settings.
 *
 *
 * The `getCheckoutSettings()` function returns a Promise that resolves to checkout settings.
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.READ_CHECKOUT_SETTINGS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns The requested checkout settings.
 * @fqn wix.ecom.checkout_settings.api.v1.CheckoutSettingsService.GetCheckoutSettings
 */
export async function getCheckoutSettings() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixEcomV1CheckoutSettings.getCheckoutSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'checkoutSettings.checkoutBrand.header.logo.image' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates the sites' checkout settings.
 *
 *
 * The `updateCheckoutSettings()` function returns a Promise that resolves to the newly updated checkout settings.
 * @param checkoutSettings - Checkout settings to update.
 * @public
 * @documentationMaturity preview
 * @requiredField checkoutSettings
 * @permissionId ECOM.UPDATE_CHECKOUT_SETTINGS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns The updated checkout settings.
 * @fqn wix.ecom.checkout_settings.api.v1.CheckoutSettingsService.UpdateCheckoutSettings
 */
export async function updateCheckoutSettings(checkoutSettings) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        checkoutSettings: checkoutSettings,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'checkoutSettings.checkoutBrand.header.logo.image' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1CheckoutSettings.updateCheckoutSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'checkoutSettings.checkoutBrand.header.logo.image' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { checkoutSettings: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['checkoutSettings']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-checkout-settings-checkout-settings.universal.js.map