"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateCheckoutSettings = exports.getCheckoutSettings = exports.WebhookIdentityType = exports.Alignment = exports.LogoSize = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixEcomV1CheckoutSettings = __importStar(require("./ecom-v1-checkout-settings-checkout-settings.http.js"));
const image_1 = require("@wix/sdk-runtime/transformations/image");
const image_2 = require("@wix/sdk-runtime/transformations/image");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
var LogoSize;
(function (LogoSize) {
    LogoSize["UNKNOWN_LOGO_SIZE"] = "UNKNOWN_LOGO_SIZE";
    LogoSize["SMALL"] = "SMALL";
    LogoSize["MEDIUM"] = "MEDIUM";
    LogoSize["LARGE"] = "LARGE";
})(LogoSize || (exports.LogoSize = LogoSize = {}));
var Alignment;
(function (Alignment) {
    Alignment["UNKNOWN_ALIGNMENT"] = "UNKNOWN_ALIGNMENT";
    Alignment["SIDE"] = "SIDE";
    Alignment["CENTER"] = "CENTER";
})(Alignment || (exports.Alignment = Alignment = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Retrieves the sites' checkout settings.
 *
 *
 * The `getCheckoutSettings()` function returns a Promise that resolves to checkout settings.
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.READ_CHECKOUT_SETTINGS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns The requested checkout settings.
 * @fqn wix.ecom.checkout_settings.api.v1.CheckoutSettingsService.GetCheckoutSettings
 */
async function getCheckoutSettings() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({});
    const reqOpts = ambassadorWixEcomV1CheckoutSettings.getCheckoutSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [{ path: 'checkoutSettings.checkoutBrand.header.logo.image' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getCheckoutSettings = getCheckoutSettings;
/**
 * Updates the sites' checkout settings.
 *
 *
 * The `updateCheckoutSettings()` function returns a Promise that resolves to the newly updated checkout settings.
 * @param checkoutSettings - Checkout settings to update.
 * @public
 * @documentationMaturity preview
 * @requiredField checkoutSettings
 * @permissionId ECOM.UPDATE_CHECKOUT_SETTINGS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns The updated checkout settings.
 * @fqn wix.ecom.checkout_settings.api.v1.CheckoutSettingsService.UpdateCheckoutSettings
 */
async function updateCheckoutSettings(checkoutSettings) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        checkoutSettings: checkoutSettings,
    }), [
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [{ path: 'checkoutSettings.checkoutBrand.header.logo.image' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1CheckoutSettings.updateCheckoutSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [{ path: 'checkoutSettings.checkoutBrand.header.logo.image' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { checkoutSettings: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['checkoutSettings']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateCheckoutSettings = updateCheckoutSettings;
//# sourceMappingURL=ecom-v1-checkout-settings-checkout-settings.universal.js.map