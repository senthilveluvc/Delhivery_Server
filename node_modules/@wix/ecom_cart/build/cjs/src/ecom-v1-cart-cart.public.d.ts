import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { AddToCartOptions, AddToCartResponse, AddToCartResponseNonNullableFields, Cart, CartCreatedEnvelope, CartDeletedEnvelope, CartNonNullableFields, CartUpdatedEnvelope, CreateCartOptions, CreateCheckoutOptions, CreateCheckoutResponse, CreateCheckoutResponseNonNullableFields, EstimateTotalsOptions, EstimateTotalsResponse, EstimateTotalsResponseNonNullableFields, LineItemQuantityUpdate, RemoveCouponResponse, RemoveCouponResponseNonNullableFields, RemoveLineItemsResponse, RemoveLineItemsResponseNonNullableFields, UpdateCartOptions, UpdateLineItemsQuantityResponse, UpdateLineItemsQuantityResponseNonNullableFields } from './ecom-v1-cart-cart.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createCart(httpClient: HttpClient): CreateCartSignature;
interface CreateCartSignature {
    /**
     * Creates a new cart.
     *
     *
     * The `createCart()` function returns a Promise that resolves to the new cart when it's created.
     *
     * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
     * @param - Cart creation options.
     * @returns Fulfilled - Cart.
     */
    (options?: CreateCartOptions | undefined): Promise<Cart & CartNonNullableFields>;
}
export declare function updateCart(httpClient: HttpClient): UpdateCartSignature;
interface UpdateCartSignature {
    /**
     * Updates a specified cart's properties.
     *
     *
     * The `updateCart()` function returns a Promise that resolves when the specified cart's properties are updated.
     *
     * > **Note:** When updating catalog items, `options.lineItems.catalogReference` is required.
     * @param - Available options to use when updating a cart.
     * @param - ID of the cart to be updated.
     * @returns Fulfilled - Updated cart.
     */
    (_id: string | null, options?: UpdateCartOptions | undefined): Promise<Cart & CartNonNullableFields>;
}
export declare function getCart(httpClient: HttpClient): GetCartSignature;
interface GetCartSignature {
    /**
     * Retrieves a cart.
     *
     *
     * The `getCart()` function returns a Promise that resolves when the specified cart is retrieved.
     * @param - ID of the cart to retrieve.
     * @returns Fulfilled - The specified cart.
     */
    (_id: string): Promise<Cart & CartNonNullableFields>;
}
export declare function addToCart(httpClient: HttpClient): AddToCartSignature;
interface AddToCartSignature {
    /**
     * Adds catalog line items to a cart.
     *
     *
     * The `addToCart()` function returns a Promise that resolves to the updated cart when the specified items have been added.
     *
     * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
     * @param - Cart ID.
     * @param - Items to be added to cart.
     * @returns Fulfilled - Cart.
     */
    (_id: string, options?: AddToCartOptions | undefined): Promise<AddToCartResponse & AddToCartResponseNonNullableFields>;
}
export declare function removeLineItems(httpClient: HttpClient): RemoveLineItemsSignature;
interface RemoveLineItemsSignature {
    /**
     * Removes line items from the specified cart.
     *
     *
     * The `removeLineItems()` function returns a Promise that resolves to the updated cart when the line items are removed from the specified cart.
     * @param - IDs of the line items to remove from the cart.
     * @param - ID of the cart to remove line items from.
     * @returns Fulfilled - Updated cart.
     */
    (_id: string, lineItemIds: string[]): Promise<RemoveLineItemsResponse & RemoveLineItemsResponseNonNullableFields>;
}
export declare function createCheckout(httpClient: HttpClient): CreateCheckoutSignature;
interface CreateCheckoutSignature {
    /**
     * Creates a checkout from a cart.
     *
     *
     * The `createCheckout()` function returns a Promise that resolves to the new checkout's ID when it's created.
     *
     * If a checkout was already created from the specified cart, that checkout will be
     * updated with any new information from the cart.
     *
     * > **Note:** `options.channelType` is a required field.
     * @param - Cart ID.
     * @param - Checkout creation options.
     * @returns Fulfilled - ID of the newly created checkout.
     */
    (_id: string, options?: CreateCheckoutOptions | undefined): Promise<CreateCheckoutResponse & CreateCheckoutResponseNonNullableFields>;
}
export declare function removeCoupon(httpClient: HttpClient): RemoveCouponSignature;
interface RemoveCouponSignature {
    /**
     * Removes the coupon from a specified cart.
     *
     *
     * The `removeCoupon()` function returns a Promise that resolves to the updated cart when the coupon is removed from the specified cart.
     * @param - Cart ID.
     * @returns Fulfilled - Updated cart.
     */
    (_id: string): Promise<RemoveCouponResponse & RemoveCouponResponseNonNullableFields>;
}
export declare function updateLineItemsQuantity(httpClient: HttpClient): UpdateLineItemsQuantitySignature;
interface UpdateLineItemsQuantitySignature {
    /**
     * Updates the quantity of one or more line items in a specified cart.
     *
     *
     * The `updateLineItemsQuantity()` function returns a Promise that resolves when the quantities of the specified cart's line items are updated.
     *
     * This endpoint is only for updating the quantity of line items. To entirely remove a line item from the cart, use [`removeLineItems()`](#removelineitems). To add a new line item to the cart, use [`addToCart()`](#addtocart).
     *
     * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity` is greater than the remaining stock, then the `quantity` returned in the response is the total amount of remaining stock.
     * @param - Cart ID.
     * @param - Line item IDs and their new quantity.
     * @returns Fulfilled - Updated cart.
     */
    (_id: string, lineItems: LineItemQuantityUpdate[]): Promise<UpdateLineItemsQuantityResponse & UpdateLineItemsQuantityResponseNonNullableFields>;
}
export declare function estimateTotals(httpClient: HttpClient): EstimateTotalsSignature;
interface EstimateTotalsSignature {
    /**
     * Estimates the subtotal and total for current site visitorâ€™s cart. Totals include tax and are based on the selected carrier service, shipping address, and billing information.
     *
     *
     * The `estimateTotals()` function returns a Promise that resolves when the estimated totals are generated.
     *
     * > **Note:** Not passing any `options` properties will only estimate the cart items price totals.
     * @param - Cart ID.
     * @param - Total estimation options.
     * @returns Fulfilled - Cart's estimated totals.
     */
    (_id: string, options?: EstimateTotalsOptions | undefined): Promise<EstimateTotalsResponse & EstimateTotalsResponseNonNullableFields>;
}
export declare function deleteCart(httpClient: HttpClient): DeleteCartSignature;
interface DeleteCartSignature {
    /**
     * Deletes a cart.
     *
     *
     * The `deleteCart()` function returns a Promise that resolves when the specified cart is deleted.
     * @param - ID of the cart to delete.
     * @returns Fulfilled - When the cart is deleted. Rejected - Error message.
     */
    (_id: string): Promise<void>;
}
export declare const onCartDeleted: EventDefinition<CartDeletedEnvelope, "wix.ecom.v1.cart_deleted">;
export declare const onCartUpdated: EventDefinition<CartUpdatedEnvelope, "wix.ecom.v1.cart_updated">;
export declare const onCartCreated: EventDefinition<CartCreatedEnvelope, "wix.ecom.v1.cart_created">;
export { ActionEvent, AddToCartOptions, AddToCartRequest, AddToCartResponse, AddToCartResponseNonNullableFields, AddToCurrentCartAndEstimateTotalsRequest, AddToCurrentCartRequest, AdditionalFee, AdditionalFeeSource, Address, AddressLocation, AddressWithContact, AggregatedTaxBreakdown, ApplicableLineItems, ApplicationError, AppliedDiscount, AppliedDiscountDiscountSourceOneOf, AppliedDiscountDiscountType, AutoTaxFallbackCalculationDetails, BaseEventMetadata, BuyerInfo, BuyerInfoIdOneOf, CalculatedLineItem, CalculationErrors, CalculationErrorsShippingCalculationErrorOneOf, Carrier, CarrierError, CarrierErrors, CarrierServiceOption, Cart, CartCreatedEnvelope, CartDeletedEnvelope, CartDiscount, CartDiscountDiscountSourceOneOf, CartNonNullableFields, CartUpdatedEnvelope, CatalogOverrideFields, CatalogReference, ChannelType, ChargeType, Color, Coupon, CreateCartOptions, CreateCartRequest, CreateCartResponse, CreateCartResponseNonNullableFields, CreateCheckoutFromCurrentCartRequest, CreateCheckoutOptions, CreateCheckoutRequest, CreateCheckoutResponse, CreateCheckoutResponseNonNullableFields, CustomLineItem, DeleteCartRequest, DeleteCartResponse, DeleteCurrentCartRequest, DeliveryAllocation, DeliveryLogistics, DeliveryTimeSlot, Description, DescriptionLine, DescriptionLineDescriptionLineValueOneOf, DescriptionLineName, DescriptionLineType, DescriptionLineValueOneOf, Details, DetailsKindOneOf, DiscountRule, DiscountRuleName, DiscountType, DomainEvent, DomainEventBodyOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EstimateCurrentCartTotalsRequest, EstimateTotalsOptions, EstimateTotalsRequest, EstimateTotalsResponse, EstimateTotalsResponseNonNullableFields, EventMetadata, ExtendedFields, FallbackReason, FieldViolation, FileType, FocalPoint, FreeTrialPeriod, FullAddressContactDetails, GetCartByCheckoutIdRequest, GetCartByCheckoutIdResponse, GetCartRequest, GetCartResponse, GetCartResponseNonNullableFields, GetCurrentCartRequest, GetCurrentCartResponse, GiftCard, Group, HostSelectedMembership, IdentificationData, IdentificationDataIdOneOf, InvalidMembership, ItemAvailabilityInfo, ItemAvailabilityStatus, ItemTaxFullDetails, ItemType, ItemTypeItemType, ItemTypeItemTypeDataOneOf, JurisdictionType, LineItem, LineItemDiscount, LineItemPricesData, LineItemQuantityUpdate, ManualCalculationReason, Membership, MembershipName, MembershipOptions, MembershipPaymentCredits, MerchantDiscount, MerchantDiscountInput, MessageEnvelope, MultiCurrencyPrice, NameInLineItem, NameInOther, Other, OtherCharge, PaymentOption, PaymentOptionType, PhysicalProperties, PickupDetails, PickupMethod, PlainTextValue, Policy, PriceDescription, PriceSummary, ProductName, RateType, Region, RemoveCouponFromCurrentCartRequest, RemoveCouponRequest, RemoveCouponResponse, RemoveCouponResponseNonNullableFields, RemoveLineItemsFromCurrentCartRequest, RemoveLineItemsRequest, RemoveLineItemsResponse, RemoveLineItemsResponseNonNullableFields, RestoreInfo, RuleType, Scope, SecuredMedia, SelectedCarrierServiceOption, SelectedCarrierServiceOptionOtherCharge, SelectedCarrierServiceOptionPrices, SelectedMembership, SelectedMemberships, SelectedShippingOption, ServiceProperties, Severity, ShippingInformation, ShippingOption, ShippingPrice, ShippingRegion, StreetAddress, SubscriptionFrequency, SubscriptionOptionInfo, SubscriptionSettings, SuggestedFix, SystemError, Target, TargetLineItem, TargetTargetTypeOneOf, TaxBreakdown, TaxCalculationDetails, TaxCalculationDetailsCalculationDetailsOneOf, TaxRateBreakdown, TaxSummary, TaxableAddress, TaxableAddressTaxableAddressDataOneOf, TaxableAddressType, Title, UpdateCartOptions, UpdateCartRequest, UpdateCartResponse, UpdateCartResponseNonNullableFields, UpdateCurrentCartLineItemQuantityRequest, UpdateLineItemsQuantityRequest, UpdateLineItemsQuantityResponse, UpdateLineItemsQuantityResponseNonNullableFields, V1Coupon, V1DiscountRule, V1DiscountRuleName, V1MerchantDiscount, ValidationError, VatId, VatType, Violation, WebhookIdentityType, WeightUnit, } from './ecom-v1-cart-cart.universal.js';
