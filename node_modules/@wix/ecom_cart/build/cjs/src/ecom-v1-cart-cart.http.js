"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteCart = exports.estimateTotals = exports.updateLineItemsQuantity = exports.removeCoupon = exports.createCheckout = exports.removeLineItems = exports.addToCart = exports.getCart = exports.updateCart = exports.createCart = void 0;
const rest_modules_1 = require("@wix/sdk-runtime/rest-modules");
const float_1 = require("@wix/sdk-runtime/transformations/float");
const float_2 = require("@wix/sdk-runtime/transformations/float");
const timestamp_1 = require("@wix/sdk-runtime/transformations/timestamp");
const timestamp_2 = require("@wix/sdk-runtime/transformations/timestamp");
const field_mask_1 = require("@wix/sdk-runtime/transformations/field-mask");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
const rest_modules_2 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixEcomCartApiV1CartServiceUrl(opts) {
    const domainToMappings = {
        'api._api_base_domain_': [
            {
                srcPath: '/cart',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'www.wixgateway.com': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        _: [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
            {
                srcPath: '/_api/cart',
                destPath: '',
            },
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'editor._base_domain_': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        'blocks._base_domain_': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        'create.editorx': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        '*.dev.wix-code.com': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        'www._base_domain_': [
            {
                srcPath: '/_api/ecom-cart',
                destPath: '',
            },
        ],
        'bo._base_domain_': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'wixbo.ai': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
        'wix-bo.com': [
            {
                srcPath: '/ecom/v1/carts',
                destPath: '/v1/carts',
            },
        ],
    };
    return (0, rest_modules_2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/ecom_cart';
/**
 * Creates a new cart.
 *
 *
 * The `createCart()` function returns a Promise that resolves to the new cart when it's created.
 *
 * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
 */
function createCart(payload) {
    function __createCart({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'cartInfo.createdDate' },
                    { path: 'cartInfo.updatedDate' },
                    { path: 'cartInfo.lineItems.image.urlExpirationDate' },
                    {
                        path: 'cartInfo.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'cartInfo.lineItems.serviceProperties.scheduledDate' },
                    { path: 'lineItems.image.urlExpirationDate' },
                    {
                        path: 'lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'lineItems.serviceProperties.scheduledDate' },
                    {
                        path: 'customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'customLineItems.serviceProperties.scheduledDate' },
                ],
            },
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'cartInfo.lineItems.image.focalPoint.x' },
                    { path: 'cartInfo.lineItems.image.focalPoint.y' },
                    { path: 'lineItems.image.focalPoint.x' },
                    { path: 'lineItems.image.focalPoint.y' },
                    { path: 'cartInfo.lineItems.physicalProperties.weight' },
                    {
                        path: 'cartInfo.lineItems.catalogOverrideFields.physicalProperties.weight',
                    },
                    { path: 'cartInfo.contactInfo.address.geocode.latitude' },
                    { path: 'cartInfo.contactInfo.address.geocode.longitude' },
                    { path: 'lineItems.physicalProperties.weight' },
                    { path: 'lineItems.catalogOverrideFields.physicalProperties.weight' },
                    { path: 'customLineItems.physicalProperties.weight' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.CreateCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __createCart;
}
exports.createCart = createCart;
/**
 * Updates a specified cart's properties.
 *
 *
 * The `updateCart()` function returns a Promise that resolves when the specified cart's properties are updated.
 *
 * > **Note:** When updating catalog items, `options.lineItems.catalogReference` is required.
 */
function updateCart(payload) {
    function __updateCart({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: field_mask_1.transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'cartFieldmask' }],
            },
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'cartInfo.createdDate' },
                    { path: 'cartInfo.updatedDate' },
                    { path: 'cartInfo.lineItems.image.urlExpirationDate' },
                    {
                        path: 'cartInfo.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'cartInfo.lineItems.serviceProperties.scheduledDate' },
                    { path: 'lineItems.image.urlExpirationDate' },
                    {
                        path: 'lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'lineItems.serviceProperties.scheduledDate' },
                    {
                        path: 'customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'customLineItems.serviceProperties.scheduledDate' },
                ],
            },
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'cartInfo.lineItems.image.focalPoint.x' },
                    { path: 'cartInfo.lineItems.image.focalPoint.y' },
                    { path: 'lineItems.image.focalPoint.x' },
                    { path: 'lineItems.image.focalPoint.y' },
                    { path: 'cartInfo.lineItems.physicalProperties.weight' },
                    {
                        path: 'cartInfo.lineItems.catalogOverrideFields.physicalProperties.weight',
                    },
                    { path: 'cartInfo.contactInfo.address.geocode.latitude' },
                    { path: 'cartInfo.contactInfo.address.geocode.longitude' },
                    { path: 'lineItems.physicalProperties.weight' },
                    { path: 'lineItems.catalogOverrideFields.physicalProperties.weight' },
                    { path: 'customLineItems.physicalProperties.weight' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'PATCH',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.UpdateCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{cartInfo.id}',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateCart;
}
exports.updateCart = updateCart;
/**
 * Retrieves a cart.
 *
 *
 * The `getCart()` function returns a Promise that resolves when the specified cart is retrieved.
 */
function getCart(payload) {
    function __getCart({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'GET',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.GetCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getCart;
}
exports.getCart = getCart;
/**
 * Adds catalog line items to a cart.
 *
 *
 * The `addToCart()` function returns a Promise that resolves to the updated cart when the specified items have been added.
 *
 * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
 */
function addToCart(payload) {
    function __addToCart({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'lineItems.image.urlExpirationDate' },
                    {
                        path: 'lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'lineItems.serviceProperties.scheduledDate' },
                    {
                        path: 'customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'customLineItems.serviceProperties.scheduledDate' },
                ],
            },
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'lineItems.image.focalPoint.x' },
                    { path: 'lineItems.image.focalPoint.y' },
                    { path: 'lineItems.physicalProperties.weight' },
                    { path: 'lineItems.catalogOverrideFields.physicalProperties.weight' },
                    { path: 'customLineItems.physicalProperties.weight' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.AddToCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}/add-to-cart',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __addToCart;
}
exports.addToCart = addToCart;
/**
 * Removes line items from the specified cart.
 *
 *
 * The `removeLineItems()` function returns a Promise that resolves to the updated cart when the line items are removed from the specified cart.
 */
function removeLineItems(payload) {
    function __removeLineItems({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.RemoveLineItems',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}/remove-line-items',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __removeLineItems;
}
exports.removeLineItems = removeLineItems;
/**
 * Creates a checkout from a cart.
 *
 *
 * The `createCheckout()` function returns a Promise that resolves to the new checkout's ID when it's created.
 *
 * If a checkout was already created from the specified cart, that checkout will be
 * updated with any new information from the cart.
 *
 * > **Note:** `options.channelType` is a required field.
 */
function createCheckout(payload) {
    function __createCheckout({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'shippingAddress.geocode.latitude' },
                    { path: 'shippingAddress.geocode.longitude' },
                    { path: 'billingAddress.geocode.latitude' },
                    { path: 'billingAddress.geocode.longitude' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.CreateCheckout',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}/create-checkout',
                data: serializedData,
                host,
            }),
            data: serializedData,
        };
        return metadata;
    }
    return __createCheckout;
}
exports.createCheckout = createCheckout;
/**
 * Removes the coupon from a specified cart.
 *
 *
 * The `removeCoupon()` function returns a Promise that resolves to the updated cart when the coupon is removed from the specified cart.
 */
function removeCoupon(payload) {
    function __removeCoupon({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.RemoveCoupon',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}/remove-coupon',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __removeCoupon;
}
exports.removeCoupon = removeCoupon;
/**
 * Updates the quantity of one or more line items in a specified cart.
 *
 *
 * The `updateLineItemsQuantity()` function returns a Promise that resolves when the quantities of the specified cart's line items are updated.
 *
 * This endpoint is only for updating the quantity of line items. To entirely remove a line item from the cart, use [`removeLineItems()`](#removelineitems). To add a new line item to the cart, use [`addToCart()`](#addtocart).
 *
 * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity` is greater than the remaining stock, then the `quantity` returned in the response is the total amount of remaining stock.
 */
function updateLineItemsQuantity(payload) {
    function __updateLineItemsQuantity({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.UpdateLineItemsQuantity',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}/update-line-items-quantity',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateLineItemsQuantity;
}
exports.updateLineItemsQuantity = updateLineItemsQuantity;
/**
 * Estimates the subtotal and total for current site visitor’s cart. Totals include tax and are based on the selected carrier service, shipping address, and billing information.
 *
 *
 * The `estimateTotals()` function returns a Promise that resolves when the estimated totals are generated.
 *
 * > **Note:** Not passing any `options` properties will only estimate the cart items price totals.
 */
function estimateTotals(payload) {
    function __estimateTotals({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'shippingAddress.geocode.latitude' },
                    { path: 'shippingAddress.geocode.longitude' },
                    { path: 'billingAddress.geocode.latitude' },
                    { path: 'billingAddress.geocode.longitude' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'POST',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.EstimateTotals',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}/estimate-totals',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'cart.createdDate' },
                        { path: 'cart.updatedDate' },
                        { path: 'cart.lineItems.image.urlExpirationDate' },
                        {
                            path: 'cart.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'cart.lineItems.serviceProperties.scheduledDate' },
                        {
                            path: 'shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                        },
                        { path: 'membershipOptions.eligibleMemberships.expirationDate' },
                        {
                            path: 'membershipOptions.invalidMemberships.membership.expirationDate',
                        },
                    ],
                },
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'cart.lineItems.image.focalPoint.x' },
                        { path: 'cart.lineItems.image.focalPoint.y' },
                        { path: 'cart.lineItems.physicalProperties.weight' },
                        {
                            path: 'cart.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'cart.contactInfo.address.geocode.latitude' },
                        { path: 'cart.contactInfo.address.geocode.longitude' },
                        {
                            path: 'shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                        },
                        {
                            path: 'shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'appliedDiscounts.merchantDiscount.percentage' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __estimateTotals;
}
exports.estimateTotals = estimateTotals;
/**
 * Deletes a cart.
 *
 *
 * The `deleteCart()` function returns a Promise that resolves when the specified cart is deleted.
 */
function deleteCart(payload) {
    function __deleteCart({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.cart',
            method: 'DELETE',
            methodFqn: 'com.wix.ecom.cart.api.v1.CartService.DeleteCart',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCartApiV1CartServiceUrl({
                protoPath: '/v1/carts/{id}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
        };
        return metadata;
    }
    return __deleteCart;
}
exports.deleteCart = deleteCart;
//# sourceMappingURL=ecom-v1-cart-cart.http.js.map