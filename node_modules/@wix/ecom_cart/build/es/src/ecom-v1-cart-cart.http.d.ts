import { RequestOptionsFactory } from '@wix/sdk-types';
/**
 * Creates a new cart.
 *
 *
 * The `createCart()` function returns a Promise that resolves to the new cart when it's created.
 *
 * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
 */
export declare function createCart(payload: object): RequestOptionsFactory<any>;
/**
 * Updates a specified cart's properties.
 *
 *
 * The `updateCart()` function returns a Promise that resolves when the specified cart's properties are updated.
 *
 * > **Note:** When updating catalog items, `options.lineItems.catalogReference` is required.
 */
export declare function updateCart(payload: object): RequestOptionsFactory<any>;
/**
 * Retrieves a cart.
 *
 *
 * The `getCart()` function returns a Promise that resolves when the specified cart is retrieved.
 */
export declare function getCart(payload: object): RequestOptionsFactory<any>;
/**
 * Adds catalog line items to a cart.
 *
 *
 * The `addToCart()` function returns a Promise that resolves to the updated cart when the specified items have been added.
 *
 * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
 */
export declare function addToCart(payload: object): RequestOptionsFactory<any>;
/**
 * Removes line items from the specified cart.
 *
 *
 * The `removeLineItems()` function returns a Promise that resolves to the updated cart when the line items are removed from the specified cart.
 */
export declare function removeLineItems(payload: object): RequestOptionsFactory<any>;
/**
 * Creates a checkout from a cart.
 *
 *
 * The `createCheckout()` function returns a Promise that resolves to the new checkout's ID when it's created.
 *
 * If a checkout was already created from the specified cart, that checkout will be
 * updated with any new information from the cart.
 *
 * > **Note:** `options.channelType` is a required field.
 */
export declare function createCheckout(payload: object): RequestOptionsFactory<any>;
/**
 * Removes the coupon from a specified cart.
 *
 *
 * The `removeCoupon()` function returns a Promise that resolves to the updated cart when the coupon is removed from the specified cart.
 */
export declare function removeCoupon(payload: object): RequestOptionsFactory<any>;
/**
 * Updates the quantity of one or more line items in a specified cart.
 *
 *
 * The `updateLineItemsQuantity()` function returns a Promise that resolves when the quantities of the specified cart's line items are updated.
 *
 * This endpoint is only for updating the quantity of line items. To entirely remove a line item from the cart, use [`removeLineItems()`](#removelineitems). To add a new line item to the cart, use [`addToCart()`](#addtocart).
 *
 * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity` is greater than the remaining stock, then the `quantity` returned in the response is the total amount of remaining stock.
 */
export declare function updateLineItemsQuantity(payload: object): RequestOptionsFactory<any>;
/**
 * Estimates the subtotal and total for current site visitorâ€™s cart. Totals include tax and are based on the selected carrier service, shipping address, and billing information.
 *
 *
 * The `estimateTotals()` function returns a Promise that resolves when the estimated totals are generated.
 *
 * > **Note:** Not passing any `options` properties will only estimate the cart items price totals.
 */
export declare function estimateTotals(payload: object): RequestOptionsFactory<any>;
/**
 * Deletes a cart.
 *
 *
 * The `deleteCart()` function returns a Promise that resolves when the specified cart is deleted.
 */
export declare function deleteCart(payload: object): RequestOptionsFactory<any>;
