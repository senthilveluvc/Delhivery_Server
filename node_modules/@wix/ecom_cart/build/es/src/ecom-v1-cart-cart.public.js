import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';
import { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';
import { transformRESTPageURLV2ToSDKPageURLV2 } from '@wix/sdk-runtime/transformations/page-url-v2';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { EventDefinition } from '@wix/sdk-types';
import { addToCart as universalAddToCart, createCart as universalCreateCart, createCheckout as universalCreateCheckout, deleteCart as universalDeleteCart, estimateTotals as universalEstimateTotals, getCart as universalGetCart, removeCoupon as universalRemoveCoupon, removeLineItems as universalRemoveLineItems, updateCart as universalUpdateCart, updateLineItemsQuantity as universalUpdateLineItemsQuantity, } from './ecom-v1-cart-cart.universal.js';
export const __metadata = { PACKAGE_NAME: '@wix/ecom' };
export function createCart(httpClient) {
    return (options) => universalCreateCart(options, 
    // @ts-ignore
    { httpClient });
}
export function updateCart(httpClient) {
    return (_id, options) => universalUpdateCart(_id, options, 
    // @ts-ignore
    { httpClient });
}
export function getCart(httpClient) {
    return (_id) => universalGetCart(_id, 
    // @ts-ignore
    { httpClient });
}
export function addToCart(httpClient) {
    return (_id, options) => universalAddToCart(_id, options, 
    // @ts-ignore
    { httpClient });
}
export function removeLineItems(httpClient) {
    return (_id, lineItemIds) => universalRemoveLineItems(_id, lineItemIds, 
    // @ts-ignore
    { httpClient });
}
export function createCheckout(httpClient) {
    return (_id, options) => universalCreateCheckout(_id, options, 
    // @ts-ignore
    { httpClient });
}
export function removeCoupon(httpClient) {
    return (_id) => universalRemoveCoupon(_id, 
    // @ts-ignore
    { httpClient });
}
export function updateLineItemsQuantity(httpClient) {
    return (_id, lineItems) => universalUpdateLineItemsQuantity(_id, lineItems, 
    // @ts-ignore
    { httpClient });
}
export function estimateTotals(httpClient) {
    return (_id, options) => universalEstimateTotals(_id, options, 
    // @ts-ignore
    { httpClient });
}
export function deleteCart(httpClient) {
    return (_id) => universalDeleteCart(_id, 
    // @ts-ignore
    { httpClient });
}
export const onCartDeleted = EventDefinition('wix.ecom.v1.cart_deleted', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'undefined.createdDate' },
            { path: 'undefined.updatedDate' },
            {
                path: 'undefined.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
            },
            { path: 'undefined.lineItems.serviceProperties.scheduledDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTPageURLV2ToSDKPageURLV2,
        paths: [{ path: 'undefined.lineItems.url' }],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [
            { path: 'undefined.lineItems.image' },
            { path: 'undefined.lineItems.catalogOverrideFields.image' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            { path: 'undefined.lineItems.physicalProperties.weight' },
            {
                path: 'undefined.lineItems.catalogOverrideFields.physicalProperties.weight',
            },
        ],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [{ path: 'undefined.contactInfo.address' }],
    },
])))();
export const onCartUpdated = EventDefinition('wix.ecom.v1.cart_updated', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.updatedDate' },
            {
                path: 'entity.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
            },
            { path: 'entity.lineItems.serviceProperties.scheduledDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTPageURLV2ToSDKPageURLV2,
        paths: [{ path: 'entity.lineItems.url' }],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [
            { path: 'entity.lineItems.image' },
            { path: 'entity.lineItems.catalogOverrideFields.image' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            { path: 'entity.lineItems.physicalProperties.weight' },
            {
                path: 'entity.lineItems.catalogOverrideFields.physicalProperties.weight',
            },
        ],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [{ path: 'entity.contactInfo.address' }],
    },
])))();
export const onCartCreated = EventDefinition('wix.ecom.v1.cart_created', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.updatedDate' },
            {
                path: 'entity.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
            },
            { path: 'entity.lineItems.serviceProperties.scheduledDate' },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTPageURLV2ToSDKPageURLV2,
        paths: [{ path: 'entity.lineItems.url' }],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [
            { path: 'entity.lineItems.image' },
            { path: 'entity.lineItems.catalogOverrideFields.image' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            { path: 'entity.lineItems.physicalProperties.weight' },
            {
                path: 'entity.lineItems.catalogOverrideFields.physicalProperties.weight',
            },
        ],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [{ path: 'entity.contactInfo.address' }],
    },
])))();
export { AdditionalFeeSource, AppliedDiscountDiscountType, ChannelType, ChargeType, DescriptionLineType, DiscountType, FallbackReason, FileType, ItemAvailabilityStatus, ItemTypeItemType, JurisdictionType, ManualCalculationReason, NameInLineItem, NameInOther, PaymentOptionType, PickupMethod, RateType, RuleType, Severity, SubscriptionFrequency, SuggestedFix, TaxableAddressType, VatType, WebhookIdentityType, WeightUnit, } from './ecom-v1-cart-cart.universal.js';
//# sourceMappingURL=ecom-v1-cart-cart.public.js.map