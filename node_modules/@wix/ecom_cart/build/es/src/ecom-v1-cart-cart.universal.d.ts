export interface Cart {
    /** Cart ID. */
    _id?: string | null;
    /**
     * Line items.
     * @readonly
     */
    lineItems?: LineItem[];
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /**
     * Currency used for pricing.
     * @readonly
     */
    currency?: string;
    /**
     * Currency code used for all the converted prices that are returned.
     * For a site that supports multiple currencies, this is the currency the buyer selected.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string | null;
    /**
     * Site language in which original values are displayed.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrices?: boolean | null;
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit;
    /**
     * ID of the checkout that originated from this cart.
     * @readonly
     */
    checkoutId?: string | null;
    /**
     * Cart discounts.
     * @readonly
     */
    appliedDiscounts?: CartDiscount[];
    /**
     * Date and time the cart was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the cart was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Contact info. */
    contactInfo?: AddressWithContact;
    /**
     * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
     *
     * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     */
    overrideCheckoutUrl?: string | null;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
}
export interface LineItem {
    /**
     * Line item ID.
     * @readonly
     */
    _id?: string | null;
    /** Item quantity. */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: string;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice;
    /**
     * Line item description lines. Used for displaying the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine[];
    /**
     * Line item image details.
     * @readonly
     */
    image?: string;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` will be 0.
     * @readonly
     */
    paymentOption?: PaymentOptionType;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + in most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice;
    /** Selected membership to be used as payment for this item. Must be used with `lineItem.paymentOption` set to `MEMBERSHIP` or `MEMBERSHIP_OFFLINE`. This field can be empty when `lineItem.paymentOption` is set to `MEMBERSHIP_OFFLINE`. */
    selectedMembership?: SelectedMembership;
    /**
     * Tax group ID for this line item.
     * @readonly
     */
    taxGroupId?: string | null;
    /**
     * Whether the line item is a custom line item. Custom line items don't trigger the Catalog service plugin.
     * @readonly
     */
    customLineItem?: boolean;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
export interface CatalogReference {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs.
     *
     * Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from your Wix Stores catalog, learn more about [eCommerce integration](https://www.wix.com/velo/reference/wix-stores-backend/ecommerce-integration).
     */
    options?: Record<string, any> | null;
}
export interface ProductName {
    /** **Required** - Original product name (in site's default language). */
    original?: string;
    /** Description product name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
export interface MultiCurrencyPrice {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
export interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
export interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
export interface DescriptionLineDescriptionLineValueOneOf {
}
export interface DescriptionLineName {
    /** Description line name in site's default language. */
    original?: string;
    /** Description line name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
export interface PlainTextValue {
    /** Description line plain text value in site's default language. */
    original?: string;
    /** Description line plain text value translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
export interface Color {
    /** Description line color name in site's default language. */
    original?: string;
    /** Description line color name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
    /**
     * HEX or RGB color code for display.
     *
     */
    code?: string | null;
}
export declare enum DescriptionLineType {
    /** Unrecognized type. */
    UNRECOGNISED = "UNRECOGNISED",
    /** Plain text type. */
    PLAIN_TEXT = "PLAIN_TEXT",
    /** Color type. */
    COLOR = "COLOR"
}
export interface FocalPoint {
    /** X-coordinate of the focal point. */
    x?: number;
    /** Y-coordinate of the focal point. */
    y?: number;
    /** crop by height */
    height?: number | null;
    /** crop by width */
    width?: number | null;
}
export interface ItemAvailabilityInfo {
    /**
     * Item availability status.
     *
     * NOT_FOUND - Item does not exist.
     * NOT_AVAILABLE - Not in stock.
     * PARTIALLY_AVAILABLE - Available quantity is less than requested.
     */
    status?: ItemAvailabilityStatus;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
export declare enum ItemAvailabilityStatus {
    AVAILABLE = "AVAILABLE",
    /** Item does not exist */
    NOT_FOUND = "NOT_FOUND",
    /** Item not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
export interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
export interface Scope {
    /** Scope namespace (Wix Stores, Wix Bookings, Wix Events, Wix Pricing Plans) */
    namespace?: string;
    /** Coupon scope's applied group (e.g., event or ticket in Wix Events) */
    group?: Group;
}
export interface Group {
    /** Coupon scope's group (e.g., product or collection in Wix Stores). See [valid scope values](https://dev.wix.com/api/rest/coupons/coupons/valid-scope-values). */
    name?: string;
    /** Item ID (when the coupon scope is limited to just one item). */
    entityId?: string | null;
}
export interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
export interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
export declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
export interface SubscriptionOptionInfo {
    /** Subscription option settings. */
    subscriptionSettings?: SubscriptionSettings;
    /** Subscription option title. */
    title?: Title;
    /** Subscription option description. */
    description?: Description;
}
export interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency;
    /**
     * Interval of recurring payment.
     *
     * Default: `1`.
     * If SubscriptionFrequency is Day the minimum interval is 7
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal` is `true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
export declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
export interface FreeTrialPeriod {
    /** Frequency of priod. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequency;
    /** interval of period */
    interval?: number;
}
export interface Title {
    /** Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
export interface Description {
    /** Subscription option description. */
    original?: string;
    /** Translated subscription option description. */
    translated?: string | null;
}
export interface SecuredMedia {
    /** Media ID in Wix Media Manager. */
    _id?: string;
    /** Original filename. */
    fileName?: string;
    /** File type. */
    fileType?: FileType;
}
export declare enum FileType {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
/** Type of selected payment option for catalog item */
export declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
export interface ServiceProperties {
    /** The date and time for which the service is supposed to be provided. For example, the time of the class. */
    scheduledDate?: Date | null;
    /** The number of people participating in this service. For example, the number of people attending the class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
export interface PriceDescription {
    /**
     * **Required** - Original price description (in site's default language).
     *
     */
    original?: string;
    /** Product name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
/** Selected Membership */
export interface SelectedMembership {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
}
export interface CatalogOverrideFields {
    /** Item name. */
    productName?: ProductName;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /** Item image. */
    image?: string;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption;
    /** Only eligible for catalog items with `lineItem.paymentOption.value` type of `DEPOSIT_ONLINE`. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
export interface PaymentOption {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType;
}
export interface TaxableAddress extends TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType;
}
/** @oneof */
export interface TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType;
}
export declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
export interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
export interface Policy {
    /** Policy title - should be translated */
    title?: string | null;
    /** Policy content - should be translated */
    content?: string;
}
/** Buyer Info */
export interface BuyerInfo extends BuyerInfoIdOneOf {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the cart owner is a Wix user.
     * @readonly
     */
    userId?: string;
    /** Contact ID. For more information, see the Contacts API. */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
export interface BuyerInfoIdOneOf {
    /**
     * Visitor ID - if the buyer is **not** a site member.
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID - if the buyer is a site member.
     * @readonly
     */
    memberId?: string;
    /**
     * User ID - if the cart owner is a Wix user.
     * @readonly
     */
    userId?: string;
}
export declare enum WeightUnit {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
export interface CartDiscount extends CartDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
}
/** @oneof */
export interface CartDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
}
export interface Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
}
export interface MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice;
}
export interface DiscountRule {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName;
    /** Discount value. */
    amount?: MultiCurrencyPrice;
}
export interface DiscountRuleName {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Discount rule name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
export declare enum DiscountType {
    /** "GLOBAL" - discount applies to entire order. */
    GLOBAL = "GLOBAL",
    /** "SPECIFIC-ITEMS" - discount applies to specific items. */
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    /** "SHIPPING" - discount applies to shipping. For example, free shipping. */
    SHIPPING = "SHIPPING"
}
/** Billing Info and shipping details */
export interface AddressWithContact {
    /** Address. */
    address?: Address;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
}
/** Physical address */
export interface Address {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
export interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
export interface AddressLocation {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
/** Full contact details for an address */
export interface FullAddressContactDetails {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
export interface VatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType;
}
/** tax info types */
export declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
export interface SelectedShippingOption {
    /** Carrier ID. */
    carrierId?: string | null;
    /** Selected shipping option code. For example, "usps_std_overnight". */
    code?: string;
}
export interface GetCurrentCartRequest {
}
export interface GetCurrentCartResponse {
    /** Current session's active cart. */
    cart?: Cart;
}
export interface UpdateCartRequest {
    /** Cart info. */
    cartInfo?: Cart;
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput[];
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
export interface MerchantDiscountInput {
    /** Discount amount. */
    amount?: string;
    /** IDs of the line items the discount applies to. */
    lineItemIds?: string[];
}
export interface CustomLineItem {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /** Custom line item description lines. Used for displaying the cart, checkout and order. */
    descriptionLines?: DescriptionLine[];
    /**
     * Custom line item media. Supported formats:
     * + Link to an image/video from the [Wix Media Manager](https://support.wix.com/en/article/wix-media-about-the-media-manager) - `"wix:image://v1/3c76e2_c53...4ea4~mv2.jpg#originWidth=1000&originHeight=1000"`.
     * + An image from the web - `"http(s)://<image url>"`.
     */
    media?: string;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    _id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: string;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
export interface UpdateCartResponse {
    /** Updated Cart. */
    cart?: Cart;
}
export interface AddToCurrentCartRequest {
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
export interface AddToCartResponse {
    /** Updated cart. */
    cart?: Cart;
}
export interface AddToCurrentCartAndEstimateTotalsRequest {
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
export interface SelectedMemberships {
    /** Selected memberships. */
    memberships?: HostSelectedMembership[];
}
export interface HostSelectedMembership {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
export interface EstimateTotalsResponse {
    /** Cart. */
    cart?: Cart;
    /** Calculated line items. */
    calculatedLineItems?: CalculatedLineItem[];
    /** Price summary. */
    priceSummary?: PriceSummary;
    /** Applied gift card. */
    giftCard?: GiftCard;
    /** Tax summary. */
    taxSummary?: TaxSummary;
    /** Shipping information. */
    shippingInfo?: ShippingInformation;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount[];
    /** Calculation errors. */
    calculationErrors?: CalculationErrors;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit;
    /** Currency used for pricing in this store. */
    currency?: string;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary;
    /** Information about valid and invalid memberships, and which ones are selected for usage. */
    membershipOptions?: MembershipOptions;
    /** Additional fees */
    additionalFees?: AdditionalFee[];
    /**
     * List of validation violations raised by the [Validations Custom Extension SPI](https://www.wix.com/velo/reference/spis/wix-ecom/ecom-validations/introduction).
     * @readonly
     */
    violations?: Violation[];
}
export interface CalculatedLineItem {
    /** Line item ID. */
    lineItemId?: string;
    /** Price breakdown for this line item. */
    pricesBreakdown?: LineItemPricesData;
    /**
     * Type of selected payment option for current item. Defaults to `"FULL_PAYMENT_ONLINE"`.
     * + `"FULL_PAYMENT_ONLINE"` - The entire payment for this item happens as part of the checkout.
     * + `"FULL_PAYMENT_OFFLINE"` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `"MEMBERSHIP"` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` will be 0.
     */
    paymentOption?: PaymentOptionType;
}
export interface LineItemPricesData {
    /** Total price after discounts and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price after discounts, and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Total discount for all line items. */
    totalDiscount?: MultiCurrencyPrice;
    /** Catalog price after catalog discount and automatic discounts. */
    price?: MultiCurrencyPrice;
    /** Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: MultiCurrencyPrice;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: MultiCurrencyPrice;
    /** Item price **before** line item discounts and **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: MultiCurrencyPrice;
}
export interface ItemTaxFullDetails {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown[];
}
export interface TaxRateBreakdown {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice;
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
export interface TaxBreakdown {
    /** The name of the jurisdiction to which this tax detail applies. For example, "New York" or "Quebec". */
    jurisdiction?: string | null;
    /** The amount of this line item price that was considered nontaxable. (Decimal value) */
    nonTaxableAmount?: MultiCurrencyPrice;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.0000 signifies 200% tax. (Decimal value) */
    rate?: string | null;
    /** The amount of tax estimated for this line item. (Decimal value) */
    taxAmount?: MultiCurrencyPrice;
    /** The taxable amount of this line item. */
    taxableAmount?: MultiCurrencyPrice;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** The type of the jurisdiction in which this tax detail applies. */
    jurisdictionType?: JurisdictionType;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
export declare enum JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
export interface PriceSummary {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice;
    /** Total tax. */
    tax?: MultiCurrencyPrice;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice;
}
export interface GiftCard {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
export interface TaxSummary {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails;
}
export interface TaxCalculationDetails extends TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Error details and reason for tax rate fallback. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
    /**
     * Rate calculation type. Supported values:
     * + `"AUTO_RATE"`
     * + `"FALLBACK_RATE"`
     * + `"MANUAL_RATE"`
     * + `"NO_TAX_COLLECTED"`
     */
    rateType?: RateType;
}
/** @oneof */
export interface TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
}
export declare enum RateType {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
export declare enum ManualCalculationReason {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
export interface AutoTaxFallbackCalculationDetails {
    /**
     * Reason for fallback. Supported values:
     * + `"AUTO_TAX_FAILED"`
     * + `"AUTO_TAX_DEACTIVATED"`
     */
    fallbackReason?: FallbackReason;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError;
}
export declare enum FallbackReason {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
export interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
export interface AggregatedTaxBreakdown {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionTypeEnum?: JurisdictionType;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.000 signifies 200% tax. (Decimal value) */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: MultiCurrencyPrice;
}
export interface ShippingInformation {
    /** Shipping region. */
    region?: ShippingRegion;
    /** Selected shipping option. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption;
    /** All shipping options. */
    carrierServiceOptions?: CarrierServiceOption[];
}
export interface ShippingRegion {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
export interface SelectedCarrierServiceOption {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
export interface DeliveryLogistics {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
}
export interface PickupDetails {
    /** Pickup address. */
    address?: Address;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod;
}
export declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
export interface DeliveryTimeSlot {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
export interface SelectedCarrierServiceOptionPrices {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice;
}
export interface SelectedCarrierServiceOptionOtherCharge {
    /** Type of additional cost. */
    type?: ChargeType;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices;
}
export declare enum ChargeType {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
export interface DeliveryAllocation {
    /** The delivery option's carrier details, could be multiple if the delivery option is a combination of multiple carriers */
    deliveryCarrier?: Carrier;
    /** The delivery region that are relevant for this delivery solution. */
    deliveryRegion?: Region;
    /** Populated if the delivery solution is a partially supplied by this carrier. */
    applicableLineItems?: ApplicableLineItems;
}
export interface Carrier {
    /** The carrier app id */
    appId?: string | null;
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
}
export interface Region {
    /** The delivery region id. */
    _id?: string | null;
    /** The delivery region name. */
    name?: string | null;
}
export interface ApplicableLineItems {
    /** Line items that the delivery solution is for. */
    lineItemIds?: string[];
}
export interface CarrierServiceOption {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption[];
}
export interface ShippingOption {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics;
    /** Sipping price information. */
    cost?: ShippingPrice;
}
export interface ShippingPrice {
    /** Shipping price. */
    price?: MultiCurrencyPrice;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge[];
}
export interface OtherCharge {
    /** Type of additional cost. */
    type?: ChargeType;
    /** Price of added cost. */
    price?: MultiCurrencyPrice;
}
export interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: V1Coupon;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount;
    /** Discount rule */
    discountRule?: V1DiscountRule;
    /** Discount type. */
    discountType?: AppliedDiscountDiscountType;
    /**
     * IDs of the line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
export interface AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: V1Coupon;
    /** Merchant discount. */
    merchantDiscount?: V1MerchantDiscount;
    /** Discount rule */
    discountRule?: V1DiscountRule;
}
export declare enum AppliedDiscountDiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
export interface V1Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice;
    /** Coupon name. */
    name?: string;
}
export interface V1MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
export interface V1DiscountRule {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: V1DiscountRuleName;
    /** Discount value. */
    amount?: MultiCurrencyPrice;
}
export interface V1DiscountRuleName {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
export interface LineItemDiscount {
    /** ID of line item the discount applies to. */
    _id?: string;
    /** Discount value. */
    totalDiscountAmount?: MultiCurrencyPrice;
}
export interface CalculationErrors extends CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
    /** Tax calculation error. */
    taxCalculationError?: Details;
    /** Coupon calculation error. */
    couponCalculationError?: Details;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details;
}
/** @oneof */
export interface CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
}
export interface Details extends DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
    /**
     * Deprecated in APIs. Used to enable migration from rendering arbitrary tracing to rest response.
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
export interface DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
export interface ValidationError {
    fieldViolations?: FieldViolation[];
}
export declare enum RuleType {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT",
    EXACT_LENGTH = "EXACT_LENGTH",
    EXACT_SIZE = "EXACT_SIZE",
    REQUIRED_ONE_OF_FIELD = "REQUIRED_ONE_OF_FIELD"
}
export interface FieldViolation {
    field?: string;
    description?: string;
    violatedRule?: RuleType;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
export interface SystemError {
    /** Error code. */
    errorCode?: string | null;
}
export interface CarrierErrors {
    /** Carrier errors. */
    errors?: CarrierError[];
}
export interface CarrierError {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details;
}
export interface MembershipOptions {
    /** List of payment options that can be used. */
    eligibleMemberships?: Membership[];
    /** List of payment options that are owned by the member, but cannot be used due to reason provided. */
    invalidMemberships?: InvalidMembership[];
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: HostSelectedMembership[];
}
export interface Membership {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
export interface MembershipName {
    /** Membership name. */
    original?: string;
    /** Membership name translated into buyer's language. Defaults to `original` when not defined. */
    translated?: string | null;
}
export interface MembershipPaymentCredits {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
export interface InvalidMembership {
    /** Membership details. */
    membership?: Membership;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
export interface AdditionalFee {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
    /** the source the additional fee was added from */
    source?: AdditionalFeeSource;
}
export declare enum AdditionalFeeSource {
    UNKNOWN_ADDITIONAL_FEE_SOURCE = "UNKNOWN_ADDITIONAL_FEE_SOURCE",
    /** The additional fee was added by an additional fee service plugin */
    SERVICE_PLUGIN = "SERVICE_PLUGIN",
    /** The additional fee was added on the item either via the catalog or on custom line item */
    ITEM = "ITEM",
    /** The additional fee was added manually on the request */
    MANUAL = "MANUAL"
}
export interface Violation {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
export declare enum Severity {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
export interface Target extends TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** @oneof */
export interface TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** Available locations on the webpage */
export declare enum NameInOther {
    /** Default location, in case no specific location is specified. */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
export declare enum NameInLineItem {
    /** Default location, in case no specific location is specified. */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
export declare enum SuggestedFix {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
export interface Other {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther;
}
/** Specific line item violation. */
export interface TargetLineItem {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem;
    /** ID of the line item containing the violation. */
    _id?: string | null;
}
export interface RemoveLineItemsFromCurrentCartRequest {
    /** IDs of the line items to remove from the cart. */
    lineItemIds?: string[];
}
export interface RemoveLineItemsResponse {
    /** Updated cart. */
    cart?: Cart;
}
export interface CreateCheckoutFromCurrentCartRequest {
    /** **Required**. Sales channel type. */
    channelType?: ChannelType;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /** Mandatory when setting a billing or shipping address if the site visitor isn't logged in. */
    email?: string | null;
}
export declare enum ChannelType {
    /** Unspecified sales channel. This value is not supported. */
    UNSPECIFIED = "UNSPECIFIED",
    /** A web client. */
    WEB = "WEB",
    /** [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395). */
    POS = "POS",
    /** [eBay shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop). */
    EBAY = "EBAY",
    /** [Amazon shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop). */
    AMAZON = "AMAZON",
    /** Other sales platform. */
    OTHER_PLATFORM = "OTHER_PLATFORM",
    /** [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview). */
    WIX_APP_STORE = "WIX_APP_STORE",
    /** Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings) */
    WIX_INVOICES = "WIX_INVOICES",
    /** Wix merchant backoffice. */
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    /** Wish sales channel. */
    WISH = "WISH",
    /** [ClassPass sales channel](https://support.wix.com/en/article/wix-bookings-letting-clients-book-your-services-with-classpass). */
    CLASS_PASS = "CLASS_PASS",
    /** Global-E sales channel. */
    GLOBAL_E = "GLOBAL_E",
    /** [Facebook shop](https://support.wix.com/en/article/wix-stores-changes-to-facebook-shops). */
    FACEBOOK = "FACEBOOK",
    /** [Etsy sales channel](https://support.wix.com/en/article/wix-stores-request-adding-etsy-as-a-sales-channel). */
    ETSY = "ETSY",
    /** [TikTok sales channel](https://support.wix.com/en/article/wix-stores-request-adding-tiktok-as-a-sales-channel). */
    TIKTOK = "TIKTOK",
    /** [Faire marketplace integration](https://support.wix.com/en/article/wix-stores-creating-a-faire-store-using-the-faire-integration-app). */
    FAIRE_COM = "FAIRE_COM"
}
export interface CreateCheckoutResponse {
    /** The newly created checkout's ID. */
    checkoutId?: string;
}
export interface RemoveCouponFromCurrentCartRequest {
}
export interface RemoveCouponResponse {
    /** Updated cart. */
    cart?: Cart;
}
export interface UpdateCurrentCartLineItemQuantityRequest {
    /** Line item IDs and their new quantity. */
    lineItems?: LineItemQuantityUpdate[];
}
export interface LineItemQuantityUpdate {
    /** Line item ID. Required. */
    _id?: string;
    /** New quantity. Number must be 1 or higher. Required. */
    quantity?: number;
}
export interface UpdateLineItemsQuantityResponse {
    /** Updated cart. */
    cart?: Cart;
}
export interface EstimateCurrentCartTotalsRequest {
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
export interface DeleteCurrentCartRequest {
}
export interface DeleteCartResponse {
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entity?: string;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
export interface ActionEvent {
    body?: string;
}
export interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
export interface CreateCartRequest {
    /** Cart info. */
    cartInfo?: Cart;
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will apply to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput[];
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
export interface CreateCartResponse {
    /** Cart. */
    cart?: Cart;
}
export interface GetCartRequest {
    /** ID of the cart to retrieve. */
    _id: string;
}
export interface GetCartResponse {
    /** The requested cart. */
    cart?: Cart;
}
export interface GetCartByCheckoutIdRequest {
    /** Checkout ID. */
    _id?: string;
}
export interface GetCartByCheckoutIdResponse {
    /** The requested cart. */
    cart?: Cart;
}
export interface AddToCartRequest {
    /** Cart ID. */
    _id: string;
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
export interface RemoveLineItemsRequest {
    /** Cart ID. */
    _id: string;
    /** IDs of the line items to remove from the cart. */
    lineItemIds: string[];
}
export interface CreateCheckoutRequest {
    /** Cart ID. */
    _id: string;
    /** **Required**. Sales channel type. */
    channelType?: ChannelType;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /** Mandatory when setting a billing or shipping address if the site visitor isn't logged in. */
    email?: string | null;
}
export interface RemoveCouponRequest {
    /** Cart ID. */
    _id: string;
}
export interface UpdateLineItemsQuantityRequest {
    /** Cart ID. */
    _id: string;
    /** Line item IDs and their new quantity. */
    lineItems: LineItemQuantityUpdate[];
}
export interface EstimateTotalsRequest {
    /** Cart ID. */
    _id: string;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
export interface DeleteCartRequest {
    /** ID of the cart to delete. */
    _id: string;
}
export interface Empty {
}
interface CatalogReferenceNonNullableFields {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields {
    original: string;
}
interface MultiCurrencyPriceNonNullableFields {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface PlainTextValueNonNullableFields {
    original: string;
}
interface ColorNonNullableFields {
    original: string;
}
interface DescriptionLineNameNonNullableFields {
    original: string;
}
interface DescriptionLineNonNullableFields {
    plainText?: PlainTextValueNonNullableFields;
    colorInfo?: ColorNonNullableFields;
    plainTextValue?: PlainTextValueNonNullableFields;
    color: string;
    name?: DescriptionLineNameNonNullableFields;
    lineType: DescriptionLineType;
}
interface ItemAvailabilityInfoNonNullableFields {
    status: ItemAvailabilityStatus;
}
interface PhysicalPropertiesNonNullableFields {
    shippable: boolean;
}
interface GroupNonNullableFields {
    name: string;
}
interface ScopeNonNullableFields {
    namespace: string;
    group?: GroupNonNullableFields;
}
interface ItemTypeNonNullableFields {
    preset: ItemTypeItemType;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields {
    frequency: SubscriptionFrequency;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields {
    frequency: SubscriptionFrequency;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields;
}
interface TitleNonNullableFields {
    original: string;
}
interface DescriptionNonNullableFields {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
    title?: TitleNonNullableFields;
    description?: DescriptionNonNullableFields;
}
interface SecuredMediaNonNullableFields {
    _id: string;
    fileName: string;
    fileType: FileType;
}
interface PriceDescriptionNonNullableFields {
    original: string;
}
interface SelectedMembershipNonNullableFields {
    _id: string;
    appId: string;
}
interface PaymentOptionNonNullableFields {
    value: PaymentOptionType;
}
interface CatalogOverrideFieldsNonNullableFields {
    productName?: ProductNameNonNullableFields;
    descriptionLines: DescriptionLineNonNullableFields[];
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    image: string;
    paymentOption?: PaymentOptionNonNullableFields;
}
interface TaxableAddressNonNullableFields {
    addressType: TaxableAddressType;
}
interface PolicyNonNullableFields {
    content: string;
}
interface LineItemNonNullableFields {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields;
    productName?: ProductNameNonNullableFields;
    url: string;
    price?: MultiCurrencyPriceNonNullableFields;
    fullPrice?: MultiCurrencyPriceNonNullableFields;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields;
    descriptionLines: DescriptionLineNonNullableFields[];
    image: string;
    availability?: ItemAvailabilityInfoNonNullableFields;
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    couponScopes: ScopeNonNullableFields[];
    itemType?: ItemTypeNonNullableFields;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields;
    digitalFile?: SecuredMediaNonNullableFields;
    paymentOption: PaymentOptionType;
    priceDescription?: PriceDescriptionNonNullableFields;
    depositAmount?: MultiCurrencyPriceNonNullableFields;
    selectedMembership?: SelectedMembershipNonNullableFields;
    customLineItem: boolean;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields;
    savePaymentMethod: boolean;
    taxableAddress?: TaxableAddressNonNullableFields;
    policies: PolicyNonNullableFields[];
    membersOnly: boolean;
}
interface BuyerInfoNonNullableFields {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface CouponNonNullableFields {
    _id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface MerchantDiscountNonNullableFields {
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface DiscountRuleNameNonNullableFields {
    original: string;
}
interface DiscountRuleNonNullableFields {
    _id: string;
    name?: DiscountRuleNameNonNullableFields;
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface CartDiscountNonNullableFields {
    coupon?: CouponNonNullableFields;
    merchantDiscount?: MerchantDiscountNonNullableFields;
    discountRule?: DiscountRuleNonNullableFields;
    lineItemIds: string[];
    discountType: DiscountType;
}
interface StreetAddressNonNullableFields {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields;
}
interface VatIdNonNullableFields {
    _id: string;
    type: VatType;
}
interface FullAddressContactDetailsNonNullableFields {
    vatId?: VatIdNonNullableFields;
}
interface AddressWithContactNonNullableFields {
    address?: AddressNonNullableFields;
    contactDetails?: FullAddressContactDetailsNonNullableFields;
}
interface SelectedShippingOptionNonNullableFields {
    code: string;
}
export interface CartNonNullableFields {
    lineItems: LineItemNonNullableFields[];
    buyerInfo?: BuyerInfoNonNullableFields;
    currency: string;
    conversionCurrency: string;
    weightUnit: WeightUnit;
    subtotal?: MultiCurrencyPriceNonNullableFields;
    subtotalAfterDiscounts?: MultiCurrencyPriceNonNullableFields;
    discount?: MultiCurrencyPriceNonNullableFields;
    appliedDiscounts: CartDiscountNonNullableFields[];
    contactInfo?: AddressWithContactNonNullableFields;
    selectedShippingOption?: SelectedShippingOptionNonNullableFields;
}
export interface CreateCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
export interface UpdateCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
export interface GetCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
export interface AddToCartResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
export interface RemoveLineItemsResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
export interface CreateCheckoutResponseNonNullableFields {
    checkoutId: string;
}
export interface RemoveCouponResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
export interface UpdateLineItemsQuantityResponseNonNullableFields {
    cart?: CartNonNullableFields;
}
interface TaxRateBreakdownNonNullableFields {
    name: string;
    rate: string;
    tax?: MultiCurrencyPriceNonNullableFields;
    exemptAmount?: MultiCurrencyPriceNonNullableFields;
    exemptionIds: number[];
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
}
interface TaxBreakdownNonNullableFields {
    nonTaxableAmount?: MultiCurrencyPriceNonNullableFields;
    taxAmount?: MultiCurrencyPriceNonNullableFields;
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    jurisdictionType: JurisdictionType;
}
interface ItemTaxFullDetailsNonNullableFields {
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    taxRate: string;
    totalTax?: MultiCurrencyPriceNonNullableFields;
    rateBreakdown: TaxRateBreakdownNonNullableFields[];
    exemptAmount?: MultiCurrencyPriceNonNullableFields;
    taxBreakdown: TaxBreakdownNonNullableFields[];
}
interface LineItemPricesDataNonNullableFields {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    totalDiscount?: MultiCurrencyPriceNonNullableFields;
    price?: MultiCurrencyPriceNonNullableFields;
    priceBeforeDiscounts?: MultiCurrencyPriceNonNullableFields;
    lineItemPrice?: MultiCurrencyPriceNonNullableFields;
    fullPrice?: MultiCurrencyPriceNonNullableFields;
}
interface CalculatedLineItemNonNullableFields {
    lineItemId: string;
    pricesBreakdown?: LineItemPricesDataNonNullableFields;
    paymentOption: PaymentOptionType;
    taxableAddress?: TaxableAddressNonNullableFields;
}
interface PriceSummaryNonNullableFields {
    subtotal?: MultiCurrencyPriceNonNullableFields;
    shipping?: MultiCurrencyPriceNonNullableFields;
    tax?: MultiCurrencyPriceNonNullableFields;
    discount?: MultiCurrencyPriceNonNullableFields;
    total?: MultiCurrencyPriceNonNullableFields;
    additionalFees?: MultiCurrencyPriceNonNullableFields;
}
interface GiftCardNonNullableFields {
    _id: string;
    obfuscatedCode: string;
    amount?: MultiCurrencyPriceNonNullableFields;
    appId: string;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface AutoTaxFallbackCalculationDetailsNonNullableFields {
    fallbackReason: FallbackReason;
    error?: ApplicationErrorNonNullableFields;
}
interface TaxCalculationDetailsNonNullableFields {
    manualRateReason: ManualCalculationReason;
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetailsNonNullableFields;
    rateType: RateType;
}
interface AggregatedTaxBreakdownNonNullableFields {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionTypeEnum: JurisdictionType;
    rate: string;
    aggregatedTaxAmount?: MultiCurrencyPriceNonNullableFields;
    aggregatedTaxableAmount?: MultiCurrencyPriceNonNullableFields;
}
interface TaxSummaryNonNullableFields {
    taxableAmount?: MultiCurrencyPriceNonNullableFields;
    totalTax?: MultiCurrencyPriceNonNullableFields;
    manualTaxRate: string;
    calculationDetails?: TaxCalculationDetailsNonNullableFields;
    totalExempt?: MultiCurrencyPriceNonNullableFields;
    aggregatedTaxBreakdown: AggregatedTaxBreakdownNonNullableFields[];
}
interface ShippingRegionNonNullableFields {
    _id: string;
    name: string;
}
interface PickupDetailsNonNullableFields {
    address?: AddressNonNullableFields;
    businessLocation: boolean;
    pickupMethod: PickupMethod;
}
interface DeliveryLogisticsNonNullableFields {
    pickupDetails?: PickupDetailsNonNullableFields;
}
interface SelectedCarrierServiceOptionPricesNonNullableFields {
    totalPriceAfterTax?: MultiCurrencyPriceNonNullableFields;
    totalPriceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    totalDiscount?: MultiCurrencyPriceNonNullableFields;
    price?: MultiCurrencyPriceNonNullableFields;
}
interface SelectedCarrierServiceOptionOtherChargeNonNullableFields {
    type: ChargeType;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields;
}
interface CarrierNonNullableFields {
    code: string;
}
interface ApplicableLineItemsNonNullableFields {
    lineItemIds: string[];
}
interface DeliveryAllocationNonNullableFields {
    deliveryCarrier?: CarrierNonNullableFields;
    applicableLineItems?: ApplicableLineItemsNonNullableFields;
}
interface SelectedCarrierServiceOptionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields;
    cost?: SelectedCarrierServiceOptionPricesNonNullableFields;
    requestedShippingOption: boolean;
    otherCharges: SelectedCarrierServiceOptionOtherChargeNonNullableFields[];
    deliveryAllocations: DeliveryAllocationNonNullableFields[];
}
interface OtherChargeNonNullableFields {
    type: ChargeType;
    price?: MultiCurrencyPriceNonNullableFields;
}
interface ShippingPriceNonNullableFields {
    price?: MultiCurrencyPriceNonNullableFields;
    otherCharges: OtherChargeNonNullableFields[];
}
interface ShippingOptionNonNullableFields {
    code: string;
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields;
    cost?: ShippingPriceNonNullableFields;
    deliveryAllocations: DeliveryAllocationNonNullableFields[];
}
interface CarrierServiceOptionNonNullableFields {
    carrierId: string;
    shippingOptions: ShippingOptionNonNullableFields[];
}
interface ShippingInformationNonNullableFields {
    region?: ShippingRegionNonNullableFields;
    selectedCarrierServiceOption?: SelectedCarrierServiceOptionNonNullableFields;
    carrierServiceOptions: CarrierServiceOptionNonNullableFields[];
}
interface V1CouponNonNullableFields {
    _id: string;
    code: string;
    amount?: MultiCurrencyPriceNonNullableFields;
    name: string;
    couponType: string;
}
interface V1MerchantDiscountNonNullableFields {
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface V1DiscountRuleNameNonNullableFields {
    original: string;
}
interface V1DiscountRuleNonNullableFields {
    _id: string;
    name?: V1DiscountRuleNameNonNullableFields;
    amount?: MultiCurrencyPriceNonNullableFields;
}
interface LineItemDiscountNonNullableFields {
    _id: string;
    totalDiscountAmount?: MultiCurrencyPriceNonNullableFields;
}
interface AppliedDiscountNonNullableFields {
    coupon?: V1CouponNonNullableFields;
    merchantDiscount?: V1MerchantDiscountNonNullableFields;
    discountRule?: V1DiscountRuleNonNullableFields;
    discountType: AppliedDiscountDiscountType;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields[];
}
interface FieldViolationNonNullableFields {
    field: string;
    description: string;
    violatedRule: RuleType;
}
interface ValidationErrorNonNullableFields {
    fieldViolations: FieldViolationNonNullableFields[];
}
interface DetailsNonNullableFields {
    applicationError?: ApplicationErrorNonNullableFields;
    validationError?: ValidationErrorNonNullableFields;
}
interface CarrierErrorNonNullableFields {
    carrierId: string;
    error?: DetailsNonNullableFields;
}
interface CarrierErrorsNonNullableFields {
    errors: CarrierErrorNonNullableFields[];
}
interface CalculationErrorsNonNullableFields {
    generalShippingCalculationError?: DetailsNonNullableFields;
    carrierErrors?: CarrierErrorsNonNullableFields;
    taxCalculationError?: DetailsNonNullableFields;
    couponCalculationError?: DetailsNonNullableFields;
    giftCardCalculationError?: DetailsNonNullableFields;
    orderValidationErrors: ApplicationErrorNonNullableFields[];
    membershipError?: DetailsNonNullableFields;
    discountsCalculationError?: DetailsNonNullableFields;
}
interface MembershipNameNonNullableFields {
    original: string;
}
interface MembershipPaymentCreditsNonNullableFields {
    total: number;
    remaining: number;
}
interface MembershipNonNullableFields {
    _id: string;
    appId: string;
    name?: MembershipNameNonNullableFields;
    lineItemIds: string[];
    credits?: MembershipPaymentCreditsNonNullableFields;
}
interface InvalidMembershipNonNullableFields {
    membership?: MembershipNonNullableFields;
    reason: string;
}
interface HostSelectedMembershipNonNullableFields {
    _id: string;
    appId: string;
    lineItemIds: string[];
}
interface MembershipOptionsNonNullableFields {
    eligibleMemberships: MembershipNonNullableFields[];
    invalidMemberships: InvalidMembershipNonNullableFields[];
    selectedMemberships: HostSelectedMembershipNonNullableFields[];
}
interface AdditionalFeeNonNullableFields {
    name: string;
    price?: MultiCurrencyPriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    priceBeforeTax?: MultiCurrencyPriceNonNullableFields;
    priceAfterTax?: MultiCurrencyPriceNonNullableFields;
    lineItemIds: string[];
    source: AdditionalFeeSource;
}
interface OtherNonNullableFields {
    name: NameInOther;
}
interface TargetLineItemNonNullableFields {
    name: NameInLineItem;
    suggestedFix: SuggestedFix;
}
interface TargetNonNullableFields {
    other?: OtherNonNullableFields;
    lineItem?: TargetLineItemNonNullableFields;
}
interface ViolationNonNullableFields {
    severity: Severity;
    target?: TargetNonNullableFields;
}
export interface EstimateTotalsResponseNonNullableFields {
    cart?: CartNonNullableFields;
    calculatedLineItems: CalculatedLineItemNonNullableFields[];
    priceSummary?: PriceSummaryNonNullableFields;
    giftCard?: GiftCardNonNullableFields;
    taxSummary?: TaxSummaryNonNullableFields;
    shippingInfo?: ShippingInformationNonNullableFields;
    appliedDiscounts: AppliedDiscountNonNullableFields[];
    calculationErrors?: CalculationErrorsNonNullableFields;
    weightUnit: WeightUnit;
    currency: string;
    payNow?: PriceSummaryNonNullableFields;
    payLater?: PriceSummaryNonNullableFields;
    membershipOptions?: MembershipOptionsNonNullableFields;
    additionalFees: AdditionalFeeNonNullableFields[];
    violations: ViolationNonNullableFields[];
}
export interface BaseEventMetadata {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
export interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
export interface CartDeletedEnvelope {
    metadata: EventMetadata;
}
/**
 * Triggered when a cart is deleted.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.READ_CARTS
 * @webhook
 * @eventType wix.ecom.v1.cart_deleted
 */
export declare function onCartDeleted(handler: (event: CartDeletedEnvelope) => void | Promise<void>): void;
export interface CartUpdatedEnvelope {
    entity: Cart;
    metadata: EventMetadata;
}
/**
 * Triggered when a cart is updated.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.READ_CARTS
 * @webhook
 * @eventType wix.ecom.v1.cart_updated
 */
export declare function onCartUpdated(handler: (event: CartUpdatedEnvelope) => void | Promise<void>): void;
export interface CartCreatedEnvelope {
    entity: Cart;
    metadata: EventMetadata;
}
/**
 * Triggered when a cart is created.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionId ECOM.READ_CARTS
 * @webhook
 * @eventType wix.ecom.v1.cart_created
 */
export declare function onCartCreated(handler: (event: CartCreatedEnvelope) => void | Promise<void>): void;
/**
 * Creates a new cart.
 *
 *
 * The `createCart()` function returns a Promise that resolves to the new cart when it's created.
 *
 * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
 * @public
 * @requiredField options.customLineItems.descriptionLines
 * @requiredField options.customLineItems.descriptionLines.name
 * @requiredField options.customLineItems.itemType
 * @requiredField options.customLineItems.price
 * @requiredField options.customLineItems.productName
 * @requiredField options.customLineItems.quantity
 * @requiredField options.lineItems.catalogReference
 * @requiredField options.lineItems.quantity
 * @requiredField options.lineItems.selectedMembership._id
 * @requiredField options.lineItems.selectedMembership.appId
 * @param options - Cart creation options.
 * @permissionId ECOM.MODIFY_CARTS
 * @permissionId ECOM.ADMIN_MODIFY_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - Admin Permissions
 * @permissionScopeId SCOPE.ECOM.MANAGE-ADMIN
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - Cart.
 * @fqn com.wix.ecom.cart.api.v1.CartService.CreateCart
 */
export declare function createCart(options?: CreateCartOptions): Promise<Cart & CartNonNullableFields>;
export interface CreateCartOptions {
    /** Cart info. */
    cartInfo?: Cart;
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will apply to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput[];
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
/**
 * Updates a specified cart's properties.
 *
 *
 * The `updateCart()` function returns a Promise that resolves when the specified cart's properties are updated.
 *
 * > **Note:** When updating catalog items, `options.lineItems.catalogReference` is required.
 * @public
 * @requiredField _id
 * @requiredField options.customLineItems.descriptionLines
 * @requiredField options.customLineItems.descriptionLines.name
 * @requiredField options.customLineItems.itemType
 * @requiredField options.customLineItems.productName
 * @requiredField options.lineItems.catalogReference
 * @param options - Available options to use when updating a cart.
 * @param _id - ID of the cart to be updated.
 * @permissionId ECOM.MODIFY_CARTS
 * @permissionId ECOM.ADMIN_MODIFY_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - Admin Permissions
 * @permissionScopeId SCOPE.ECOM.MANAGE-ADMIN
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - Updated cart.
 * @fqn com.wix.ecom.cart.api.v1.CartService.UpdateCart
 */
export declare function updateCart(_id: string | null, options?: UpdateCartOptions): Promise<Cart & CartNonNullableFields>;
export interface UpdateCartOptions {
    /** The information for the cart being updated. */
    cartInfo: {
        /** ID of the cart to be updated. */
        _id?: string | null;
        /**
         * Line items.
         * @readonly
         */
        lineItems?: LineItem[];
        /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
        buyerNote?: string | null;
        /** Buyer information. */
        buyerInfo?: BuyerInfo;
        /**
         * Currency used for pricing.
         * @readonly
         */
        currency?: string;
        /**
         * Currency code used for all the converted prices that are returned.
         * For a site that supports multiple currencies, this is the currency the buyer selected.
         * @readonly
         */
        conversionCurrency?: string;
        /**
         * Language for communication with the buyer. Defaults to the site language.
         * For a site that supports multiple languages, this is the language the buyer selected.
         * @readonly
         */
        buyerLanguage?: string | null;
        /**
         * Site language in which original values are displayed.
         * @readonly
         */
        siteLanguage?: string | null;
        /**
         * Whether tax is included in line item prices.
         * @readonly
         */
        taxIncludedInPrices?: boolean | null;
        /**
         * Weight measurement unit - defaults to site's weight unit.
         * @readonly
         */
        weightUnit?: WeightUnit;
        /**
         * ID of the checkout that originated from this cart.
         * @readonly
         */
        checkoutId?: string | null;
        /**
         * Cart discounts.
         * @readonly
         */
        appliedDiscounts?: CartDiscount[];
        /**
         * Date and time the cart was created.
         * @readonly
         */
        _createdDate?: Date | null;
        /**
         * Date and time the cart was updated.
         * @readonly
         */
        _updatedDate?: Date | null;
        /** Contact info. */
        contactInfo?: AddressWithContact;
        /**
         * `overrideCheckoutUrl` allows the flexibility to redirect customers to a customized checkout page.
         *
         * This field overrides the `checkoutUrl` in a cart or checkout. `checkoutUrl` is used to send customers back to their checkouts. By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page. When `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
         */
        overrideCheckoutUrl?: string | null;
        /**
         * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
         * @readonly
         */
        purchaseFlowId?: string | null;
        /** Selected shipping option. */
        selectedShippingOption?: SelectedShippingOption;
    };
    /** The code of an existing coupon to apply to the cart. For more information, see the [Coupons API](https://www.wix.com/velo/reference/wix-marketing-backend/coupons). */
    couponCode?: string | null;
    /** Merchant discounts to apply to specific line items. If no `lineItemIds` are passed, the discount will be applied to the whole cart. */
    merchantDiscounts?: MerchantDiscountInput[];
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
/**
 * Retrieves a cart.
 *
 *
 * The `getCart()` function returns a Promise that resolves when the specified cart is retrieved.
 * @param _id - ID of the cart to retrieve.
 * @public
 * @requiredField _id
 * @permissionId ECOM.READ_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - The specified cart.
 * @fqn com.wix.ecom.cart.api.v1.CartService.GetCart
 */
export declare function getCart(_id: string): Promise<Cart & CartNonNullableFields>;
/**
 * Adds catalog line items to a cart.
 *
 *
 * The `addToCart()` function returns a Promise that resolves to the updated cart when the specified items have been added.
 *
 * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
 * @param _id - Cart ID.
 * @public
 * @requiredField _id
 * @requiredField options.customLineItems.descriptionLines
 * @requiredField options.customLineItems.descriptionLines.name
 * @requiredField options.customLineItems.itemType
 * @requiredField options.customLineItems.price
 * @requiredField options.customLineItems.productName
 * @requiredField options.customLineItems.quantity
 * @requiredField options.lineItems.catalogReference
 * @requiredField options.lineItems.selectedMembership._id
 * @requiredField options.lineItems.selectedMembership.appId
 * @param options - Items to be added to cart.
 * @permissionId ECOM.MODIFY_CARTS
 * @permissionId ECOM.ADMIN_MODIFY_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - Admin Permissions
 * @permissionScopeId SCOPE.ECOM.MANAGE-ADMIN
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - Cart.
 * @fqn com.wix.ecom.cart.api.v1.CartService.AddToCart
 */
export declare function addToCart(_id: string, options?: AddToCartOptions): Promise<AddToCartResponse & AddToCartResponseNonNullableFields>;
export interface AddToCartOptions {
    /** Catalog line items. */
    lineItems?: LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * To access and manage custom line items, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customLineItems?: CustomLineItem[];
}
/**
 * Removes line items from the specified cart.
 *
 *
 * The `removeLineItems()` function returns a Promise that resolves to the updated cart when the line items are removed from the specified cart.
 * @public
 * @requiredField _id
 * @requiredField lineItemIds
 * @param lineItemIds - IDs of the line items to remove from the cart.
 * @param _id - ID of the cart to remove line items from.
 * @permissionId ECOM.MODIFY_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - Updated cart.
 * @fqn com.wix.ecom.cart.api.v1.CartService.RemoveLineItems
 */
export declare function removeLineItems(_id: string, lineItemIds: string[]): Promise<RemoveLineItemsResponse & RemoveLineItemsResponseNonNullableFields>;
/**
 * Creates a checkout from a cart.
 *
 *
 * The `createCheckout()` function returns a Promise that resolves to the new checkout's ID when it's created.
 *
 * If a checkout was already created from the specified cart, that checkout will be
 * updated with any new information from the cart.
 *
 * > **Note:** `options.channelType` is a required field.
 * @param _id - Cart ID.
 * @public
 * @requiredField _id
 * @param options - Checkout creation options.
 * @permissionId ECOM.CREATE_CHECKOUT_FROM_CART
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - ID of the newly created checkout.
 * @fqn com.wix.ecom.cart.api.v1.CartService.CreateCheckout
 */
export declare function createCheckout(_id: string, options?: CreateCheckoutOptions): Promise<CreateCheckoutResponse & CreateCheckoutResponseNonNullableFields>;
export interface CreateCheckoutOptions {
    /** **Required**. Sales channel type. */
    channelType?: ChannelType;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address;
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /** Mandatory when setting a billing or shipping address if the site visitor isn't logged in. */
    email?: string | null;
}
/**
 * Removes the coupon from a specified cart.
 *
 *
 * The `removeCoupon()` function returns a Promise that resolves to the updated cart when the coupon is removed from the specified cart.
 * @param _id - Cart ID.
 * @public
 * @requiredField _id
 * @permissionId ECOM.MODIFY_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - Updated cart.
 * @fqn com.wix.ecom.cart.api.v1.CartService.RemoveCoupon
 */
export declare function removeCoupon(_id: string): Promise<RemoveCouponResponse & RemoveCouponResponseNonNullableFields>;
/**
 * Updates the quantity of one or more line items in a specified cart.
 *
 *
 * The `updateLineItemsQuantity()` function returns a Promise that resolves when the quantities of the specified cart's line items are updated.
 *
 * This endpoint is only for updating the quantity of line items. To entirely remove a line item from the cart, use [`removeLineItems()`](#removelineitems). To add a new line item to the cart, use [`addToCart()`](#addtocart).
 *
 * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity` is greater than the remaining stock, then the `quantity` returned in the response is the total amount of remaining stock.
 * @param _id - Cart ID.
 * @param lineItems - Line item IDs and their new quantity.
 * @public
 * @requiredField _id
 * @requiredField lineItems
 * @permissionId ECOM.MODIFY_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - Updated cart.
 * @fqn com.wix.ecom.cart.api.v1.CartService.UpdateLineItemsQuantity
 */
export declare function updateLineItemsQuantity(_id: string, lineItems: LineItemQuantityUpdate[]): Promise<UpdateLineItemsQuantityResponse & UpdateLineItemsQuantityResponseNonNullableFields>;
/**
 * Estimates the subtotal and total for current site visitor’s cart. Totals include tax and are based on the selected carrier service, shipping address, and billing information.
 *
 *
 * The `estimateTotals()` function returns a Promise that resolves when the estimated totals are generated.
 *
 * > **Note:** Not passing any `options` properties will only estimate the cart items price totals.
 * @param _id - Cart ID.
 * @public
 * @requiredField _id
 * @param options - Total estimation options.
 * @permissionId ECOM.READ_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - Cart's estimated totals.
 * @fqn com.wix.ecom.cart.api.v1.CartService.EstimateTotals
 */
export declare function estimateTotals(_id: string, options?: EstimateTotalsOptions): Promise<EstimateTotalsResponse & EstimateTotalsResponseNonNullableFields>;
export interface EstimateTotalsOptions {
    /** Selected shipping option. */
    selectedShippingOption?: SelectedShippingOption;
    /** Shipping address. Used for calculating tax and shipping (when applicable). */
    shippingAddress?: Address;
    /** Billing address. Used for calculating tax if all the items in the cart are not shippable. */
    billingAddress?: Address;
    /** The selected membership payment options and which line items they apply to. */
    selectedMemberships?: SelectedMemberships;
    /**
     * Whether to calculate tax in the calculation request.
     *
     * Default: `true`
     */
    calculateTax?: boolean | null;
    /**
     * Whether to calculate shipping in the calculation request.
     *
     * Default: `true`
     */
    calculateShipping?: boolean | null;
}
/**
 * Deletes a cart.
 *
 *
 * The `deleteCart()` function returns a Promise that resolves when the specified cart is deleted.
 * @public
 * @requiredField _id
 * @param _id - ID of the cart to delete.
 * @permissionId ECOM.MODIFY_CARTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - When the cart is deleted. Rejected - Error message.
 * @fqn com.wix.ecom.cart.api.v1.CartService.DeleteCart
 */
export declare function deleteCart(_id: string): Promise<void>;
export {};
