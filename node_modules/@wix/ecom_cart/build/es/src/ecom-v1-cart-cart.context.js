import { createCart as publicCreateCart, updateCart as publicUpdateCart, getCart as publicGetCart, addToCart as publicAddToCart, removeLineItems as publicRemoveLineItems, createCheckout as publicCreateCheckout, removeCoupon as publicRemoveCoupon, updateLineItemsQuantity as publicUpdateLineItemsQuantity, estimateTotals as publicEstimateTotals, deleteCart as publicDeleteCart, } from './ecom-v1-cart-cart.public.js';
import { createRESTModule } from '@wix/sdk-runtime/rest-modules';
import { createEventModule } from '@wix/sdk-runtime/event-definition-modules';
import { onCartDeleted as publicOnCartDeleted } from './ecom-v1-cart-cart.public.js';
import { onCartUpdated as publicOnCartUpdated } from './ecom-v1-cart-cart.public.js';
import { onCartCreated as publicOnCartCreated } from './ecom-v1-cart-cart.public.js';
export const createCart = /*#__PURE__*/ createRESTModule(publicCreateCart);
export const updateCart = /*#__PURE__*/ createRESTModule(publicUpdateCart);
export const getCart = /*#__PURE__*/ createRESTModule(publicGetCart);
export const addToCart = /*#__PURE__*/ createRESTModule(publicAddToCart);
export const removeLineItems = /*#__PURE__*/ createRESTModule(publicRemoveLineItems);
export const createCheckout = /*#__PURE__*/ createRESTModule(publicCreateCheckout);
export const removeCoupon = /*#__PURE__*/ createRESTModule(publicRemoveCoupon);
export const updateLineItemsQuantity = /*#__PURE__*/ createRESTModule(publicUpdateLineItemsQuantity);
export const estimateTotals = /*#__PURE__*/ createRESTModule(publicEstimateTotals);
export const deleteCart = /*#__PURE__*/ createRESTModule(publicDeleteCart);
/**
 * Triggered when a cart is deleted.
 */
export const onCartDeleted = createEventModule(publicOnCartDeleted);
/**
 * Triggered when a cart is updated.
 */
export const onCartUpdated = createEventModule(publicOnCartUpdated);
/**
 * Triggered when a cart is created.
 */
export const onCartCreated = createEventModule(publicOnCartCreated);
export { DescriptionLineType, ItemAvailabilityStatus, ItemTypeItemType, SubscriptionFrequency, FileType, PaymentOptionType, TaxableAddressType, WeightUnit, DiscountType, VatType, JurisdictionType, RateType, ManualCalculationReason, FallbackReason, PickupMethod, ChargeType, AppliedDiscountDiscountType, RuleType, AdditionalFeeSource, Severity, NameInOther, NameInLineItem, SuggestedFix, ChannelType, WebhookIdentityType, } from './ecom-v1-cart-cart.universal.js';
//# sourceMappingURL=ecom-v1-cart-cart.context.js.map