import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomApiV1CheckoutContentProvider from './ecom-api-v1-checkout-content-provider-checkout-content.http.js';
/**
 * Retrieves a CheckoutContent.
 * @public
 * @documentationMaturity preview
 * @requiredField identifiers
 * @requiredField identifiers.appId
 * @requiredField identifiers.componentId
 * @permissionId ECOM.CHECKOUT_CONTENT_READ
 * @applicableIdentity VISITOR
 * @fqn wix.ecom.checkout_content_spi_host.v1.CheckoutContentSPIHostService.GetCheckoutContent
 */
export async function getCheckoutContent(identifiers, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        appId: identifiers?.appId,
        componentId: identifiers?.componentId,
        languageCode: options?.languageCode,
    });
    const reqOpts = ambassadorWixEcomApiV1CheckoutContentProvider.getCheckoutContent(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                appId: '$[0].appId',
                componentId: '$[0].componentId',
                languageCode: '$[1].languageCode',
            },
            singleArgumentUnchanged: false,
        }, ['identifiers', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-api-v1-checkout-content-provider-checkout-content.universal.js.map