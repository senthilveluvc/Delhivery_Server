"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateExtendedFields = exports.queryShippingOptions = exports.deleteShippingOption = exports.updateShippingOption = exports.getShippingOption = exports.createShippingOption = exports.WebhookIdentityType = exports.SortOrder = exports.LogicalOperator = exports.ConditionType = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixEcomV1ShippingOption = __importStar(require("./ecom-v1-shipping-option-shipping-options.http.js"));
var ConditionType;
(function (ConditionType) {
    ConditionType["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
    ConditionType["BY_TOTAL_WEIGHT"] = "BY_TOTAL_WEIGHT";
    ConditionType["BY_TOTAL_PRICE"] = "BY_TOTAL_PRICE";
    ConditionType["BY_TOTAL_QUANTITY"] = "BY_TOTAL_QUANTITY";
})(ConditionType || (exports.ConditionType = ConditionType = {}));
var LogicalOperator;
(function (LogicalOperator) {
    LogicalOperator["UNKNOWN_LOGICAL_OPERATOR_TYPE"] = "UNKNOWN_LOGICAL_OPERATOR_TYPE";
    LogicalOperator["EQ"] = "EQ";
    LogicalOperator["GT"] = "GT";
    LogicalOperator["GTE"] = "GTE";
    LogicalOperator["LT"] = "LT";
    LogicalOperator["LTE"] = "LTE";
})(LogicalOperator || (exports.LogicalOperator = LogicalOperator = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Creates a ShippingOption.
 *
 * The request body must include shipping option and delivery region associated to.
 * @param shippingOption - ShippingOption to be created.
 * @public
 * @documentationMaturity preview
 * @requiredField shippingOption
 * @permissionId ECOM.SHIPPING_OPTION_CREATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns The created ShippingOption.
 * @fqn wix.ecom.delivery.v1.ShippingOptionService.CreateShippingOption
 */
async function createShippingOption(shippingOption) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        shippingOption: shippingOption,
    });
    const reqOpts = ambassadorWixEcomV1ShippingOption.createShippingOption(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)
            ?.shippingOption;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { shippingOption: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['shippingOption']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createShippingOption = createShippingOption;
/**
 * Retrieves a ShippingOption.
 * @param shippingOptionId - ID of the ShippingOption to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField shippingOptionId
 * @permissionId ECOM.SHIPPING_OPTION_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns The requested ShippingOption.
 * @fqn wix.ecom.delivery.v1.ShippingOptionService.GetShippingOption
 */
async function getShippingOption(shippingOptionId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        shippingOptionId: shippingOptionId,
    });
    const reqOpts = ambassadorWixEcomV1ShippingOption.getShippingOption(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)
            ?.shippingOption;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { shippingOptionId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['shippingOptionId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getShippingOption = getShippingOption;
/**
 * Updates a ShippingOption.
 *
 *
 * Each time the ShippingOption is updated,
 * `revision` increments by 1.
 * The current `revision` must be passed when updating the ShippingOption.
 * This ensures you're working with the latest ShippingOption
 * and prevents unintended overwrites.
 * @param _id - ShippingOption ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField shippingOption
 * @requiredField shippingOption.revision
 * @permissionId ECOM.SHIPPING_OPTION_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns Updated ShippingOption.
 * @fqn wix.ecom.delivery.v1.ShippingOptionService.UpdateShippingOption
 */
async function updateShippingOption(_id, shippingOption) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        shippingOption: { ...shippingOption, id: _id },
    });
    const reqOpts = ambassadorWixEcomV1ShippingOption.updateShippingOption(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data)
            ?.shippingOption;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: { shippingOption: '$[1]' },
            explicitPathsToArguments: { 'shippingOption.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'shippingOption']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateShippingOption = updateShippingOption;
/**
 * Deletes a ShippingOption.
 * Deleting a ShippingOption permanently removes them from the ShippingOption List.
 * @param shippingOptionId - Id of the ShippingOption to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField shippingOptionId
 * @permissionId ECOM.SHIPPING_OPTION_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.delivery.v1.ShippingOptionService.DeleteShippingOption
 */
async function deleteShippingOption(shippingOptionId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        shippingOptionId: shippingOptionId,
    });
    const reqOpts = ambassadorWixEcomV1ShippingOption.deleteShippingOption(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { shippingOptionId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['shippingOptionId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteShippingOption = deleteShippingOption;
/**
 * Retrieves a list of ShippingOptions, given the provided [paging, filtering, and sorting][1].
 *
 * Up to 1,000 ShippingOptions can be returned per request.
 *
 * To learn how to query ShippingOptions, see [API Query Language][2].
 *
 * [1]: https://dev.wix.com/api/rest/getting-started/sorting-and-paging
 * [2]: https://dev.wix.com/api/rest/getting-started/api-query-language
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionId ECOM.SHIPPING_OPTION_READ
 * @applicableIdentity APP
 * @fqn wix.ecom.delivery.v1.ShippingOptionService.QueryShippingOptions
 */
function queryShippingOptions() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixEcomV1ShippingOption.queryShippingOptions(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(data);
            return {
                items: transformedData?.shippingOptions,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
exports.queryShippingOptions = queryShippingOptions;
/**
 * Updates extended fields of a ShippingOption without incrementing revision
 * @param _id - ID of the entity to update.
 * @param namespace - Identifier for the app whose extended fields are being updated.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField namespace
 * @requiredField options
 * @requiredField options.namespaceData
 * @permissionId ECOM.SHIPPING_OPTION_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.delivery.v1.ShippingOptionService.UpdateExtendedFields
 */
async function updateExtendedFields(_id, namespace, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        namespace: namespace,
        namespaceData: options?.namespaceData,
    });
    const reqOpts = ambassadorWixEcomV1ShippingOption.updateExtendedFields(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                id: '$[0]',
                namespace: '$[1]',
                namespaceData: '$[2].namespaceData',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'namespace', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateExtendedFields = updateExtendedFields;
//# sourceMappingURL=ecom-v1-shipping-option-shipping-options.universal.js.map