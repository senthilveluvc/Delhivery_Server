export interface ShippingOption {
    /**
     * ShippingOption ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ShippingOption is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ShippingOption.
     *
     * Ignored when creating a ShippingOption.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ShippingOption was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ShippingOption was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Associated delivery region id. */
    deliveryRegionId?: string;
    /** Delivery option configured for the ShippingOption */
    title?: string | null;
    estimateDeliveryTime?: string | null;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates[];
    /** Data Extensions */
    extendedFields?: ExtendedFields;
}
export interface ConditionalRates {
    /**
     * there is an AND logic between all the conditions. Empty conditions means true.
     * For example: weight > 0 and weight <= 10
     */
    conditions?: Condition[];
    amount?: string;
}
export interface Condition {
    type?: ConditionType;
    /**
     * The value in respective to the condition type
     * Weight values should be in the same weight units of the store: KG / LB
     * Total price is according to the store currency
     * Quantity of items should be integers
     */
    value?: string;
    operator?: LogicalOperator;
}
export declare enum ConditionType {
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    BY_TOTAL_WEIGHT = "BY_TOTAL_WEIGHT",
    BY_TOTAL_PRICE = "BY_TOTAL_PRICE",
    BY_TOTAL_QUANTITY = "BY_TOTAL_QUANTITY"
}
export declare enum LogicalOperator {
    UNKNOWN_LOGICAL_OPERATOR_TYPE = "UNKNOWN_LOGICAL_OPERATOR_TYPE",
    EQ = "EQ",
    GT = "GT",
    GTE = "GTE",
    LT = "LT",
    LTE = "LTE"
}
export interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
export interface CreateShippingOptionRequest {
    /** ShippingOption to be created. */
    shippingOption: ShippingOption;
}
export interface CreateShippingOptionResponse {
    /** The created ShippingOption. */
    shippingOption?: ShippingOption;
}
export interface GetShippingOptionRequest {
    /** ID of the ShippingOption to retrieve. */
    shippingOptionId: string;
}
export interface GetShippingOptionResponse {
    /** The requested ShippingOption. */
    shippingOption?: ShippingOption;
}
export interface UpdateShippingOptionRequest {
    /** ShippingOption to be updated, may be partial. */
    shippingOption: ShippingOption;
}
export interface UpdateShippingOptionResponse {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption;
}
export interface DeleteShippingOptionRequest {
    /** Id of the ShippingOption to delete. */
    shippingOptionId: string;
}
export interface DeleteShippingOptionResponse {
}
export interface QueryShippingOptionsRequest {
    /** WQL expression. */
    query?: CursorQuery;
}
export interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
export interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface QueryShippingOptionsResponse {
    /** List of ShippingOptions. */
    shippingOptions?: ShippingOption[];
    /** Paging metadata */
    pagingMetadata?: CursorPagingMetadata;
}
export interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
export interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
export interface UpdateExtendedFieldsRequest {
    /** ID of the entity to update. */
    _id: string;
    /** Identifier for the app whose extended fields are being updated. */
    namespace: string;
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
export interface UpdateExtendedFieldsResponse {
    /** Updated ShippingOption. */
    shippingOption?: ShippingOption;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entity?: string;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
export interface ActionEvent {
    body?: string;
}
export interface Empty {
}
export interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface ConditionNonNullableFields {
    type: ConditionType;
    value: string;
    operator: LogicalOperator;
}
interface ConditionalRatesNonNullableFields {
    conditions: ConditionNonNullableFields[];
    amount: string;
}
export interface ShippingOptionNonNullableFields {
    deliveryRegionId: string;
    rates: ConditionalRatesNonNullableFields[];
}
export interface CreateShippingOptionResponseNonNullableFields {
    shippingOption?: ShippingOptionNonNullableFields;
}
export interface GetShippingOptionResponseNonNullableFields {
    shippingOption?: ShippingOptionNonNullableFields;
}
export interface UpdateShippingOptionResponseNonNullableFields {
    shippingOption?: ShippingOptionNonNullableFields;
}
export interface QueryShippingOptionsResponseNonNullableFields {
    shippingOptions: ShippingOptionNonNullableFields[];
}
export interface UpdateExtendedFieldsResponseNonNullableFields {
    shippingOption?: ShippingOptionNonNullableFields;
}
export interface BaseEventMetadata {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
export interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
export interface ShippingOptionCreatedEnvelope {
    entity: ShippingOption;
    metadata: EventMetadata;
}
/** @webhook
 * @eventType wix.ecom.v1.shipping_option_created
 * @documentationMaturity preview
 */
export declare function onShippingOptionCreated(handler: (event: ShippingOptionCreatedEnvelope) => void | Promise<void>): void;
export interface ShippingOptionDeletedEnvelope {
    entity: ShippingOption;
    metadata: EventMetadata;
}
/** @webhook
 * @eventType wix.ecom.v1.shipping_option_deleted
 * @documentationMaturity preview
 */
export declare function onShippingOptionDeleted(handler: (event: ShippingOptionDeletedEnvelope) => void | Promise<void>): void;
export interface ShippingOptionUpdatedEnvelope {
    entity: ShippingOption;
    metadata: EventMetadata;
}
/** @webhook
 * @eventType wix.ecom.v1.shipping_option_updated
 * @documentationMaturity preview
 */
export declare function onShippingOptionUpdated(handler: (event: ShippingOptionUpdatedEnvelope) => void | Promise<void>): void;
/**
 * Creates a ShippingOption.
 *
 * The request body must include shipping option and delivery region associated to.
 * @param shippingOption - ShippingOption to be created.
 * @public
 * @documentationMaturity preview
 * @requiredField shippingOption
 * @permissionId ECOM.SHIPPING_OPTION_CREATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns The created ShippingOption.
 * @fqn wix.ecom.delivery.v1.ShippingOptionService.CreateShippingOption
 */
export declare function createShippingOption(shippingOption: ShippingOption): Promise<ShippingOption & ShippingOptionNonNullableFields>;
/**
 * Retrieves a ShippingOption.
 * @param shippingOptionId - ID of the ShippingOption to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField shippingOptionId
 * @permissionId ECOM.SHIPPING_OPTION_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns The requested ShippingOption.
 * @fqn wix.ecom.delivery.v1.ShippingOptionService.GetShippingOption
 */
export declare function getShippingOption(shippingOptionId: string): Promise<ShippingOption & ShippingOptionNonNullableFields>;
/**
 * Updates a ShippingOption.
 *
 *
 * Each time the ShippingOption is updated,
 * `revision` increments by 1.
 * The current `revision` must be passed when updating the ShippingOption.
 * This ensures you're working with the latest ShippingOption
 * and prevents unintended overwrites.
 * @param _id - ShippingOption ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField shippingOption
 * @requiredField shippingOption.revision
 * @permissionId ECOM.SHIPPING_OPTION_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns Updated ShippingOption.
 * @fqn wix.ecom.delivery.v1.ShippingOptionService.UpdateShippingOption
 */
export declare function updateShippingOption(_id: string | null, shippingOption: UpdateShippingOption): Promise<ShippingOption & ShippingOptionNonNullableFields>;
export interface UpdateShippingOption {
    /**
     * ShippingOption ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the ShippingOption is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the ShippingOption.
     *
     * Ignored when creating a ShippingOption.
     * @readonly
     */
    revision?: string | null;
    /**
     * Date and time the ShippingOption was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the ShippingOption was last updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** Associated delivery region id. */
    deliveryRegionId?: string;
    /** Delivery option configured for the ShippingOption */
    title?: string | null;
    estimateDeliveryTime?: string | null;
    /** at runtime for a given shipment input, up to one rate (price) should be returned in an option. If more than one rate is valid then we return the lowest one. */
    rates?: ConditionalRates[];
    /** Data Extensions */
    extendedFields?: ExtendedFields;
}
/**
 * Deletes a ShippingOption.
 * Deleting a ShippingOption permanently removes them from the ShippingOption List.
 * @param shippingOptionId - Id of the ShippingOption to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField shippingOptionId
 * @permissionId ECOM.SHIPPING_OPTION_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.delivery.v1.ShippingOptionService.DeleteShippingOption
 */
export declare function deleteShippingOption(shippingOptionId: string): Promise<void>;
/**
 * Retrieves a list of ShippingOptions, given the provided [paging, filtering, and sorting][1].
 *
 * Up to 1,000 ShippingOptions can be returned per request.
 *
 * To learn how to query ShippingOptions, see [API Query Language][2].
 *
 * [1]: https://dev.wix.com/api/rest/getting-started/sorting-and-paging
 * [2]: https://dev.wix.com/api/rest/getting-started/api-query-language
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionId ECOM.SHIPPING_OPTION_READ
 * @applicableIdentity APP
 * @fqn wix.ecom.delivery.v1.ShippingOptionService.QueryShippingOptions
 */
export declare function queryShippingOptions(): ShippingOptionsQueryBuilder;
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
export interface ShippingOptionsQueryResult extends QueryCursorResult {
    items: ShippingOption[];
    query: ShippingOptionsQueryBuilder;
    next: () => Promise<ShippingOptionsQueryResult>;
    prev: () => Promise<ShippingOptionsQueryResult>;
}
export interface ShippingOptionsQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'deliveryRegionId', value: any) => ShippingOptionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'deliveryRegionId', value: any) => ShippingOptionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id' | 'deliveryRegionId', value: string) => ShippingOptionsQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'deliveryRegionId', value: any[]) => ShippingOptionsQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'deliveryRegionId', value: any) => ShippingOptionsQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'deliveryRegionId', value: boolean) => ShippingOptionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | 'deliveryRegionId'>) => ShippingOptionsQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | 'deliveryRegionId'>) => ShippingOptionsQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => ShippingOptionsQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => ShippingOptionsQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<ShippingOptionsQueryResult>;
}
/**
 * Updates extended fields of a ShippingOption without incrementing revision
 * @param _id - ID of the entity to update.
 * @param namespace - Identifier for the app whose extended fields are being updated.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField namespace
 * @requiredField options
 * @requiredField options.namespaceData
 * @permissionId ECOM.SHIPPING_OPTION_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.delivery.v1.ShippingOptionService.UpdateExtendedFields
 */
export declare function updateExtendedFields(_id: string, namespace: string, options: UpdateExtendedFieldsOptions): Promise<UpdateExtendedFieldsResponse & UpdateExtendedFieldsResponseNonNullableFields>;
export interface UpdateExtendedFieldsOptions {
    /** Data to update. Structured according to the [schema](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields#json-schema-for-extended-fields) defined when the extended fields were configured. */
    namespaceData: Record<string, any> | null;
}
export {};
