"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.voidTransaction = exports.redeemGiftCard = exports.getGiftCard = exports.Status = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixEcomV1GiftCard = __importStar(require("./ecom-v1-gift-card-gift-vouchers.http.js"));
var Status;
(function (Status) {
    Status["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    /** Gift card is active and can be used for purchases. */
    Status["VALID"] = "VALID";
    /** Gift card expiration date has passed and can no longer be used. */
    Status["EXPIRED"] = "EXPIRED";
    /** Gift card has been disabled by the merchant and can no longer be used. */
    Status["DISABLED"] = "DISABLED";
})(Status || (exports.Status = Status = {}));
/**
 * Retrieves a gift card.
 * @param code - Gift card code.
 * @public
 * @documentationMaturity preview
 * @requiredField code
 * @param options - Field options.
 * @permissionId ECOM.GIFT_CARD_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read Gift Cards
 * @permissionScopeId SCOPE.ECOM.READ-GIFT-CARDS
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.gift_cards_spi_host.v1.GiftCardsSpiHostService.GetGiftCard
 */
async function getGiftCard(code, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        code: code,
        context: options?.context,
    });
    const reqOpts = ambassadorWixEcomV1GiftCard.getGiftCard(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { code: '$[0]', context: '$[1].context' },
            singleArgumentUnchanged: false,
        }, ['code', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getGiftCard = getGiftCard;
/**
 * Redeems a gift card.
 * Creates a transaction and lowers the card balance by the transaction amount.
 * @param code - Gift card code.
 * @public
 * @documentationMaturity preview
 * @requiredField code
 * @requiredField options.amount
 * @requiredField options.amount.value
 * @requiredField options.appId
 * @param options - Field options. `amount` and `appId` **must** be passed.
 * @permissionId ECOM.GIFT_CARD_REDEEM
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Change Gift Card Balances
 * @permissionScopeId SCOPE.ECOM.CHANGE-GIFT-CARDS-BALANCE
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.gift_cards_spi_host.v1.GiftCardsSpiHostService.RedeemGiftCard
 */
async function redeemGiftCard(code, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        code: code,
        amount: options?.amount,
        orderId: options?.orderId,
        appId: options?.appId,
        context: options?.context,
    });
    const reqOpts = ambassadorWixEcomV1GiftCard.redeemGiftCard(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                code: '$[0]',
                amount: '$[1].amount',
                orderId: '$[1].orderId',
                appId: '$[1].appId',
                context: '$[1].context',
            },
            singleArgumentUnchanged: false,
        }, ['code', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.redeemGiftCard = redeemGiftCard;
/**
 * Voids a gift card transaction.
 * Transaction IDs are returned in Redeem Gift Card.
 * @param transactionId - Gift card transaction ID, as returned from Redeem Gift Card.
 * @public
 * @documentationMaturity preview
 * @requiredField options.appId
 * @requiredField transactionId
 * @param options - Field options. `appId` **must** be passed.
 * @permissionId ECOM.GIFT_CARD_TRANSACTION_VOID
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Change Gift Card Balances
 * @permissionScopeId SCOPE.ECOM.CHANGE-GIFT-CARDS-BALANCE
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.gift_cards_spi_host.v1.GiftCardsSpiHostService.VoidTransaction
 */
async function voidTransaction(transactionId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        transactionId: transactionId,
        appId: options?.appId,
        context: options?.context,
    });
    const reqOpts = ambassadorWixEcomV1GiftCard.voidTransaction(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                transactionId: '$[0]',
                appId: '$[1].appId',
                context: '$[1].context',
            },
            singleArgumentUnchanged: false,
        }, ['transactionId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.voidTransaction = voidTransaction;
//# sourceMappingURL=ecom-v1-gift-card-gift-vouchers.universal.js.map