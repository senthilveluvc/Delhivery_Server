"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.captureAuthorizedPayments = exports.voidAuthorizedPayments = exports.authorizeChargeWithSavedPaymentMethod = exports.refundPayments = exports.calculateRefund = exports.getOrderRefundability = void 0;
const timestamp_1 = require("@wix/sdk-runtime/transformations/timestamp");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
const rest_modules_1 = require("@wix/sdk-runtime/rest-modules");
function resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl(opts) {
    const domainToMappings = {
        'manage._base_domain_': [
            {
                srcPath: '/_api/order-billing/v1',
                destPath: '/v1/order-billing',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/ecom/v1/order-billing',
                destPath: '/v1/order-billing',
            },
        ],
    };
    return (0, rest_modules_1.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/ecom_order-billing';
/**
 * Retrieves refund information about an order's payments, line items, shipping, and additional fees.
 *
 * The following information is returned:
 * - Whether a payment is refundable; previously refunded amounts; possible refund amounts for each payment.
 * - Refundable and previously refunded quantities for each line item, as well as shipping and additional fees.
 */
function getOrderRefundability(payload) {
    function __getOrderRefundability({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order_billing',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.billing.v1.OrderBillingService.GetOrderRefundability',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
                protoPath: '/v1/order-billing/get-order-refundability',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __getOrderRefundability;
}
exports.getOrderRefundability = getOrderRefundability;
/** Calculates refund amounts for a given list of an order's line items, shipping, and additional fees. */
function calculateRefund(payload) {
    function __calculateRefund({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order_billing',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.billing.v1.OrderBillingService.CalculateRefund',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
                protoPath: '/v1/order-billing/calculate-refund',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __calculateRefund;
}
exports.calculateRefund = calculateRefund;
/**
 * Calls relevant payment providers and creates refund transactions for the requested payments.
 *
 * Refunds marked with `paymentRefunds.externalRefund = true` do not call payment providers and
 * only update the order's transactions records.
 */
function refundPayments(payload) {
    function __refundPayments({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order_billing',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.billing.v1.OrderBillingService.RefundPayments',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
                protoPath: '/v1/order-billing/refund-payments',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_1.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'refund.createdDate' },
                        { path: 'orderTransactions.payments.createdDate' },
                        { path: 'orderTransactions.payments.updatedDate' },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                        },
                        { path: 'orderTransactions.refunds.createdDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __refundPayments;
}
exports.refundPayments = refundPayments;
/**
 * Authorizes a payment using an order's saved payment method.
 *
 * Use the `delayedCaptureSettings` field to specify whether the payment should also be captured/voided immediately or at a later time.
 * Alternatively, the payment can be manually captured or voided using the Capture Authorized Payments or Void Authorized Payments methods.
 */
function authorizeChargeWithSavedPaymentMethod(payload) {
    function __authorizeChargeWithSavedPaymentMethod({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order_billing',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.billing.v1.OrderBillingService.AuthorizeChargeWithSavedPaymentMethod',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
                protoPath: '/v1/order-billing/authorize-charge-with-saved-payment-method',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_1.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'payment.createdDate' },
                        { path: 'payment.updatedDate' },
                        {
                            path: 'payment.regularPaymentDetails.authorizationDetails.authorizedDate',
                        },
                        {
                            path: 'payment.regularPaymentDetails.authorizationDetails.captures.createdDate',
                        },
                        {
                            path: 'payment.regularPaymentDetails.authorizationDetails.void.voidedDate',
                        },
                        {
                            path: 'payment.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                        },
                        { path: 'orderTransactions.payments.createdDate' },
                        { path: 'orderTransactions.payments.updatedDate' },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                        },
                        { path: 'orderTransactions.refunds.createdDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __authorizeChargeWithSavedPaymentMethod;
}
exports.authorizeChargeWithSavedPaymentMethod = authorizeChargeWithSavedPaymentMethod;
/** Voids an order's authorized payments. */
function voidAuthorizedPayments(payload) {
    function __voidAuthorizedPayments({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order_billing',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.billing.v1.OrderBillingService.VoidAuthorizedPayments',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
                protoPath: '/v1/order-billing/void-authorized-payments',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_1.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'orderTransactions.payments.createdDate' },
                        { path: 'orderTransactions.payments.updatedDate' },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                        },
                        { path: 'orderTransactions.refunds.createdDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __voidAuthorizedPayments;
}
exports.voidAuthorizedPayments = voidAuthorizedPayments;
/** Captures an order's authorized payments. */
function captureAuthorizedPayments(payload) {
    function __captureAuthorizedPayments({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order_billing',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.billing.v1.OrderBillingService.CaptureAuthorizedPayments',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersBillingV1OrderBillingServiceUrl({
                protoPath: '/v1/order-billing/capture-authorized-payments',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_1.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'orderTransactions.payments.createdDate' },
                        { path: 'orderTransactions.payments.updatedDate' },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                        },
                        { path: 'orderTransactions.refunds.createdDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __captureAuthorizedPayments;
}
exports.captureAuthorizedPayments = captureAuthorizedPayments;
//# sourceMappingURL=ecom-v1-order-billing-order-billing.http.js.map