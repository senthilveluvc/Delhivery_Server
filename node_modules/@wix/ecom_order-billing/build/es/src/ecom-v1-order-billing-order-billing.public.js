import { authorizeChargeWithSavedPaymentMethod as universalAuthorizeChargeWithSavedPaymentMethod, calculateRefund as universalCalculateRefund, captureAuthorizedPayments as universalCaptureAuthorizedPayments, getOrderRefundability as universalGetOrderRefundability, refundPayments as universalRefundPayments, voidAuthorizedPayments as universalVoidAuthorizedPayments, } from './ecom-v1-order-billing-order-billing.universal.js';
export const __metadata = { PACKAGE_NAME: '@wix/ecom' };
export function getOrderRefundability(httpClient) {
    return (orderId) => universalGetOrderRefundability(orderId, 
    // @ts-ignore
    { httpClient });
}
export function calculateRefund(httpClient) {
    return (orderId, options) => universalCalculateRefund(orderId, options, 
    // @ts-ignore
    { httpClient });
}
export function refundPayments(httpClient) {
    return (orderId, options) => universalRefundPayments(orderId, options, 
    // @ts-ignore
    { httpClient });
}
export function authorizeChargeWithSavedPaymentMethod(httpClient) {
    return (orderId, options) => universalAuthorizeChargeWithSavedPaymentMethod(orderId, options, 
    // @ts-ignore
    { httpClient });
}
export function voidAuthorizedPayments(httpClient) {
    return (orderId, options) => universalVoidAuthorizedPayments(orderId, options, 
    // @ts-ignore
    { httpClient });
}
export function captureAuthorizedPayments(httpClient) {
    return (orderId, options) => universalCaptureAuthorizedPayments(orderId, options, 
    // @ts-ignore
    { httpClient });
}
export { ActionType, AuthorizationCaptureStatus, AuthorizationVoidStatus, DurationUnit, ManuallyRefundableReason, MembershipPaymentStatus, NonRefundableReason, Reason, RefundStatus, RuleType, ScheduledAction, TransactionStatus, } from './ecom-v1-order-billing-order-billing.universal.js';
//# sourceMappingURL=ecom-v1-order-billing-order-billing.public.js.map