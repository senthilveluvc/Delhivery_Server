import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1OrderBilling from './ecom-v1-order-billing-order-billing.http.js';
export var ManuallyRefundableReason;
(function (ManuallyRefundableReason) {
    ManuallyRefundableReason["UNKNOWN_REASON"] = "UNKNOWN_REASON";
    ManuallyRefundableReason["EXPIRED"] = "EXPIRED";
    ManuallyRefundableReason["NOT_SUPPORTED"] = "NOT_SUPPORTED";
    ManuallyRefundableReason["OFFLINE"] = "OFFLINE";
    ManuallyRefundableReason["REQUIRES_CARD_READER"] = "REQUIRES_CARD_READER";
})(ManuallyRefundableReason || (ManuallyRefundableReason = {}));
export var NonRefundableReason;
(function (NonRefundableReason) {
    NonRefundableReason["UNKNOWN_REASON"] = "UNKNOWN_REASON";
    NonRefundableReason["ALREADY_REFUNDED"] = "ALREADY_REFUNDED";
    NonRefundableReason["PROVIDER_IS_DOWN"] = "PROVIDER_IS_DOWN";
    NonRefundableReason["NOT_PAID"] = "NOT_PAID";
    NonRefundableReason["ZERO_PRICE"] = "ZERO_PRICE";
    NonRefundableReason["DISABLED_BY_PROVIDER"] = "DISABLED_BY_PROVIDER";
    NonRefundableReason["PENDING_REFUND"] = "PENDING_REFUND";
    NonRefundableReason["FORBIDDEN"] = "FORBIDDEN";
    NonRefundableReason["TRANSACTION_NOT_FOUND"] = "TRANSACTION_NOT_FOUND";
    NonRefundableReason["ORDER_IS_PENDING"] = "ORDER_IS_PENDING";
    NonRefundableReason["ORDER_IS_REJECTED"] = "ORDER_IS_REJECTED";
})(NonRefundableReason || (NonRefundableReason = {}));
export var RuleType;
(function (RuleType) {
    RuleType["VALIDATION"] = "VALIDATION";
    RuleType["OTHER"] = "OTHER";
    RuleType["MAX"] = "MAX";
    RuleType["MIN"] = "MIN";
    RuleType["MAX_LENGTH"] = "MAX_LENGTH";
    RuleType["MIN_LENGTH"] = "MIN_LENGTH";
    RuleType["MAX_SIZE"] = "MAX_SIZE";
    RuleType["MIN_SIZE"] = "MIN_SIZE";
    RuleType["FORMAT"] = "FORMAT";
    RuleType["DECIMAL_LTE"] = "DECIMAL_LTE";
    RuleType["DECIMAL_GTE"] = "DECIMAL_GTE";
    RuleType["DECIMAL_LT"] = "DECIMAL_LT";
    RuleType["DECIMAL_GT"] = "DECIMAL_GT";
    RuleType["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
    RuleType["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
    RuleType["REQUIRED_FIELD"] = "REQUIRED_FIELD";
    RuleType["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
    RuleType["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
    RuleType["EXACT_LENGTH"] = "EXACT_LENGTH";
    RuleType["EXACT_SIZE"] = "EXACT_SIZE";
    RuleType["REQUIRED_ONE_OF_FIELD"] = "REQUIRED_ONE_OF_FIELD";
})(RuleType || (RuleType = {}));
/** Refund transaction status. */
export var RefundStatus;
(function (RefundStatus) {
    /** Refund was initiated on payment provider side. PENDING status was assigned by provider. */
    RefundStatus["PENDING"] = "PENDING";
    /** Refund transaction succeeded. */
    RefundStatus["SUCCEEDED"] = "SUCCEEDED";
    /** Refund transaction failed. */
    RefundStatus["FAILED"] = "FAILED";
    /** Refund request acknowledged, and will be executed soon. */
    RefundStatus["SCHEDULED"] = "SCHEDULED";
    /** Refund was initiated on payment provider side. */
    RefundStatus["STARTED"] = "STARTED";
})(RefundStatus || (RefundStatus = {}));
export var TransactionStatus;
(function (TransactionStatus) {
    TransactionStatus["UNDEFINED"] = "UNDEFINED";
    TransactionStatus["APPROVED"] = "APPROVED";
    TransactionStatus["PENDING"] = "PENDING";
    TransactionStatus["PENDING_MERCHANT"] = "PENDING_MERCHANT";
    TransactionStatus["CANCELED"] = "CANCELED";
    TransactionStatus["DECLINED"] = "DECLINED";
    TransactionStatus["REFUNDED"] = "REFUNDED";
    TransactionStatus["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
    TransactionStatus["AUTHORIZED"] = "AUTHORIZED";
    TransactionStatus["VOIDED"] = "VOIDED";
})(TransactionStatus || (TransactionStatus = {}));
export var AuthorizationCaptureStatus;
(function (AuthorizationCaptureStatus) {
    AuthorizationCaptureStatus["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    /** Capture operation still in progress. */
    AuthorizationCaptureStatus["PENDING"] = "PENDING";
    /** Capture operation succeeded. */
    AuthorizationCaptureStatus["SUCCEEDED"] = "SUCCEEDED";
    /** Capture operation failed. */
    AuthorizationCaptureStatus["FAILED"] = "FAILED";
})(AuthorizationCaptureStatus || (AuthorizationCaptureStatus = {}));
export var AuthorizationVoidStatus;
(function (AuthorizationVoidStatus) {
    AuthorizationVoidStatus["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    /** Void operation still in progress. */
    AuthorizationVoidStatus["PENDING"] = "PENDING";
    /** Void operation succeeded. */
    AuthorizationVoidStatus["SUCCEEDED"] = "SUCCEEDED";
    /** Void operation failed. */
    AuthorizationVoidStatus["FAILED"] = "FAILED";
})(AuthorizationVoidStatus || (AuthorizationVoidStatus = {}));
/** Reason the authorization was voided. */
export var Reason;
(function (Reason) {
    Reason["UNKNOWN_REASON"] = "UNKNOWN_REASON";
    /** Authorization was voided by user. */
    Reason["MANUAL"] = "MANUAL";
    /** Authorization passed execution date. */
    Reason["SCHEDULED"] = "SCHEDULED";
})(Reason || (Reason = {}));
export var ActionType;
(function (ActionType) {
    ActionType["UNKNOWN_ACTION_TYPE"] = "UNKNOWN_ACTION_TYPE";
    ActionType["VOID"] = "VOID";
    ActionType["CAPTURE"] = "CAPTURE";
})(ActionType || (ActionType = {}));
export var MembershipPaymentStatus;
(function (MembershipPaymentStatus) {
    /** Payment was charged. */
    MembershipPaymentStatus["CHARGED"] = "CHARGED";
    /** The attempt to charge the payment failed, for example, due to lack of credits. */
    MembershipPaymentStatus["CHARGE_FAILED"] = "CHARGE_FAILED";
})(MembershipPaymentStatus || (MembershipPaymentStatus = {}));
export var ScheduledAction;
(function (ScheduledAction) {
    ScheduledAction["UNSPECIFIED"] = "UNSPECIFIED";
    /** Whether payment will be auto-voided when duration passes. */
    ScheduledAction["VOID"] = "VOID";
    /** Whether payment will be auto-captured when duration passes. */
    ScheduledAction["CAPTURE"] = "CAPTURE";
})(ScheduledAction || (ScheduledAction = {}));
export var DurationUnit;
(function (DurationUnit) {
    DurationUnit["UNKNOWN_DURATION_UNIT"] = "UNKNOWN_DURATION_UNIT";
    DurationUnit["MINUTES"] = "MINUTES";
    DurationUnit["HOURS"] = "HOURS";
    DurationUnit["DAYS"] = "DAYS";
})(DurationUnit || (DurationUnit = {}));
/**
 * Retrieves refund information about an order's payments, line items, shipping, and additional fees.
 *
 * The following information is returned:
 * - Whether a payment is refundable; previously refunded amounts; possible refund amounts for each payment.
 * - Refundable and previously refunded quantities for each line item, as well as shipping and additional fees.
 * @param orderId - Order ID.
 * @public
 * @documentationMaturity preview
 * @requiredField orderId
 * @permissionId ECOM.ORDER_BILLING_GET_ORDER_REFUNDABILITY
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.billing.v1.OrderBillingService.GetOrderRefundability
 */
export async function getOrderRefundability(orderId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ orderId: orderId });
    const reqOpts = ambassadorWixEcomV1OrderBilling.getOrderRefundability(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Calculates refund amounts for a given list of an order's line items, shipping, and additional fees.
 * @param orderId - Order ID.
 * @public
 * @documentationMaturity preview
 * @requiredField options.refundItems.additionalFees.additionalFeeId
 * @requiredField options.refundItems.lineItems.lineItemId
 * @requiredField options.refundItems.lineItems.quantity
 * @requiredField orderId
 * @permissionId ECOM.ORDER_BILLING_CALCULATE_REFUND
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.billing.v1.OrderBillingService.CalculateRefund
 */
export async function calculateRefund(orderId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        orderId: orderId,
        refundItems: options?.refundItems,
    });
    const reqOpts = ambassadorWixEcomV1OrderBilling.calculateRefund(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                orderId: '$[0]',
                refundItems: '$[1].refundItems',
            },
            singleArgumentUnchanged: false,
        }, ['orderId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Calls relevant payment providers and creates refund transactions for the requested payments.
 *
 * Refunds marked with `paymentRefunds.externalRefund = true` do not call payment providers and
 * only update the order's transactions records.
 * @param orderId - Order ID.
 * @public
 * @documentationMaturity preview
 * @requiredField options.paymentRefunds
 * @requiredField options.paymentRefunds.paymentId
 * @requiredField options.refundItems.additionalFees.additionalFeeId
 * @requiredField options.refundItems.lineItems.lineItemId
 * @requiredField options.refundItems.lineItems.quantity
 * @requiredField options.sideEffects.restock.lineItems.lineItemId
 * @requiredField options.sideEffects.restock.lineItems.quantity
 * @requiredField orderId
 * @permissionId ECOM.ORDER_BILLING_REFUND_PAYMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.billing.v1.OrderBillingService.RefundPayments
 */
export async function refundPayments(orderId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        orderId: orderId,
        paymentRefunds: options?.paymentRefunds,
        sideEffects: options?.sideEffects,
        refundItems: options?.refundItems,
        customerReason: options?.customerReason,
    });
    const reqOpts = ambassadorWixEcomV1OrderBilling.refundPayments(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                orderId: '$[0]',
                paymentRefunds: '$[1].paymentRefunds',
                sideEffects: '$[1].sideEffects',
                refundItems: '$[1].refundItems',
                customerReason: '$[1].customerReason',
            },
            singleArgumentUnchanged: false,
        }, ['orderId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Authorizes a payment using an order's saved payment method.
 *
 * Use the `delayedCaptureSettings` field to specify whether the payment should also be captured/voided immediately or at a later time.
 * Alternatively, the payment can be manually captured or voided using the Capture Authorized Payments or Void Authorized Payments methods.
 * @param orderId - Order ID.
 *
 * The order must have a saved payment method associated.
 * Pass the order ID to the List Transactions For Single Order method and search the response for a payment with `regularPaymentDetails.savedPaymentMethod: true`.
 * If no saved payment exists, the call will fail.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.amount
 * @requiredField options.amount.amount
 * @requiredField options.currency
 * @requiredField options.delayedCaptureSettings
 * @requiredField options.delayedCaptureSettings.scheduledAction
 * @requiredField orderId
 * @permissionId ECOM.ORDER_BILLING_AUTHORIZE_CHARGE_WITH_SAVED_PAYMENT_METHOD
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.billing.v1.OrderBillingService.AuthorizeChargeWithSavedPaymentMethod
 */
export async function authorizeChargeWithSavedPaymentMethod(orderId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        orderId: orderId,
        amount: options?.amount,
        currency: options?.currency,
        delayedCaptureSettings: options?.delayedCaptureSettings,
    });
    const reqOpts = ambassadorWixEcomV1OrderBilling.authorizeChargeWithSavedPaymentMethod(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                orderId: '$[0]',
                amount: '$[1].amount',
                currency: '$[1].currency',
                delayedCaptureSettings: '$[1].delayedCaptureSettings',
            },
            singleArgumentUnchanged: false,
        }, ['orderId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Voids an order's authorized payments.
 * @param orderId - Order ID.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.paymentIds
 * @requiredField orderId
 * @permissionId ECOM.ORDER_BILLING_VOID_AUTHORIZED_PAYMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.billing.v1.OrderBillingService.VoidAuthorizedPayments
 */
export async function voidAuthorizedPayments(orderId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        orderId: orderId,
        paymentIds: options?.paymentIds,
    });
    const reqOpts = ambassadorWixEcomV1OrderBilling.voidAuthorizedPayments(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                orderId: '$[0]',
                paymentIds: '$[1].paymentIds',
            },
            singleArgumentUnchanged: false,
        }, ['orderId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Captures an order's authorized payments.
 * @param orderId - Order ID.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.payments
 * @requiredField options.payments.paymentId
 * @requiredField orderId
 * @permissionId ECOM.ORDER_BILLING_CAPTURE_AUTHORIZED_PAYMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.billing.v1.OrderBillingService.CaptureAuthorizedPayments
 */
export async function captureAuthorizedPayments(orderId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        orderId: orderId,
        payments: options?.payments,
    });
    const reqOpts = ambassadorWixEcomV1OrderBilling.captureAuthorizedPayments(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                orderId: '$[0]',
                payments: '$[1].payments',
            },
            singleArgumentUnchanged: false,
        }, ['orderId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-order-billing-order-billing.universal.js.map