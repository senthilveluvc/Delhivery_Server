import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1ShippoConfiguration from './ecom-v1-shippo-configuration-shippo-configurations.http.js';
// @ts-ignore
import { transformSDKAddressToRESTAddress } from '@wix/sdk-runtime/transformations/address';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var DomesticService;
(function (DomesticService) {
    DomesticService["UNKNOWN_DOMESTIC_SERVICE"] = "UNKNOWN_DOMESTIC_SERVICE";
    DomesticService["GROUND_ADVANTAGE"] = "GROUND_ADVANTAGE";
    DomesticService["PRIORITY_MAIL"] = "PRIORITY_MAIL";
    DomesticService["PRIORITY_MAIL_EXPRESS"] = "PRIORITY_MAIL_EXPRESS";
})(DomesticService || (DomesticService = {}));
export var CalculationType;
(function (CalculationType) {
    CalculationType["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
    CalculationType["FIXED"] = "FIXED";
    CalculationType["PERCENTAGE"] = "PERCENTAGE";
})(CalculationType || (CalculationType = {}));
export var InternationalService;
(function (InternationalService) {
    InternationalService["UNKNOWN_INTERNATIONAL_SERVICE"] = "UNKNOWN_INTERNATIONAL_SERVICE";
    InternationalService["FIRST_CLASS_PACKAGE_INTERNATIONAL"] = "FIRST_CLASS_PACKAGE_INTERNATIONAL";
    InternationalService["PRIORITY_MAIL_INTERNATIONAL"] = "PRIORITY_MAIL_INTERNATIONAL";
    InternationalService["PRIORITY_MAIL_EXPRESS_INTERNATIONAL"] = "PRIORITY_MAIL_EXPRESS_INTERNATIONAL";
})(InternationalService || (InternationalService = {}));
export var PackageType;
(function (PackageType) {
    PackageType["UNKNOWN_PACKAGE_TYPE"] = "UNKNOWN_PACKAGE_TYPE";
    PackageType["CUSTOM"] = "CUSTOM";
    PackageType["FLAT_RATE_ENVELOPE"] = "FLAT_RATE_ENVELOPE";
    PackageType["PADDED_FLAT_RATE_ENVELOPE"] = "PADDED_FLAT_RATE_ENVELOPE";
    PackageType["SMALL_FLAT_RATE_BOX"] = "SMALL_FLAT_RATE_BOX";
    PackageType["MEDIUM_FLAT_RATE_BOX_1"] = "MEDIUM_FLAT_RATE_BOX_1";
    PackageType["MEDIUM_FLAT_RATE_BOX_2"] = "MEDIUM_FLAT_RATE_BOX_2";
    PackageType["LARGE_FLAT_RATE_BOX"] = "LARGE_FLAT_RATE_BOX";
})(PackageType || (PackageType = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a ShippoConfiguration.
 * @param shippoConfiguration - ShippoConfiguration to be created.
 * @public
 * @documentationMaturity preview
 * @requiredField shippoConfiguration
 * @requiredField shippoConfiguration.deliveryRegionId
 * @requiredField shippoConfiguration.osLocationId
 * @requiredField shippoConfiguration.packageDetails
 * @requiredField shippoConfiguration.packageDetails.dimensions.height
 * @requiredField shippoConfiguration.packageDetails.dimensions.length
 * @requiredField shippoConfiguration.packageDetails.dimensions.width
 * @requiredField shippoConfiguration.packageType
 * @permissionId ECOM.SHIPPO_CONFIGURATION_CREATE
 * @returns The created ShippoConfiguration.
 * @fqn wix.ecom.delivery.v1.ShippoService.CreateShippoConfiguration
 */
export async function createShippoConfiguration(shippoConfiguration, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        shippoConfiguration: shippoConfiguration,
        backupRate: options?.backupRate,
    }), [
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [{ path: 'shippoConfiguration.shipFromAddress' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1ShippoConfiguration.createShippoConfiguration(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'shippoConfiguration.shipFromAddress' }],
            },
        ]))?.shippoConfiguration;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                shippoConfiguration: '$[0]',
                backupRate: '$[1].backupRate',
            },
            singleArgumentUnchanged: false,
        }, ['shippoConfiguration', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a ShippoConfiguration.
 * @param shippoConfigurationId - ID of the ShippoConfiguration to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField shippoConfigurationId
 * @permissionId ECOM.SHIPPO_CONFIGURATION_READ
 * @returns The requested ShippoConfiguration.
 * @fqn wix.ecom.delivery.v1.ShippoService.GetShippoConfiguration
 */
export async function getShippoConfiguration(shippoConfigurationId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        shippoConfigurationId: shippoConfigurationId,
    });
    const reqOpts = ambassadorWixEcomV1ShippoConfiguration.getShippoConfiguration(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'shippoConfiguration.shipFromAddress' }],
            },
        ]))?.shippoConfiguration;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { shippoConfigurationId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['shippoConfigurationId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a ShippoConfiguration.
 * @param _id - ShippoConfiguration ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField shippoConfiguration
 * @requiredField shippoConfiguration.revision
 * @permissionId ECOM.SHIPPO_CONFIGURATION_UPDATE
 * @returns Updated ShippoConfiguration.
 * @fqn wix.ecom.delivery.v1.ShippoService.UpdateShippoConfiguration
 */
export async function updateShippoConfiguration(_id, shippoConfiguration) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        shippoConfiguration: { ...shippoConfiguration, id: _id },
    }), [
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [{ path: 'shippoConfiguration.shipFromAddress' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1ShippoConfiguration.updateShippoConfiguration(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'shippoConfiguration.shipFromAddress' }],
            },
        ]))?.shippoConfiguration;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { shippoConfiguration: '$[1]' },
            explicitPathsToArguments: { 'shippoConfiguration.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'shippoConfiguration']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a ShippoConfiguration.
 * @param shippoConfigurationId - ID of the ShippoConfiguration to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField shippoConfigurationId
 * @permissionId ECOM.SHIPPO_CONFIGURATION_DELETE
 * @fqn wix.ecom.delivery.v1.ShippoService.DeleteShippoConfiguration
 */
export async function deleteShippoConfiguration(shippoConfigurationId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        shippoConfigurationId: shippoConfigurationId,
    });
    const reqOpts = ambassadorWixEcomV1ShippoConfiguration.deleteShippoConfiguration(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { shippoConfigurationId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['shippoConfigurationId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of ShippoConfigurations, given the provided [paging, filtering, and sorting][1].
 *
 * Up to 1,000 ShippoConfigurations can be returned per request.
 *
 * To learn how to query ShippoConfigurations, see [API Query Language][2].
 *
 * [1]: https://dev.wix.com/api/rest/getting-started/sorting-and-paging
 * [2]: https://dev.wix.com/api/rest/getting-started/api-query-language
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.SHIPPO_CONFIGURATION_READ
 * @fqn wix.ecom.delivery.v1.ShippoService.QueryShippoConfigurations
 */
export function queryShippoConfigurations() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixEcomV1ShippoConfiguration.queryShippoConfigurations(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(transformPaths(data, [
                {
                    transformFn: transformRESTAddressToSDKAddress,
                    paths: [{ path: 'shippoConfigurations.shipFromAddress' }],
                },
            ]));
            return {
                items: transformedData?.shippoConfigurations,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Updates extended fields of a ShippoConfiguration without incrementing revision
 * @param _id - ID of the entity to update.
 * @param namespace - Identifier for the app whose extended fields are being updated.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField namespace
 * @requiredField options
 * @requiredField options.namespaceData
 * @permissionId ECOM.SHIPPO_CONFIGURATION_UPDATE
 * @fqn wix.ecom.delivery.v1.ShippoService.UpdateExtendedFields
 */
export async function updateExtendedFields(_id, namespace, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        id: _id,
        namespace: namespace,
        namespaceData: options?.namespaceData,
    });
    const reqOpts = ambassadorWixEcomV1ShippoConfiguration.updateExtendedFields(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'shippoConfiguration.shipFromAddress' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                id: '$[0]',
                namespace: '$[1]',
                namespaceData: '$[2].namespaceData',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'namespace', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-shippo-configuration-shippo-configurations.universal.js.map