import { HttpClient } from '@wix/sdk-types';
import { AddLineItemsToDraftOrderOptions, AddLineItemsToDraftOrderResponse, AddLineItemsToDraftOrderResponseNonNullableFields, CommitDraftOrderOptions, CommitDraftOrderResponse, CommitDraftOrderResponseNonNullableFields, CreateCustomAdditionalFeesOptions, CreateCustomAdditionalFeesResponse, CreateCustomAdditionalFeesResponseNonNullableFields, CreateCustomDiscountsOptions, CreateCustomDiscountsResponse, CreateCustomDiscountsResponseNonNullableFields, CreateDraftOrderResponse, CreateDraftOrderResponseNonNullableFields, CreateEmptyDraftOrderResponse, CreateEmptyDraftOrderResponseNonNullableFields, DeleteCustomAdditionalFeesResponse, DeleteCustomAdditionalFeesResponseNonNullableFields, DeleteCustomDiscountsResponse, DeleteCustomDiscountsResponseNonNullableFields, DraftOrdersQueryBuilder, GetDraftOrderResponse, GetDraftOrderResponseNonNullableFields, GetOrderDraftabilityStatusResponse, GetOrderDraftabilityStatusResponseNonNullableFields, IdAndApplied, SetAdditionalFeesResponse, SetAdditionalFeesResponseNonNullableFields, SetDiscountsResponse, SetDiscountsResponseNonNullableFields, UpdateLineItemsOptions, UpdateLineItemsResponse, UpdateLineItemsResponseNonNullableFields } from './ecom-v1-draft-order-draft-orders.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createDraftOrder(httpClient: HttpClient): CreateDraftOrderSignature;
interface CreateDraftOrderSignature {
    /**
     * Creates or gets a draft order.
     *
     * When passing the ID of an order that is already in draft, the existing draft order will be returned.
     * To complete a draft and update the order, call [Commit Draft Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/draft-orders/commit-draft-order).
     * @param - To create a draft from existing order, provide its id. Otherwise, an empty draft will be created.
     */
    (orderId: string | null): Promise<CreateDraftOrderResponse & CreateDraftOrderResponseNonNullableFields>;
}
export declare function createEmptyDraftOrder(httpClient: HttpClient): CreateEmptyDraftOrderSignature;
interface CreateEmptyDraftOrderSignature {
    /**
     * Creates an empty draft order.
     */
    (): Promise<CreateEmptyDraftOrderResponse & CreateEmptyDraftOrderResponseNonNullableFields>;
}
export declare function addLineItemsToDraftOrder(httpClient: HttpClient): AddLineItemsToDraftOrderSignature;
interface AddLineItemsToDraftOrderSignature {
    /**
     * Adds line items to a draft order.
     * @param - The draft order id
     */
    (draftOrderId: string, options?: AddLineItemsToDraftOrderOptions | undefined): Promise<AddLineItemsToDraftOrderResponse & AddLineItemsToDraftOrderResponseNonNullableFields>;
}
export declare function updateLineItems(httpClient: HttpClient): UpdateLineItemsSignature;
interface UpdateLineItemsSignature {
    /**
     * Updates a draft order's line items.
     *
     * Using this API, you can update a line item's quantity, price, and description.
     * > **Notes:**
     * > + Passing a quantity of `0` will remove the line item.
     * > + Price cannot be updated for line items with `paymentOption: MEMBERSHIP`.
     * > + Quantity cannot be decreased fulfilled line items. To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     * @param - The draft order id
     */
    (draftOrderId: string, options?: UpdateLineItemsOptions | undefined): Promise<UpdateLineItemsResponse & UpdateLineItemsResponseNonNullableFields>;
}
export declare function setDiscounts(httpClient: HttpClient): SetDiscountsSignature;
interface SetDiscountsSignature {
    /**
     * Sets and enables or disables discounts on a draft order.
     *
     * Any discounts not passed will not change.
     * @param - The draft order id
     * @param - The discount ids to opt-in. all existing discounts not listed are to be opted-out.
     */
    (draftOrderId: string, discounts: IdAndApplied[]): Promise<SetDiscountsResponse & SetDiscountsResponseNonNullableFields>;
}
export declare function createCustomDiscounts(httpClient: HttpClient): CreateCustomDiscountsSignature;
interface CreateCustomDiscountsSignature {
    /**
     * Adds merchant discounts to the order.
     * @param - The draft order id
     */
    (draftOrderId: string, options?: CreateCustomDiscountsOptions | undefined): Promise<CreateCustomDiscountsResponse & CreateCustomDiscountsResponseNonNullableFields>;
}
export declare function deleteCustomDiscounts(httpClient: HttpClient): DeleteCustomDiscountsSignature;
interface DeleteCustomDiscountsSignature {
    /**
     * Remove custom discounts from the order.
     * @param - The draft order id
     * @param - The discounts to remove
     */
    (draftOrderId: string, discountIds: string[]): Promise<DeleteCustomDiscountsResponse & DeleteCustomDiscountsResponseNonNullableFields>;
}
export declare function setAdditionalFees(httpClient: HttpClient): SetAdditionalFeesSignature;
interface SetAdditionalFeesSignature {
    /**
     * Set which additional fees existing on the draft order are to be opt-in.
     * All existing additional fees not provided on the call are opted-out.
     * @param - The draft order id
     * @param - The additional fees ids to opt-in. all existing additional fees not listed are to be opted-out
     */
    (draftOrderId: string, additionalFees: IdAndApplied[]): Promise<SetAdditionalFeesResponse & SetAdditionalFeesResponseNonNullableFields>;
}
export declare function createCustomAdditionalFees(httpClient: HttpClient): CreateCustomAdditionalFeesSignature;
interface CreateCustomAdditionalFeesSignature {
    /**
     * Create custom additional fees to the order.
     * added additional fees are by default opted-out.
     * To opt-in them, please call SetAdditionalFees with the added additional fee ids.
     * @param - The draft order id
     */
    (draftOrderId: string, options?: CreateCustomAdditionalFeesOptions | undefined): Promise<CreateCustomAdditionalFeesResponse & CreateCustomAdditionalFeesResponseNonNullableFields>;
}
export declare function deleteCustomAdditionalFees(httpClient: HttpClient): DeleteCustomAdditionalFeesSignature;
interface DeleteCustomAdditionalFeesSignature {
    /**
     * Remove custom additional fees from the order.
     * @param - The draft order id
     * @param - The additional fees to remove
     */
    (draftOrderId: string, customAdditionalFees: string[]): Promise<DeleteCustomAdditionalFeesResponse & DeleteCustomAdditionalFeesResponseNonNullableFields>;
}
export declare function setShippingInfo(httpClient: HttpClient): SetShippingInfoSignature;
interface SetShippingInfoSignature {
    /**
     * Sets shipping info to a draft order.
     */
    (): Promise<void>;
}
export declare function setBuyerInfo(httpClient: HttpClient): SetBuyerInfoSignature;
interface SetBuyerInfoSignature {
    /**
     * Sets buyer info to a draft order.
     */
    (): Promise<void>;
}
export declare function setRecipientInfo(httpClient: HttpClient): SetRecipientInfoSignature;
interface SetRecipientInfoSignature {
    /**
     * Sets recipient info to a draft order.
     */
    (): Promise<void>;
}
export declare function setBillingInfo(httpClient: HttpClient): SetBillingInfoSignature;
interface SetBillingInfoSignature {
    /**
     * Sets billing info to a draft order.
     */
    (): Promise<void>;
}
export declare function getDraftOrder(httpClient: HttpClient): GetDraftOrderSignature;
interface GetDraftOrderSignature {
    /**
     * Get an order.
     * When order is in draft status, it's re-estimated and return with latest tax and totals
     * Automatic discounts and automatic additional fees will reflect the latest prices and eligibility.
     * Calculation will be based on current draft order content - items, shipping info and eligible discounts and additional fees.
     * When order is in committed status, it's returned with it's calculation at the moment it was committed.
     * @param - The draft order id
     */
    (draftOrderId: string): Promise<GetDraftOrderResponse & GetDraftOrderResponseNonNullableFields>;
}
export declare function getOrderDraftabilityStatus(httpClient: HttpClient): GetOrderDraftabilityStatusSignature;
interface GetOrderDraftabilityStatusSignature {
    /**
     * Checks whether a draft can be created for this order
     * @param - Order ID.
     */
    (orderId: string): Promise<GetOrderDraftabilityStatusResponse & GetOrderDraftabilityStatusResponseNonNullableFields>;
}
export declare function commitDraftOrder(httpClient: HttpClient): CommitDraftOrderSignature;
interface CommitDraftOrderSignature {
    /**
     * Commit latest changes to the baseline order and control what side-effects will be applied.
     * Commit cannot be undone or reverted.
     * Order-edit become closed for editing, however it's kept for reference and can be retrieved.
     * @param - The draft order id
     */
    (draftOrderId: string, options?: CommitDraftOrderOptions | undefined): Promise<CommitDraftOrderResponse & CommitDraftOrderResponseNonNullableFields>;
}
export declare function createOrderFromDraft(httpClient: HttpClient): CreateOrderFromDraftSignature;
interface CreateOrderFromDraftSignature {
    /**
     * Create new order and control what side-effects will be applied
     * Commit cannot be undone or reverted.
     * Order-edit become closed for editing, however it's kept for reference and can be retrieved.
     */
    (): Promise<void>;
}
export declare function deleteDraftOrder(httpClient: HttpClient): DeleteDraftOrderSignature;
interface DeleteDraftOrderSignature {
    /**
     * Delete order-edit entity with all pending changes.
     * Order-edit in status 'COMMITTED' cannot be deleted.
     * @param - The draft order id
     */
    (draftOrderId: string): Promise<void>;
}
export declare function queryDraftOrders(httpClient: HttpClient): QueryDraftOrdersSignature;
interface QueryDraftOrdersSignature {
    /**
     * Retrieves a list of draft orders given the provided paging, filtering, and sorting. Up to 100 draft orders can be returned per request.
     *
     * Refer to the table below for supported fields, filters, and sorting:
     * | **Property**   | **Supported Filters & Sorting**                                                 | **Sortable** |
     * |----------------|---------------------------------------------------------------------------------|--------------|
     * | `_createdDate` | `eq()`, `ne()`, `exists()`, `in()`, `hasSome()`, `lt()`, `le()`, `gt()`, `ge()` | Sortable     |
     * | `_updatedDate` | `eq()`, `ne()`, `exists()`, `in()`, `hasSome()`, `lt()`, `le()`, `gt()`, `ge()` | Sortable     |
     * | `status`       | `eq()`, `ne()`, `exists()`, `in()`, `hasSome()`                                 | Sortable     |
     * | `orderId`      | `eq()`, `ne()`, `exists()`, `in()`, `hasSome()`, `startsWith()`                 |              |
     * To learn how to query draft orders, see [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language).
     */
    (): DraftOrdersQueryBuilder;
}
export declare function setTaxExemption(httpClient: HttpClient): SetTaxExemptionSignature;
interface SetTaxExemptionSignature {
    /**
     * Sets tax exemption to a draft order.
     */
    (): Promise<void>;
}
export { ActionEvent, Activity, ActivityContentOneOf, ActivityType, AddLineItemsToDraftOrderOptions, AddLineItemsToDraftOrderRequest, AddLineItemsToDraftOrderResponse, AddLineItemsToDraftOrderResponseNonNullableFields, AdditionalFee, AdditionalFeeDetails, AdditionalFeeOption, Address, AddressLocation, AddressWithContact, ApplicationError, AppliedDiscount, AppliedDiscountDiscountSourceOneOf, AppliedDiscountDiscountType, AttributionSource, AuthorizedPaymentCaptured, AuthorizedPaymentCreated, AuthorizedPaymentVoided, Balance, BalanceSummary, BillingChangedDetails, BillingDetails, BillingDetailsChangeTypeOneOf, BusinessLocationChangedDetails, BusinessLocationDetails, BusinessLocationDetailsChangeTypeOneOf, BuyerChangedDetails, BuyerDetails, BuyerDetailsChangeTypeOneOf, BuyerInfo, BuyerInfoIdOneOf, CalculatedDraftOrder, CalculationErrors, CalculationErrorsShippingCalculationErrorOneOf, CarrierError, CarrierErrors, CatalogReference, CatalogReferenceLineItem, ChannelInfo, ChannelType, Color, CommitDraftOrderOptions, CommitDraftOrderRequest, CommitDraftOrderResponse, CommitDraftOrderResponseNonNullableFields, Coupon, CreateCustomAdditionalFeesOptions, CreateCustomAdditionalFeesRequest, CreateCustomAdditionalFeesResponse, CreateCustomAdditionalFeesResponseNonNullableFields, CreateCustomDiscountsOptions, CreateCustomDiscountsRequest, CreateCustomDiscountsResponse, CreateCustomDiscountsResponseNonNullableFields, CreateDraftOrderRequest, CreateDraftOrderResponse, CreateDraftOrderResponseNonNullableFields, CreateEmptyDraftOrderRequest, CreateEmptyDraftOrderResponse, CreateEmptyDraftOrderResponseNonNullableFields, CreateOrderFromDraftRequest, CreateOrderFromDraftResponse, CreateOrderFromDraftResponseNonNullableFields, CreatedBy, CreatedByStringOneOf, CreditCardDetails, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, CustomActivity, CustomField, CustomLineItem, DeleteCustomAdditionalFeesRequest, DeleteCustomAdditionalFeesResponse, DeleteCustomAdditionalFeesResponseNonNullableFields, DeleteCustomDiscountsRequest, DeleteCustomDiscountsResponse, DeleteCustomDiscountsResponseNonNullableFields, DeleteDraftOrderRequest, DeleteDraftOrderResponse, DeliveryLogistics, DeliveryTimeSlot, DescriptionLine, DescriptionLineDescriptionLineValueOneOf, DescriptionLineName, DescriptionLineType, DescriptionLineValueOneOf, Details, DetailsKindOneOf, DigitalFile, DiscountDetails, DiscountOption, DiscountOptionDiscountAmountOneOf, DiscountReason, DiscountRule, DiscountRuleName, DiscountType, DomainEvent, DomainEventBodyOneOf, DraftOrder, DraftOrderChangesApplied, DraftOrderCommitSettings, DraftOrdersQueryBuilder, DraftOrdersQueryResult, EditingStatus, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, ExtendedFields, ExternalReceipt, FieldViolation, FileType, FocalPoint, FreeTrialPeriod, FulfillmentStatus, FulfillmentStatusesAggregate, FullAddressContactDetails, GetDraftEditabilityStatusRequest, GetDraftEditabilityStatusResponse, GetDraftOrderRequest, GetDraftOrderResponse, GetDraftOrderResponseNonNullableFields, GetOrderDraftabilityStatusRequest, GetOrderDraftabilityStatusResponse, GetOrderDraftabilityStatusResponseNonNullableFields, GiftCardPaymentRefund, IdAndApplied, IdentificationData, IdentificationDataIdOneOf, InventoryUpdate, ItemChangedDetails, ItemDetails, ItemDetailsChangeTypeOneOf, ItemTaxFullDetails, ItemType, ItemTypeItemType, ItemTypeItemTypeDataOneOf, JurisdictionType, LineItemAmount, LineItemChangeDetails, LineItemChanges, LineItemDiscount, LineItemExchangeData, LineItemPriceChange, LineItemQuantityChange, LineItemQuantityChangeType, LineItemTaxBreakdown, LineItemTaxInfo, Location, LocationAndQuantity, ManagedAdditionalFee, ManagedDiscount, ManagedLineItem, MembershipPaymentRefund, MerchantComment, MerchantDiscount, MerchantDiscountMerchantDiscountReasonOneOf, MessageEnvelope, NewExchangeOrderCreated, NonDraftableReason, Order, OrderChange, OrderChangeValueOneOf, OrderCreateNotifications, OrderCreateSettings, OrderCreatedFromExchange, OrderLineItem, OrderRefunded, OrderStatus, OrderTaxBreakdown, OrderTaxInfo, PaymentCanceled, PaymentCanceledPaymentDetailsOneOf, PaymentDeclined, PaymentDeclinedPaymentDetailsOneOf, PaymentOptionType, PaymentPending, PaymentPendingPaymentDetailsOneOf, PaymentRefundFailed, PaymentRefunded, PaymentStatus, PhysicalProperties, PickupAddress, PickupDetails, PickupDetailsPickupMethod, PickupMethod, PlainTextValue, Price, PriceDescription, PriceSummary, ProductName, QueryDraftOrdersRequest, QueryDraftOrdersResponse, QueryDraftOrdersResponseNonNullableFields, ReceiptCreated, ReceiptCreatedReceiptInfoOneOf, ReceiptSent, ReceiptSentReceiptInfoOneOf, RecipientInfoChangedDetails, RecipientInfoDetails, RecipientInfoDetailsChangeTypeOneOf, RefundInitiated, RefundedAsStoreCredit, RefundedPayment, RefundedPaymentKindOneOf, RegularPayment, RegularPaymentPaymentMethodDetailsOneOf, RegularPaymentRefund, RestoreInfo, RuleType, SavedPaymentMethod, SecuredMedia, SetAdditionalFeesRequest, SetAdditionalFeesResponse, SetAdditionalFeesResponseNonNullableFields, SetBillingInfoRequest, SetBillingInfoResponse, SetBillingInfoResponseNonNullableFields, SetBusinessLocationRequest, SetBusinessLocationResponse, SetBuyerInfoRequest, SetBuyerInfoResponse, SetBuyerInfoResponseNonNullableFields, SetDiscountsRequest, SetDiscountsResponse, SetDiscountsResponseNonNullableFields, SetRecipientInfoRequest, SetRecipientInfoResponse, SetRecipientInfoResponseNonNullableFields, SetShippingInfoRequest, SetShippingInfoResponse, SetShippingInfoResponseNonNullableFields, SetTaxExemptionRequest, SetTaxExemptionResponse, SetTaxExemptionResponseNonNullableFields, ShippingChangedDetails, ShippingDetails, ShippingDetailsChangeTypeOneOf, ShippingInformation, ShippingInformationChange, ShippingOption, ShippingPrice, ShippingRegion, SortOrder, Sorting, SourceType, StreetAddress, SubscriptionFrequency, SubscriptionInfo, SubscriptionSettings, SystemError, TagList, Tags, TaxDetails, TaxSummary, TaxableAddress, TaxableAddressTaxableAddressDataOneOf, TaxableAddressType, TotalPriceChange, TranslatedValue, UpdateExtendedFieldsRequest, UpdateExtendedFieldsResponse, UpdateLineItemsOptions, UpdateLineItemsRequest, UpdateLineItemsResponse, UpdateLineItemsResponseNonNullableFields, UpdateShippingInfoRequest, UpdateShippingInfoResponse, V1BalanceSummary, V1CreatedBy, V1CreatedByStringOneOf, V1DeliveryLogistics, V1DeliveryLogisticsAddressOneOf, V1DeliveryTimeSlot, V1PickupDetails, V1ShippingInformation, V1ShippingPrice, ValidationError, VatId, VatType, WebhookIdentityType, WeightUnit, WixReceipt, } from './ecom-v1-draft-order-draft-orders.universal.js';
