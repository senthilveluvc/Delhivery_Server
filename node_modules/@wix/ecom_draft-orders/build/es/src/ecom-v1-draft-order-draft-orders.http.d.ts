import { RequestOptionsFactory } from '@wix/sdk-types';
/**
 * Creates or gets a draft order.
 *
 * When passing the ID of an order that is already in draft, the existing draft order will be returned.
 * To complete a draft and update the order, call [Commit Draft Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/draft-orders/commit-draft-order).
 */
export declare function createDraftOrder(payload: object): RequestOptionsFactory<any>;
/** Creates an empty draft order. */
export declare function createEmptyDraftOrder(payload: object): RequestOptionsFactory<any>;
/** Adds line items to a draft order. */
export declare function addLineItemsToDraftOrder(payload: object): RequestOptionsFactory<any>;
/**
 * Updates a draft order's line items.
 *
 * Using this API, you can update a line item's quantity, price, and description.
 * > **Notes:**
 * > + Passing a quantity of `0` will remove the line item.
 * > + Price cannot be updated for line items with `paymentOption: MEMBERSHIP`.
 * > + Quantity cannot be decreased fulfilled line items. To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
 */
export declare function updateLineItems(payload: object): RequestOptionsFactory<any>;
/**
 * Sets and enables or disables discounts on a draft order.
 *
 * Any discounts not passed will not change.
 */
export declare function setDiscounts(payload: object): RequestOptionsFactory<any>;
/** Adds merchant discounts to the order. */
export declare function createCustomDiscounts(payload: object): RequestOptionsFactory<any>;
/** Remove custom discounts from the order. */
export declare function deleteCustomDiscounts(payload: object): RequestOptionsFactory<any>;
/**
 * Set which additional fees existing on the draft order are to be opt-in.
 * All existing additional fees not provided on the call are opted-out.
 */
export declare function setAdditionalFees(payload: object): RequestOptionsFactory<any>;
/**
 * Create custom additional fees to the order.
 * added additional fees are by default opted-out.
 * To opt-in them, please call SetAdditionalFees with the added additional fee ids.
 */
export declare function createCustomAdditionalFees(payload: object): RequestOptionsFactory<any>;
/** Remove custom additional fees from the order. */
export declare function deleteCustomAdditionalFees(payload: object): RequestOptionsFactory<any>;
/** Sets shipping info to a draft order. */
export declare function setShippingInfo(payload: object): RequestOptionsFactory<any>;
/** Sets buyer info to a draft order. */
export declare function setBuyerInfo(payload: object): RequestOptionsFactory<any>;
/** Sets recipient info to a draft order. */
export declare function setRecipientInfo(payload: object): RequestOptionsFactory<any>;
/** Sets billing info to a draft order. */
export declare function setBillingInfo(payload: object): RequestOptionsFactory<any>;
/**
 * Get an order.
 * When order is in draft status, it's re-estimated and return with latest tax and totals
 * Automatic discounts and automatic additional fees will reflect the latest prices and eligibility.
 * Calculation will be based on current draft order content - items, shipping info and eligible discounts and additional fees.
 * When order is in committed status, it's returned with it's calculation at the moment it was committed.
 */
export declare function getDraftOrder(payload: object): RequestOptionsFactory<any>;
/** Checks whether a draft can be created for this order */
export declare function getOrderDraftabilityStatus(payload: object): RequestOptionsFactory<any>;
/**
 * Commit latest changes to the baseline order and control what side-effects will be applied.
 * Commit cannot be undone or reverted.
 * Order-edit become closed for editing, however it's kept for reference and can be retrieved.
 */
export declare function commitDraftOrder(payload: object): RequestOptionsFactory<any>;
/**
 * Create new order and control what side-effects will be applied
 * Commit cannot be undone or reverted.
 * Order-edit become closed for editing, however it's kept for reference and can be retrieved.
 */
export declare function createOrderFromDraft(payload: object): RequestOptionsFactory<any>;
/**
 * Delete order-edit entity with all pending changes.
 * Order-edit in status 'COMMITTED' cannot be deleted.
 */
export declare function deleteDraftOrder(payload: object): RequestOptionsFactory<any>;
/**
 * Retrieves a list of draft orders given the provided paging, filtering, and sorting. Up to 100 draft orders can be returned per request.
 *
 * Refer to the table below for supported fields, filters, and sorting:
 * | **Property**   | **Supported Filters & Sorting**                                                 | **Sortable** |
 * |----------------|---------------------------------------------------------------------------------|--------------|
 * | `_createdDate` | `eq()`, `ne()`, `exists()`, `in()`, `hasSome()`, `lt()`, `le()`, `gt()`, `ge()` | Sortable     |
 * | `_updatedDate` | `eq()`, `ne()`, `exists()`, `in()`, `hasSome()`, `lt()`, `le()`, `gt()`, `ge()` | Sortable     |
 * | `status`       | `eq()`, `ne()`, `exists()`, `in()`, `hasSome()`                                 | Sortable     |
 * | `orderId`      | `eq()`, `ne()`, `exists()`, `in()`, `hasSome()`, `startsWith()`                 |              |
 * To learn how to query draft orders, see [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language).
 */
export declare function queryDraftOrders(payload: object): RequestOptionsFactory<any>;
/** Sets tax exemption to a draft order. */
export declare function setTaxExemption(payload: object): RequestOptionsFactory<any>;
