import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1DraftOrder from './ecom-v1-draft-order-draft-orders.http.js';
// @ts-ignore
import { transformSDKAddressToRESTAddress } from '@wix/sdk-runtime/transformations/address';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformSDKImageToRESTImage } from '@wix/sdk-runtime/transformations/image';
import { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';
import { transformSDKPageURLV2ToRESTPageURLV2 } from '@wix/sdk-runtime/transformations/page-url-v2';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var DescriptionLineType;
(function (DescriptionLineType) {
    /** Unrecognized type. */
    DescriptionLineType["UNRECOGNISED"] = "UNRECOGNISED";
    /** Plain text type. */
    DescriptionLineType["PLAIN_TEXT"] = "PLAIN_TEXT";
    /** Color type. */
    DescriptionLineType["COLOR"] = "COLOR";
})(DescriptionLineType || (DescriptionLineType = {}));
export var ItemTypeItemType;
(function (ItemTypeItemType) {
    ItemTypeItemType["UNRECOGNISED"] = "UNRECOGNISED";
    ItemTypeItemType["PHYSICAL"] = "PHYSICAL";
    ItemTypeItemType["DIGITAL"] = "DIGITAL";
    ItemTypeItemType["GIFT_CARD"] = "GIFT_CARD";
    ItemTypeItemType["SERVICE"] = "SERVICE";
})(ItemTypeItemType || (ItemTypeItemType = {}));
/** Type of selected payment option for catalog item */
export var PaymentOptionType;
(function (PaymentOptionType) {
    /** The entire payment for this item happens as part of the checkout. */
    PaymentOptionType["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    PaymentOptionType["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    PaymentOptionType["MEMBERSHIP"] = "MEMBERSHIP";
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    PaymentOptionType["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    PaymentOptionType["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
})(PaymentOptionType || (PaymentOptionType = {}));
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
export var JurisdictionType;
(function (JurisdictionType) {
    JurisdictionType["UNDEFINED"] = "UNDEFINED";
    JurisdictionType["COUNTRY"] = "COUNTRY";
    JurisdictionType["STATE"] = "STATE";
    JurisdictionType["COUNTY"] = "COUNTY";
    JurisdictionType["CITY"] = "CITY";
    JurisdictionType["SPECIAL"] = "SPECIAL";
})(JurisdictionType || (JurisdictionType = {}));
/** Frequency unit of recurring payment */
export var SubscriptionFrequency;
(function (SubscriptionFrequency) {
    SubscriptionFrequency["UNDEFINED"] = "UNDEFINED";
    SubscriptionFrequency["DAY"] = "DAY";
    SubscriptionFrequency["WEEK"] = "WEEK";
    SubscriptionFrequency["MONTH"] = "MONTH";
    SubscriptionFrequency["YEAR"] = "YEAR";
})(SubscriptionFrequency || (SubscriptionFrequency = {}));
export var TaxableAddressType;
(function (TaxableAddressType) {
    TaxableAddressType["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
    TaxableAddressType["BUSINESS"] = "BUSINESS";
    TaxableAddressType["BILLING"] = "BILLING";
    TaxableAddressType["SHIPPING"] = "SHIPPING";
})(TaxableAddressType || (TaxableAddressType = {}));
/** tax info types */
export var VatType;
(function (VatType) {
    VatType["UNSPECIFIED"] = "UNSPECIFIED";
    /** CPF - for individual tax payers. */
    VatType["CPF"] = "CPF";
    /** CNPJ - for corporations */
    VatType["CNPJ"] = "CNPJ";
})(VatType || (VatType = {}));
export var PickupDetailsPickupMethod;
(function (PickupDetailsPickupMethod) {
    PickupDetailsPickupMethod["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
    PickupDetailsPickupMethod["STORE_PICKUP"] = "STORE_PICKUP";
    PickupDetailsPickupMethod["PICKUP_POINT"] = "PICKUP_POINT";
})(PickupDetailsPickupMethod || (PickupDetailsPickupMethod = {}));
export var SourceType;
(function (SourceType) {
    /** Part of the original order */
    SourceType["ORIGINAL_ORDER"] = "ORIGINAL_ORDER";
    /** Added by estimate * */
    SourceType["AUTOMATIC"] = "AUTOMATIC";
    /** Added manually to current draft order */
    SourceType["CUSTOM"] = "CUSTOM";
})(SourceType || (SourceType = {}));
export var AppliedDiscountDiscountType;
(function (AppliedDiscountDiscountType) {
    AppliedDiscountDiscountType["GLOBAL"] = "GLOBAL";
    AppliedDiscountDiscountType["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
    AppliedDiscountDiscountType["SHIPPING"] = "SHIPPING";
})(AppliedDiscountDiscountType || (AppliedDiscountDiscountType = {}));
export var DiscountReason;
(function (DiscountReason) {
    DiscountReason["UNSPECIFIED"] = "UNSPECIFIED";
    DiscountReason["EXCHANGED_ITEMS"] = "EXCHANGED_ITEMS";
})(DiscountReason || (DiscountReason = {}));
export var EditingStatus;
(function (EditingStatus) {
    /** DraftOrder is in draft state. */
    EditingStatus["DRAFT"] = "DRAFT";
    /** DraftOrder is in committed state. */
    EditingStatus["COMMITTED"] = "COMMITTED";
})(EditingStatus || (EditingStatus = {}));
export var WeightUnit;
(function (WeightUnit) {
    /** Weight unit can't be classified, due to an error */
    WeightUnit["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
    /** Kilograms */
    WeightUnit["KG"] = "KG";
    /** Pounds */
    WeightUnit["LB"] = "LB";
})(WeightUnit || (WeightUnit = {}));
export var PickupMethod;
(function (PickupMethod) {
    PickupMethod["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
    PickupMethod["STORE_PICKUP"] = "STORE_PICKUP";
    PickupMethod["PICKUP_POINT"] = "PICKUP_POINT";
})(PickupMethod || (PickupMethod = {}));
export var RuleType;
(function (RuleType) {
    RuleType["VALIDATION"] = "VALIDATION";
    RuleType["OTHER"] = "OTHER";
    RuleType["MAX"] = "MAX";
    RuleType["MIN"] = "MIN";
    RuleType["MAX_LENGTH"] = "MAX_LENGTH";
    RuleType["MIN_LENGTH"] = "MIN_LENGTH";
    RuleType["MAX_SIZE"] = "MAX_SIZE";
    RuleType["MIN_SIZE"] = "MIN_SIZE";
    RuleType["FORMAT"] = "FORMAT";
    RuleType["DECIMAL_LTE"] = "DECIMAL_LTE";
    RuleType["DECIMAL_GTE"] = "DECIMAL_GTE";
    RuleType["DECIMAL_LT"] = "DECIMAL_LT";
    RuleType["DECIMAL_GT"] = "DECIMAL_GT";
    RuleType["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
    RuleType["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
    RuleType["REQUIRED_FIELD"] = "REQUIRED_FIELD";
    RuleType["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
    RuleType["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
    RuleType["EXACT_LENGTH"] = "EXACT_LENGTH";
    RuleType["EXACT_SIZE"] = "EXACT_SIZE";
})(RuleType || (RuleType = {}));
export var FileType;
(function (FileType) {
    FileType["UNSPECIFIED"] = "UNSPECIFIED";
    FileType["SECURE_PICTURE"] = "SECURE_PICTURE";
    FileType["SECURE_VIDEO"] = "SECURE_VIDEO";
    FileType["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
    FileType["SECURE_MUSIC"] = "SECURE_MUSIC";
    FileType["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
})(FileType || (FileType = {}));
export var DiscountType;
(function (DiscountType) {
    DiscountType["UNKNOWN_TYPE"] = "UNKNOWN_TYPE";
    DiscountType["GLOBAL"] = "GLOBAL";
    DiscountType["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
    DiscountType["SHIPPING"] = "SHIPPING";
})(DiscountType || (DiscountType = {}));
export var NonDraftableReason;
(function (NonDraftableReason) {
    NonDraftableReason["UNSPECIFIED"] = "UNSPECIFIED";
    NonDraftableReason["PARTIALLY_OR_FULLY_REFUNDED"] = "PARTIALLY_OR_FULLY_REFUNDED";
    NonDraftableReason["UNSUPPORTED_CHANNEL_TYPE"] = "UNSUPPORTED_CHANNEL_TYPE";
    NonDraftableReason["ORDER_STATUS_IS_NOT_SUPPORTED"] = "ORDER_STATUS_IS_NOT_SUPPORTED";
    NonDraftableReason["ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT"] = "ORDER_AND_SITE_CURRENCIES_ARE_INCONSISTENT";
    NonDraftableReason["ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT"] = "ORDER_AND_SITE_WEIGHT_UNITS_ARE_INCONSISTENT";
    NonDraftableReason["AMOUNTS_DO_NOT_ADD_UP"] = "AMOUNTS_DO_NOT_ADD_UP";
    /** remove - this is not a reason, it's an error */
    NonDraftableReason["ORDER_NOT_FOUND"] = "ORDER_NOT_FOUND";
    NonDraftableReason["SUBSCRIPTION_LINE_ITEM_EXISTS"] = "SUBSCRIPTION_LINE_ITEM_EXISTS";
    NonDraftableReason["UNSUPPORTED_CATALOG_ITEM"] = "UNSUPPORTED_CATALOG_ITEM";
    NonDraftableReason["TAXABLE_EXISTING_ADDITIONAL_FEE"] = "TAXABLE_EXISTING_ADDITIONAL_FEE";
})(NonDraftableReason || (NonDraftableReason = {}));
export var PaymentStatus;
(function (PaymentStatus) {
    PaymentStatus["UNSPECIFIED"] = "UNSPECIFIED";
    /**
     * `NOT_PAID` can apply to an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     */
    PaymentStatus["NOT_PAID"] = "NOT_PAID";
    /** All required payments associated with this order are paid. */
    PaymentStatus["PAID"] = "PAID";
    /** Order partially refunded, but the refunded amount is less than the order's total price. See `order.balanceSummary` for more details. */
    PaymentStatus["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
    /** Order fully refunded. Refund amount equals total price. See `order.balanceSummary` for more details. */
    PaymentStatus["FULLY_REFUNDED"] = "FULLY_REFUNDED";
    /**
     * All payments pending.
     *
     * This can happen with two-step payments, when a payment requires manual review, or when a payment is in progress and will be concluded shortly.
     * Learn more about [pending orders](https://support.wix.com/en/article/pending-orders).
     */
    PaymentStatus["PENDING"] = "PENDING";
    /** At least one payment received and approved, but it covers less than the order's total price. See `order.balanceSummary` for more details. */
    PaymentStatus["PARTIALLY_PAID"] = "PARTIALLY_PAID";
    /**
     * Payment received, but not yet confirmed by the payment provider.
     *
     * In most cases, when a payment provider is holding payment it's because setup hasn't been successfully completed by the merchant/site owner.
     * To solve this, the merchant/site owner should log in to the payment provider's dashboard and make sure their account is set up correctly, or contact their support for further assistance.
     * @documentationMaturity preview
     */
    PaymentStatus["PENDING_MERCHANT"] = "PENDING_MERCHANT";
    /**
     * One or more payments canceled.
     * @documentationMaturity preview
     */
    PaymentStatus["CANCELED"] = "CANCELED";
    /**
     * One or more payments declined.
     * @documentationMaturity preview
     */
    PaymentStatus["DECLINED"] = "DECLINED";
})(PaymentStatus || (PaymentStatus = {}));
export var FulfillmentStatus;
(function (FulfillmentStatus) {
    /** None of the order items are fulfilled or the order was manually marked as unfulfilled. */
    FulfillmentStatus["NOT_FULFILLED"] = "NOT_FULFILLED";
    /**
     * All of the order items are fulfilled or the order was manually marked as fulfilled.
     * Orders without shipping info are fulfilled automatically.
     */
    FulfillmentStatus["FULFILLED"] = "FULFILLED";
    /** Some, but not all, of the order items are fulfilled. */
    FulfillmentStatus["PARTIALLY_FULFILLED"] = "PARTIALLY_FULFILLED";
})(FulfillmentStatus || (FulfillmentStatus = {}));
export var OrderStatus;
(function (OrderStatus) {
    /** Order created, but not yet approved or canceled. */
    OrderStatus["INITIALIZED"] = "INITIALIZED";
    /**
     * Order approved.
     *
     * This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order).
     * Offline orders (cash payment) are automatically approved.
     */
    OrderStatus["APPROVED"] = "APPROVED";
    /** Order canceled by the user. */
    OrderStatus["CANCELED"] = "CANCELED";
    /**
     * Order pending.
     * @documentationMaturity preview
     */
    OrderStatus["PENDING"] = "PENDING";
    /**
     * Order rejected.
     *
     * This happens when pending payments fail.
     * @documentationMaturity preview
     */
    OrderStatus["REJECTED"] = "REJECTED";
})(OrderStatus || (OrderStatus = {}));
export var LineItemQuantityChangeType;
(function (LineItemQuantityChangeType) {
    /** Quantity increased. */
    LineItemQuantityChangeType["QUANTITY_INCREASED"] = "QUANTITY_INCREASED";
    /** Quantity decreased. */
    LineItemQuantityChangeType["QUANTITY_DECREASED"] = "QUANTITY_DECREASED";
})(LineItemQuantityChangeType || (LineItemQuantityChangeType = {}));
export var ActivityType;
(function (ActivityType) {
    ActivityType["ORDER_REFUNDED"] = "ORDER_REFUNDED";
    ActivityType["ORDER_PLACED"] = "ORDER_PLACED";
    ActivityType["ORDER_PAID"] = "ORDER_PAID";
    ActivityType["ORDER_FULFILLED"] = "ORDER_FULFILLED";
    ActivityType["ORDER_NOT_FULFILLED"] = "ORDER_NOT_FULFILLED";
    ActivityType["ORDER_CANCELED"] = "ORDER_CANCELED";
    ActivityType["DOWNLOAD_LINK_SENT"] = "DOWNLOAD_LINK_SENT";
    ActivityType["TRACKING_NUMBER_ADDED"] = "TRACKING_NUMBER_ADDED";
    ActivityType["TRACKING_NUMBER_EDITED"] = "TRACKING_NUMBER_EDITED";
    ActivityType["TRACKING_LINK_ADDED"] = "TRACKING_LINK_ADDED";
    ActivityType["SHIPPING_CONFIRMATION_EMAIL_SENT"] = "SHIPPING_CONFIRMATION_EMAIL_SENT";
    ActivityType["INVOICE_ADDED"] = "INVOICE_ADDED";
    ActivityType["INVOICE_REMOVED"] = "INVOICE_REMOVED";
    ActivityType["INVOICE_SENT"] = "INVOICE_SENT";
    ActivityType["FULFILLER_EMAIL_SENT"] = "FULFILLER_EMAIL_SENT";
    ActivityType["SHIPPING_ADDRESS_EDITED"] = "SHIPPING_ADDRESS_EDITED";
    ActivityType["EMAIL_EDITED"] = "EMAIL_EDITED";
    ActivityType["PICKUP_READY_EMAIL_SENT"] = "PICKUP_READY_EMAIL_SENT";
    ActivityType["CUSTOM_ACTIVITY"] = "CUSTOM_ACTIVITY";
    ActivityType["MERCHANT_COMMENT"] = "MERCHANT_COMMENT";
    ActivityType["ORDER_CREATED_FROM_EXCHANGE"] = "ORDER_CREATED_FROM_EXCHANGE";
    ActivityType["NEW_EXCHANGE_ORDER_CREATED"] = "NEW_EXCHANGE_ORDER_CREATED";
    ActivityType["ORDER_PARTIALLY_PAID"] = "ORDER_PARTIALLY_PAID";
    ActivityType["DRAFT_ORDER_CHANGES_APPLIED"] = "DRAFT_ORDER_CHANGES_APPLIED";
    ActivityType["SAVED_PAYMENT_METHOD"] = "SAVED_PAYMENT_METHOD";
    /** @documentationMaturity preview */
    ActivityType["PAYMENT_PENDING"] = "PAYMENT_PENDING";
    /** @documentationMaturity preview */
    ActivityType["PAYMENT_CANCELED"] = "PAYMENT_CANCELED";
    /** @documentationMaturity preview */
    ActivityType["PAYMENT_DECLINED"] = "PAYMENT_DECLINED";
    /** @documentationMaturity preview */
    ActivityType["ORDER_PENDING"] = "ORDER_PENDING";
    /** @documentationMaturity preview */
    ActivityType["ORDER_REJECTED"] = "ORDER_REJECTED";
})(ActivityType || (ActivityType = {}));
export var AttributionSource;
(function (AttributionSource) {
    AttributionSource["UNSPECIFIED"] = "UNSPECIFIED";
    AttributionSource["FACEBOOK_ADS"] = "FACEBOOK_ADS";
})(AttributionSource || (AttributionSource = {}));
export var ChannelType;
(function (ChannelType) {
    /** Unspecified sales channel. This value is not supported. */
    ChannelType["UNSPECIFIED"] = "UNSPECIFIED";
    /** A web client. */
    ChannelType["WEB"] = "WEB";
    /** [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395). */
    ChannelType["POS"] = "POS";
    /** [eBay shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop). */
    ChannelType["EBAY"] = "EBAY";
    /** [Amazon shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop). */
    ChannelType["AMAZON"] = "AMAZON";
    /** Other sales platform. */
    ChannelType["OTHER_PLATFORM"] = "OTHER_PLATFORM";
    /** [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview). */
    ChannelType["WIX_APP_STORE"] = "WIX_APP_STORE";
    /** Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings) */
    ChannelType["WIX_INVOICES"] = "WIX_INVOICES";
    /** Wix merchant backoffice. */
    ChannelType["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
    /** Wish sales channel. */
    ChannelType["WISH"] = "WISH";
    /** [ClassPass sales channel](https://support.wix.com/en/article/wix-bookings-letting-clients-book-your-services-with-classpass). */
    ChannelType["CLASS_PASS"] = "CLASS_PASS";
    /** Global-E sales channel. */
    ChannelType["GLOBAL_E"] = "GLOBAL_E";
    /** [Facebook shop](https://support.wix.com/en/article/wix-stores-changes-to-facebook-shops). */
    ChannelType["FACEBOOK"] = "FACEBOOK";
    /** [Etsy sales channel](https://support.wix.com/en/article/wix-stores-request-adding-etsy-as-a-sales-channel). */
    ChannelType["ETSY"] = "ETSY";
    /** [TikTok sales channel](https://support.wix.com/en/article/wix-stores-request-adding-tiktok-as-a-sales-channel). */
    ChannelType["TIKTOK"] = "TIKTOK";
    /** [Faire marketplace integration](https://support.wix.com/en/article/wix-stores-creating-a-faire-store-using-the-faire-integration-app). */
    ChannelType["FAIRE_COM"] = "FAIRE_COM";
})(ChannelType || (ChannelType = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates or gets a draft order.
 *
 * When passing the ID of an order that is already in draft, the existing draft order will be returned.
 * To complete a draft and update the order, call [Commit Draft Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/draft-orders/commit-draft-order).
 * @param orderId - To create a draft from existing order, provide its id. Otherwise, an empty draft will be created.
 * @public
 * @documentationMaturity preview
 * @requiredField orderId
 * @permissionId ECOM.DRAFT_ORDERS_CREATE
 * @permissionId ECOM.DRAFT_ORDER_READ_ALL_EXTENDED_FIELDS
 * @permissionId DRAFT_ORDER_WRITE_ALL_EXTENDED_FIELDS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.CreateDraftOrder
 */
export async function createDraftOrder(orderId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ orderId: orderId });
    const reqOpts = ambassadorWixEcomV1DraftOrder.createDraftOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.lineItems.lineItem.image',
                    },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address',
                    },
                    { path: 'calculatedDraftOrder.draftOrder.billingInfo.address' },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates an empty draft order.
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.DRAFT_ORDERS_CREATE
 * @permissionId ECOM.DRAFT_ORDER_READ_ALL_EXTENDED_FIELDS
 * @permissionId DRAFT_ORDER_WRITE_ALL_EXTENDED_FIELDS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.CreateEmptyDraftOrder
 */
export async function createEmptyDraftOrder() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixEcomV1DraftOrder.createEmptyDraftOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.lineItems.lineItem.image',
                    },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address',
                    },
                    { path: 'calculatedDraftOrder.draftOrder.billingInfo.address' },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Adds line items to a draft order.
 * @param draftOrderId - The draft order id
 * @public
 * @documentationMaturity preview
 * @requiredField draftOrderId
 * @requiredField options.catalogLineItems.catalogReference
 * @permissionId ECOM.DRAFT_ORDERS_ADD_LINE_ITEMS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.AddLineItemsToDraftOrder
 */
export async function addLineItemsToDraftOrder(draftOrderId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        draftOrderId: draftOrderId,
        catalogLineItems: options?.catalogLineItems,
        customLineItems: options?.customLineItems,
    }), [
        {
            transformFn: transformSDKPageURLV2ToRESTPageURLV2,
            paths: [{ path: 'customLineItems.url' }],
        },
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'customLineItems.media' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1DraftOrder.addLineItemsToDraftOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.lineItems.lineItem.image',
                    },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address',
                    },
                    { path: 'calculatedDraftOrder.draftOrder.billingInfo.address' },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                draftOrderId: '$[0]',
                catalogLineItems: '$[1].catalogLineItems',
                customLineItems: '$[1].customLineItems',
            },
            singleArgumentUnchanged: false,
        }, ['draftOrderId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a draft order's line items.
 *
 * Using this API, you can update a line item's quantity, price, and description.
 * > **Notes:**
 * > + Passing a quantity of `0` will remove the line item.
 * > + Price cannot be updated for line items with `paymentOption: MEMBERSHIP`.
 * > + Quantity cannot be decreased fulfilled line items. To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
 * @param draftOrderId - The draft order id
 * @public
 * @documentationMaturity preview
 * @requiredField draftOrderId
 * @permissionId ECOM.DRAFT_ORDERS_MODIFY_ITEMS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.UpdateLineItems
 */
export async function updateLineItems(draftOrderId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        draftOrderId: draftOrderId,
        lineItemChanges: options?.lineItemChanges,
    });
    const reqOpts = ambassadorWixEcomV1DraftOrder.updateLineItems(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.lineItems.lineItem.image',
                    },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address',
                    },
                    { path: 'calculatedDraftOrder.draftOrder.billingInfo.address' },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                draftOrderId: '$[0]',
                lineItemChanges: '$[1].lineItemChanges',
            },
            singleArgumentUnchanged: false,
        }, ['draftOrderId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Sets and enables or disables discounts on a draft order.
 *
 * Any discounts not passed will not change.
 * @param draftOrderId - The draft order id
 * @param discounts - The discount ids to opt-in. all existing discounts not listed are to be opted-out.
 * @public
 * @documentationMaturity preview
 * @requiredField discounts
 * @requiredField draftOrderId
 * @permissionId ECOM.DRAFT_ORDERS_SET_DISCOUNTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.SetDiscounts
 */
export async function setDiscounts(draftOrderId, discounts) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        draftOrderId: draftOrderId,
        discounts: discounts,
    });
    const reqOpts = ambassadorWixEcomV1DraftOrder.setDiscounts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.lineItems.lineItem.image',
                    },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address',
                    },
                    { path: 'calculatedDraftOrder.draftOrder.billingInfo.address' },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { draftOrderId: '$[0]', discounts: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['draftOrderId', 'discounts']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Adds merchant discounts to the order.
 * @param draftOrderId - The draft order id
 * @public
 * @documentationMaturity preview
 * @requiredField draftOrderId
 * @requiredField options.discounts.amount
 * @requiredField options.discounts.amount.amount
 * @requiredField options.discounts.discountType
 * @permissionId ECOM.DRAFT_ORDERS_ADD_DISCOUNTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.CreateCustomDiscounts
 */
export async function createCustomDiscounts(draftOrderId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        draftOrderId: draftOrderId,
        discounts: options?.discounts,
    });
    const reqOpts = ambassadorWixEcomV1DraftOrder.createCustomDiscounts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.lineItems.lineItem.image',
                    },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address',
                    },
                    { path: 'calculatedDraftOrder.draftOrder.billingInfo.address' },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                draftOrderId: '$[0]',
                discounts: '$[1].discounts',
            },
            singleArgumentUnchanged: false,
        }, ['draftOrderId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Remove custom discounts from the order.
 * @param draftOrderId - The draft order id
 * @param discountIds - The discounts to remove
 * @public
 * @documentationMaturity preview
 * @requiredField discountIds
 * @requiredField draftOrderId
 * @permissionId ECOM.DRAFT_ORDERS_DELETE_DISCOUNTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.DeleteCustomDiscounts
 */
export async function deleteCustomDiscounts(draftOrderId, discountIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        draftOrderId: draftOrderId,
        discountIds: discountIds,
    });
    const reqOpts = ambassadorWixEcomV1DraftOrder.deleteCustomDiscounts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.lineItems.lineItem.image',
                    },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address',
                    },
                    { path: 'calculatedDraftOrder.draftOrder.billingInfo.address' },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { draftOrderId: '$[0]', discountIds: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['draftOrderId', 'discountIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Set which additional fees existing on the draft order are to be opt-in.
 * All existing additional fees not provided on the call are opted-out.
 * @param draftOrderId - The draft order id
 * @param additionalFees - The additional fees ids to opt-in. all existing additional fees not listed are to be opted-out
 * @public
 * @documentationMaturity preview
 * @requiredField additionalFees
 * @requiredField draftOrderId
 * @permissionId ECOM.DRAFT_ORDERS_SET_ADDITIONAL_FEES
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.SetAdditionalFees
 */
export async function setAdditionalFees(draftOrderId, additionalFees) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        draftOrderId: draftOrderId,
        additionalFees: additionalFees,
    });
    const reqOpts = ambassadorWixEcomV1DraftOrder.setAdditionalFees(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.lineItems.lineItem.image',
                    },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address',
                    },
                    { path: 'calculatedDraftOrder.draftOrder.billingInfo.address' },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                draftOrderId: '$[0]',
                additionalFees: '$[1]',
            },
            singleArgumentUnchanged: false,
        }, ['draftOrderId', 'additionalFees']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Create custom additional fees to the order.
 * added additional fees are by default opted-out.
 * To opt-in them, please call SetAdditionalFees with the added additional fee ids.
 * @param draftOrderId - The draft order id
 * @public
 * @documentationMaturity preview
 * @requiredField draftOrderId
 * @requiredField options.customAdditionalFees.name
 * @requiredField options.customAdditionalFees.price
 * @requiredField options.customAdditionalFees.price.amount
 * @permissionId ECOM.DRAFT_ORDERS_CREATE_ADDITIONAL_FEES
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.CreateCustomAdditionalFees
 */
export async function createCustomAdditionalFees(draftOrderId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        draftOrderId: draftOrderId,
        customAdditionalFees: options?.customAdditionalFees,
    });
    const reqOpts = ambassadorWixEcomV1DraftOrder.createCustomAdditionalFees(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.lineItems.lineItem.image',
                    },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address',
                    },
                    { path: 'calculatedDraftOrder.draftOrder.billingInfo.address' },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                draftOrderId: '$[0]',
                customAdditionalFees: '$[1].customAdditionalFees',
            },
            singleArgumentUnchanged: false,
        }, ['draftOrderId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Remove custom additional fees from the order.
 * @param draftOrderId - The draft order id
 * @param customAdditionalFees - The additional fees to remove
 * @public
 * @documentationMaturity preview
 * @requiredField customAdditionalFees
 * @requiredField draftOrderId
 * @permissionId ECOM.DRAFT_ORDERS_DELETE_ADDITIONAL_FEES
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.DeleteCustomAdditionalFees
 */
export async function deleteCustomAdditionalFees(draftOrderId, customAdditionalFees) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        draftOrderId: draftOrderId,
        customAdditionalFees: customAdditionalFees,
    });
    const reqOpts = ambassadorWixEcomV1DraftOrder.deleteCustomAdditionalFees(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.lineItems.lineItem.image',
                    },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address',
                    },
                    { path: 'calculatedDraftOrder.draftOrder.billingInfo.address' },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                draftOrderId: '$[0]',
                customAdditionalFees: '$[1]',
            },
            singleArgumentUnchanged: false,
        }, ['draftOrderId', 'customAdditionalFees']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Sets shipping info to a draft order.
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.DRAFT_ORDERS_SET_SHIPPING_INFO
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.SetShippingInfo
 */
export async function setShippingInfo() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({}), [
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [
                { path: 'shippingInfo.logistics.shippingDestination.address' },
                { path: 'shippingInfo.logistics.pickupDetails.address' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1DraftOrder.setShippingInfo(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Sets buyer info to a draft order.
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.DRAFT_ORDER_SET_BUYER_INFO
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.SetBuyerInfo
 */
export async function setBuyerInfo() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixEcomV1DraftOrder.setBuyerInfo(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Sets recipient info to a draft order.
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.DRAFT_ORDER_SET_RECIPIENT_INFO
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.SetRecipientInfo
 */
export async function setRecipientInfo() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({}), [
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [{ path: 'recipientInfo.address' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1DraftOrder.setRecipientInfo(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Sets billing info to a draft order.
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.DRAFT_ORDER_SET_BILLING_INFO
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.SetBillingInfo
 */
export async function setBillingInfo() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({}), [
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [{ path: 'billingInfo.address' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1DraftOrder.setBillingInfo(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Get an order.
 * When order is in draft status, it's re-estimated and return with latest tax and totals
 * Automatic discounts and automatic additional fees will reflect the latest prices and eligibility.
 * Calculation will be based on current draft order content - items, shipping info and eligible discounts and additional fees.
 * When order is in committed status, it's returned with it's calculation at the moment it was committed.
 * @param draftOrderId - The draft order id
 * @public
 * @documentationMaturity preview
 * @requiredField draftOrderId
 * @permissionId ECOM.DRAFT_ORDERS_READ
 * @permissionId ECOM.DRAFT_ORDER_READ_ALL_EXTENDED_FIELDS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.GetDraftOrder
 */
export async function getDraftOrder(draftOrderId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        draftOrderId: draftOrderId,
    });
    const reqOpts = ambassadorWixEcomV1DraftOrder.getDraftOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.lineItems.lineItem.image',
                    },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address',
                    },
                    { path: 'calculatedDraftOrder.draftOrder.billingInfo.address' },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.recipientInfo.recipientInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address',
                    },
                    {
                        path: 'calculatedDraftOrder.draftOrder.billingDetails.billingInfo.address',
                    },
                    {
                        path: 'calculatedDraftOrder.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { draftOrderId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['draftOrderId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Checks whether a draft can be created for this order
 * @param orderId - Order ID.
 * @public
 * @documentationMaturity preview
 * @requiredField orderId
 * @permissionId ECOM.DRAFT_ORDERS_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.GetOrderDraftabilityStatus
 */
export async function getOrderDraftabilityStatus(orderId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ orderId: orderId });
    const reqOpts = ambassadorWixEcomV1DraftOrder.getOrderDraftabilityStatus(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Commit latest changes to the baseline order and control what side-effects will be applied.
 * Commit cannot be undone or reverted.
 * Order-edit become closed for editing, however it's kept for reference and can be retrieved.
 * @param draftOrderId - The draft order id
 * @public
 * @documentationMaturity preview
 * @requiredField draftOrderId
 * @permissionId ECOM.DRAFT_ORDERS_COMMIT
 * @permissionId ECOM.DRAFT_ORDER_READ_ALL_EXTENDED_FIELDS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.CommitDraftOrder
 */
export async function commitDraftOrder(draftOrderId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        draftOrderId: draftOrderId,
        commitSettings: options?.commitSettings,
        reason: options?.reason,
    });
    const reqOpts = ambassadorWixEcomV1DraftOrder.commitDraftOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'committedDraftOrder.lineItems.lineItem.image' },
                    { path: 'orderAfterCommit.lineItems.image' },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    {
                        path: 'committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address',
                    },
                    {
                        path: 'committedDraftOrder.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address',
                    },
                    {
                        path: 'committedDraftOrder.shippingInfo.shippingInfo.logistics.shippingDestination.address',
                    },
                    {
                        path: 'committedDraftOrder.shippingInfo.shippingInfo.logistics.pickupDetails.address',
                    },
                    { path: 'committedDraftOrder.billingInfo.address' },
                    {
                        path: 'committedDraftOrder.recipientInfo.changedDetails.recipientInfoBeforeChange.address',
                    },
                    { path: 'committedDraftOrder.recipientInfo.recipientInfo.address' },
                    {
                        path: 'committedDraftOrder.billingDetails.changedDetails.billingInfoBeforeChange.address',
                    },
                    { path: 'committedDraftOrder.billingDetails.billingInfo.address' },
                    { path: 'orderAfterCommit.billingInfo.address' },
                    {
                        path: 'orderAfterCommit.shippingInfo.logistics.shippingDestination.address',
                    },
                    {
                        path: 'orderAfterCommit.shippingInfo.logistics.pickupDetails.address',
                    },
                    { path: 'orderAfterCommit.recipientInfo.address' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                draftOrderId: '$[0]',
                commitSettings: '$[1].commitSettings',
                reason: '$[1].reason',
            },
            singleArgumentUnchanged: false,
        }, ['draftOrderId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Create new order and control what side-effects will be applied
 * Commit cannot be undone or reverted.
 * Order-edit become closed for editing, however it's kept for reference and can be retrieved.
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.DRAFT_ORDER_CREATE_ORDER_FROM_DRAFT
 * @permissionId ECOM.DRAFT_ORDER_READ_ALL_EXTENDED_FIELDS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.CreateOrderFromDraft
 */
export async function createOrderFromDraft() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixEcomV1DraftOrder.createOrderFromDraft(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Delete order-edit entity with all pending changes.
 * Order-edit in status 'COMMITTED' cannot be deleted.
 * @param draftOrderId - The draft order id
 * @public
 * @documentationMaturity preview
 * @requiredField draftOrderId
 * @permissionId ECOM.DRAFT_ORDERS_DELETE
 * @permissionId ECOM.DRAFT_ORDERS_ADMIN_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.DeleteDraftOrder
 */
export async function deleteDraftOrder(draftOrderId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        draftOrderId: draftOrderId,
    });
    const reqOpts = ambassadorWixEcomV1DraftOrder.deleteDraftOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { draftOrderId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['draftOrderId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of draft orders given the provided paging, filtering, and sorting. Up to 100 draft orders can be returned per request.
 *
 * Refer to the table below for supported fields, filters, and sorting:
 * | **Property**   | **Supported Filters & Sorting**                                                 | **Sortable** |
 * |----------------|---------------------------------------------------------------------------------|--------------|
 * | `_createdDate` | `eq()`, `ne()`, `exists()`, `in()`, `hasSome()`, `lt()`, `le()`, `gt()`, `ge()` | Sortable     |
 * | `_updatedDate` | `eq()`, `ne()`, `exists()`, `in()`, `hasSome()`, `lt()`, `le()`, `gt()`, `ge()` | Sortable     |
 * | `status`       | `eq()`, `ne()`, `exists()`, `in()`, `hasSome()`                                 | Sortable     |
 * | `orderId`      | `eq()`, `ne()`, `exists()`, `in()`, `hasSome()`, `startsWith()`                 |              |
 * To learn how to query draft orders, see [API Query Language](https://dev.wix.com/api/rest/getting-started/api-query-language).
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionId ECOM.DRAFT_ORDERS_READ
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.QueryDraftOrders
 */
export function queryDraftOrders() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixEcomV1DraftOrder.queryDraftOrders(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(transformPaths(data, [
                {
                    transformFn: transformRESTImageToSDKImage,
                    paths: [{ path: 'draftOrders.lineItems.lineItem.image' }],
                },
                {
                    transformFn: transformRESTAddressToSDKAddress,
                    paths: [
                        {
                            path: 'draftOrders.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.shippingDestination.address',
                        },
                        {
                            path: 'draftOrders.shippingInfo.changedDetails.shippingInfoBeforeChange.logistics.pickupDetails.address',
                        },
                        {
                            path: 'draftOrders.shippingInfo.shippingInfo.logistics.shippingDestination.address',
                        },
                        {
                            path: 'draftOrders.shippingInfo.shippingInfo.logistics.pickupDetails.address',
                        },
                        { path: 'draftOrders.billingInfo.address' },
                        {
                            path: 'draftOrders.recipientInfo.changedDetails.recipientInfoBeforeChange.address',
                        },
                        { path: 'draftOrders.recipientInfo.recipientInfo.address' },
                        {
                            path: 'draftOrders.billingDetails.changedDetails.billingInfoBeforeChange.address',
                        },
                        { path: 'draftOrders.billingDetails.billingInfo.address' },
                    ],
                },
            ]));
            return {
                items: transformedData?.draftOrders,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Sets tax exemption to a draft order.
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.DRAFT_ORDER_SET_TAX_EXEMPTION
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.draft.v1.DraftOrders.SetTaxExemption
 */
export async function setTaxExemption() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixEcomV1DraftOrder.setTaxExemption(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-draft-order-draft-orders.universal.js.map