import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1OrderPaymentRequest from './ecom-v1-order-payment-request-order-payment-requests.http.js';
// @ts-ignore
import { transformSDKImageToRESTImage } from '@wix/sdk-runtime/transformations/image';
import { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var Status;
(function (Status) {
    Status["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    Status["UNPAID"] = "UNPAID";
    Status["PAID"] = "PAID";
    Status["EXPIRED"] = "EXPIRED";
})(Status || (Status = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a order payment request.
 * @public
 * @documentationMaturity preview
 * @requiredField options.orderPaymentRequest.amount
 * @requiredField options.orderPaymentRequest.orderId
 * @requiredField options.orderPaymentRequest.title
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_CREATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns The created OrderPaymentRequest.
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.CreateOrderPaymentRequest
 */
export async function createOrderPaymentRequest(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        orderPaymentRequest: options?.orderPaymentRequest,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'orderPaymentRequest.image' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1OrderPaymentRequest.createOrderPaymentRequest(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'orderPaymentRequest.image' }],
            },
        ]))?.orderPaymentRequest;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                orderPaymentRequest: '$[0].orderPaymentRequest',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a order payment request.
 * @param orderPaymentRequestId - ID of the OrderPaymentRequest to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField orderPaymentRequestId
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns The requested OrderPaymentRequest.
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.GetOrderPaymentRequest
 */
export async function getOrderPaymentRequest(orderPaymentRequestId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        orderPaymentRequestId: orderPaymentRequestId,
    });
    const reqOpts = ambassadorWixEcomV1OrderPaymentRequest.getOrderPaymentRequest(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'orderPaymentRequest.image' }],
            },
        ]))?.orderPaymentRequest;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderPaymentRequestId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderPaymentRequestId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a order payment request.
 *
 * Please note that only `UNPAID` payment requests can be updated.
 * @param _id - Order payment request ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField orderPaymentRequest
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns Updated OrderPaymentRequest.
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.UpdateOrderPaymentRequest
 */
export async function updateOrderPaymentRequest(_id, orderPaymentRequest) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        orderPaymentRequest: { ...orderPaymentRequest, id: _id },
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'orderPaymentRequest.image' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1OrderPaymentRequest.updateOrderPaymentRequest(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'orderPaymentRequest.image' }],
            },
        ]))?.orderPaymentRequest;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { orderPaymentRequest: '$[1]' },
            explicitPathsToArguments: { 'orderPaymentRequest.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'orderPaymentRequest']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a order payment request.
 *
 * Please note that only `UNPAID` payment requests can be deleted.
 * @param orderPaymentRequestId - Id of the OrderPaymentRequest to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField orderPaymentRequestId
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.DeleteOrderPaymentRequest
 */
export async function deleteOrderPaymentRequest(orderPaymentRequestId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        orderPaymentRequestId: orderPaymentRequestId,
    });
    const reqOpts = ambassadorWixEcomV1OrderPaymentRequest.deleteOrderPaymentRequest(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderPaymentRequestId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderPaymentRequestId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of Payment Requests, given the provided [paging, filtering, and sorting][1].
 *
 * Query Payment Requests runs with these defaults, which you can override:
 * - `createdDate` is sorted in DESC order
 * - `cursorPaging.limit` is 100
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language), and
 * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.QueryOrderPaymentRequests
 */
export function queryOrderPaymentRequests() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixEcomV1OrderPaymentRequest.queryOrderPaymentRequests(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(transformPaths(data, [
                {
                    transformFn: transformRESTImageToSDKImage,
                    paths: [{ path: 'orderPaymentRequests.image' }],
                },
            ]));
            return {
                items: transformedData?.orderPaymentRequests,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Retrieves the order payment request page URL of a specified order payment request.
 * @param orderPaymentRequestId - Order Payment Request ID.
 * @public
 * @documentationMaturity preview
 * @requiredField orderPaymentRequestId
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.GetOrderPaymentRequestURL
 */
export async function getOrderPaymentRequestUrl(orderPaymentRequestId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        orderPaymentRequestId: orderPaymentRequestId,
    });
    const reqOpts = ambassadorWixEcomV1OrderPaymentRequest.getOrderPaymentRequestUrl(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderPaymentRequestId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderPaymentRequestId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates extended fields of a order payment request
 * @param _id - ID of the entity to update.
 * @param namespace - Identifier for the app whose extended fields are being updated.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField namespace
 * @requiredField options
 * @requiredField options.namespaceData
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.UpdateExtendedFields
 */
export async function updateExtendedFields(_id, namespace, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        id: _id,
        namespace: namespace,
        namespaceData: options?.namespaceData,
    });
    const reqOpts = ambassadorWixEcomV1OrderPaymentRequest.updateExtendedFields(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'orderPaymentRequest.image' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                id: '$[0]',
                namespace: '$[1]',
                namespaceData: '$[2].namespaceData',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'namespace', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-order-payment-request-order-payment-requests.universal.js.map