"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateExtendedFields = exports.getOrderPaymentRequestUrl = exports.queryOrderPaymentRequests = exports.deleteOrderPaymentRequest = exports.updateOrderPaymentRequest = exports.getOrderPaymentRequest = exports.createOrderPaymentRequest = exports.WebhookIdentityType = exports.SortOrder = exports.Status = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const query_builder_1 = require("@wix/sdk-runtime/query-builder");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixEcomV1OrderPaymentRequest = __importStar(require("./ecom-v1-order-payment-request-order-payment-requests.http.js"));
// @ts-ignore
const image_1 = require("@wix/sdk-runtime/transformations/image");
const image_2 = require("@wix/sdk-runtime/transformations/image");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
var Status;
(function (Status) {
    Status["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    Status["UNPAID"] = "UNPAID";
    Status["PAID"] = "PAID";
    Status["EXPIRED"] = "EXPIRED";
})(Status || (exports.Status = Status = {}));
var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
/**
 * Creates a order payment request.
 * @public
 * @documentationMaturity preview
 * @requiredField options.orderPaymentRequest.amount
 * @requiredField options.orderPaymentRequest.orderId
 * @requiredField options.orderPaymentRequest.title
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_CREATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns The created OrderPaymentRequest.
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.CreateOrderPaymentRequest
 */
async function createOrderPaymentRequest(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        orderPaymentRequest: options?.orderPaymentRequest,
    }), [
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [{ path: 'orderPaymentRequest.image' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1OrderPaymentRequest.createOrderPaymentRequest(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [{ path: 'orderPaymentRequest.image' }],
            },
        ]))?.orderPaymentRequest;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                orderPaymentRequest: '$[0].orderPaymentRequest',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.createOrderPaymentRequest = createOrderPaymentRequest;
/**
 * Retrieves a order payment request.
 * @param orderPaymentRequestId - ID of the OrderPaymentRequest to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField orderPaymentRequestId
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns The requested OrderPaymentRequest.
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.GetOrderPaymentRequest
 */
async function getOrderPaymentRequest(orderPaymentRequestId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        orderPaymentRequestId: orderPaymentRequestId,
    });
    const reqOpts = ambassadorWixEcomV1OrderPaymentRequest.getOrderPaymentRequest(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [{ path: 'orderPaymentRequest.image' }],
            },
        ]))?.orderPaymentRequest;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderPaymentRequestId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderPaymentRequestId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getOrderPaymentRequest = getOrderPaymentRequest;
/**
 * Updates a order payment request.
 *
 * Please note that only `UNPAID` payment requests can be updated.
 * @param _id - Order payment request ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField orderPaymentRequest
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns Updated OrderPaymentRequest.
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.UpdateOrderPaymentRequest
 */
async function updateOrderPaymentRequest(_id, orderPaymentRequest) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        orderPaymentRequest: { ...orderPaymentRequest, id: _id },
    }), [
        {
            transformFn: image_1.transformSDKImageToRESTImage,
            paths: [{ path: 'orderPaymentRequest.image' }],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1OrderPaymentRequest.updateOrderPaymentRequest(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [{ path: 'orderPaymentRequest.image' }],
            },
        ]))?.orderPaymentRequest;
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: { orderPaymentRequest: '$[1]' },
            explicitPathsToArguments: { 'orderPaymentRequest.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'orderPaymentRequest']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateOrderPaymentRequest = updateOrderPaymentRequest;
/**
 * Deletes a order payment request.
 *
 * Please note that only `UNPAID` payment requests can be deleted.
 * @param orderPaymentRequestId - Id of the OrderPaymentRequest to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField orderPaymentRequestId
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.DeleteOrderPaymentRequest
 */
async function deleteOrderPaymentRequest(orderPaymentRequestId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        orderPaymentRequestId: orderPaymentRequestId,
    });
    const reqOpts = ambassadorWixEcomV1OrderPaymentRequest.deleteOrderPaymentRequest(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderPaymentRequestId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderPaymentRequestId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.deleteOrderPaymentRequest = deleteOrderPaymentRequest;
/**
 * Retrieves a list of Payment Requests, given the provided [paging, filtering, and sorting][1].
 *
 * Query Payment Requests runs with these defaults, which you can override:
 * - `createdDate` is sorted in DESC order
 * - `cursorPaging.limit` is 100
 *
 * To learn about working with _Query_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language), and
 * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.QueryOrderPaymentRequests
 */
function queryOrderPaymentRequests() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return (0, query_builder_1.queryBuilder)({
        func: async (payload) => {
            const reqOpts = ambassadorWixEcomV1OrderPaymentRequest.queryOrderPaymentRequests(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(data, [
                {
                    transformFn: image_2.transformRESTImageToSDKImage,
                    paths: [{ path: 'orderPaymentRequests.image' }],
                },
            ]));
            return {
                items: transformedData?.orderPaymentRequests,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = (0, transform_error_1.transformError)(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
exports.queryOrderPaymentRequests = queryOrderPaymentRequests;
/**
 * Retrieves the order payment request page URL of a specified order payment request.
 * @param orderPaymentRequestId - Order Payment Request ID.
 * @public
 * @documentationMaturity preview
 * @requiredField orderPaymentRequestId
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.GetOrderPaymentRequestURL
 */
async function getOrderPaymentRequestUrl(orderPaymentRequestId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        orderPaymentRequestId: orderPaymentRequestId,
    });
    const reqOpts = ambassadorWixEcomV1OrderPaymentRequest.getOrderPaymentRequestUrl(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderPaymentRequestId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderPaymentRequestId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getOrderPaymentRequestUrl = getOrderPaymentRequestUrl;
/**
 * Updates extended fields of a order payment request
 * @param _id - ID of the entity to update.
 * @param namespace - Identifier for the app whose extended fields are being updated.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField namespace
 * @requiredField options
 * @requiredField options.namespaceData
 * @permissionId ECOM.ORDER_PAYMENT_REQUEST_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.order_payment_request.api.v1.OrderPaymentRequestsService.UpdateExtendedFields
 */
async function updateExtendedFields(_id, namespace, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        id: _id,
        namespace: namespace,
        namespaceData: options?.namespaceData,
    });
    const reqOpts = ambassadorWixEcomV1OrderPaymentRequest.updateExtendedFields(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: image_2.transformRESTImageToSDKImage,
                paths: [{ path: 'orderPaymentRequest.image' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                id: '$[0]',
                namespace: '$[1]',
                namespaceData: '$[2].namespaceData',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'namespace', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.updateExtendedFields = updateExtendedFields;
//# sourceMappingURL=ecom-v1-order-payment-request-order-payment-requests.universal.js.map