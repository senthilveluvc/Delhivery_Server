import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixTipsV1Tip from './tips-v1-tip-tips.http.js';
export var IdentityType;
(function (IdentityType) {
    IdentityType["UNKNOWN"] = "UNKNOWN";
    IdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    IdentityType["MEMBER"] = "MEMBER";
    IdentityType["WIX_USER"] = "WIX_USER";
    IdentityType["APP"] = "APP";
})(IdentityType || (IdentityType = {}));
export var Source;
(function (Source) {
    /** There is no information about who created the tip distributions. */
    Source["UNKNOWN_SOURCE"] = "UNKNOWN_SOURCE";
    /** The customer added the tip distributions via an external payment terminal. */
    Source["POS"] = "POS";
    /** The customer added the tip distributions during an online [ecommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction). */
    Source["WEB"] = "WEB";
    /** The business added the tip distributions on behalf of the customer in the site's dashboard. */
    Source["DASHBOARD"] = "DASHBOARD";
})(Source || (Source = {}));
export var TipType;
(function (TipType) {
    /** There is no information about the tip type. */
    TipType["UNKNOWN_TIP_TYPE"] = "UNKNOWN_TIP_TYPE";
    /** The tip is calculated as a percentage of the subtotal of associated line items. */
    TipType["PERCENTAGE"] = "PERCENTAGE";
    /** The tip is a fixed value, pre-configured from the relevant settings presets. */
    TipType["AMOUNT"] = "AMOUNT";
    /** The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values. */
    TipType["CUSTOM"] = "CUSTOM";
})(TipType || (TipType = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var QueryBy;
(function (QueryBy) {
    QueryBy["UNKNOWN_QUERY_BY"] = "UNKNOWN_QUERY_BY";
    QueryBy["ORDER"] = "ORDER";
    QueryBy["TIP"] = "TIP";
})(QueryBy || (QueryBy = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Previews a tip for a list of line items.
 *
 *
 * If you provide the Wix Bookings app ID `13d21c63-b5ec-5912-8397-c3a5ddb27a97` as `lineItemInfo.catalogReference.appId`, the response includes tip
 * distributions for each associated Bookings staff member.
 *
 * If you don't provide a `tipSettingsId`, the `staffDistributionMethod` is
 * based on the site's default tip settings.
 * @param lineItemInfo - Information about the line items to preview the tip for.
 *
 * Min: 1 line item
 * Max: 50 line items
 * @public
 * @documentationMaturity preview
 * @requiredField lineItemInfo
 * @requiredField lineItemInfo.catalogReference.appId
 * @requiredField lineItemInfo.catalogReference.catalogItemId
 * @requiredField lineItemInfo.price
 * @requiredField options.tipChoice
 * @requiredField options.tipChoice.tipType
 * @requiredField options.tipChoice.value
 * @param options - Options to use when previewing a tip.
 * @permissionId WIX_TIPS.TIP_PREVIEW
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.PreviewTip
 */
export async function previewTip(lineItemInfo, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        lineItemInfo: lineItemInfo,
        tipChoice: options?.tipChoice,
        tipSettingsId: options?.tipSettingsId,
    });
    const reqOpts = ambassadorWixTipsV1Tip.previewTip(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                lineItemInfo: '$[0]',
                tipChoice: '$[1].tipChoice',
                tipSettingsId: '$[1].tipSettingsId',
            },
            singleArgumentUnchanged: false,
        }, ['lineItemInfo', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves the tip that's associated with an
 * [eCommerce order](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/setup).
 * @param orderId - ID of the order to retrieve the tip for.
 * @public
 * @documentationMaturity preview
 * @requiredField orderId
 * @permissionId WIX_TIPS.TIP_READ
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.GetTipByOrderId
 */
export async function getTipByOrderId(orderId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ orderId: orderId });
    const reqOpts = ambassadorWixTipsV1Tip.getTipByOrderId(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves the tip that's associated with an eCommerce draft order.
 *
 *
 * <blockquote class="important">
 *
 * __Important:__
 * The eCommerce Draft Orders API is currently under development and not yet available to users.
 *
 * </blockquote>
 * @param draftOrderId - ID of the draft order to retrieve the tip for.
 * @public
 * @documentationMaturity preview
 * @requiredField draftOrderId
 * @permissionId WIX_TIPS.TIP_READ
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.GetTipByDraftOrderId
 */
export async function getTipByDraftOrderId(draftOrderId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        draftOrderId: draftOrderId,
    });
    const reqOpts = ambassadorWixTipsV1Tip.getTipByDraftOrderId(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { draftOrderId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['draftOrderId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves the tip choice that's currently selected by the customer for a specific [eCommerce checkout](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/setup).
 * If the customer hasn't yet selected a tip choice, the response is empty.
 * @param purchaseFlowId - ID of the [eCommerce purchase flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/wix-e-commerce-platform-handbook/overview/architecture-data-flow)
 * to retrieve the tip choice for.
 * @public
 * @documentationMaturity preview
 * @requiredField purchaseFlowId
 * @permissionId WIX_TIPS.TIP_GET_CHOICE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.tips.tip.v1.TipsService.GetTipChoice
 */
export async function getTipChoice(purchaseFlowId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        purchaseFlowId: purchaseFlowId,
    });
    const reqOpts = ambassadorWixTipsV1Tip.getTipChoice(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { purchaseFlowId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['purchaseFlowId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates the tip choice that's currently selected by the customer for a specific [eCommerce checkout](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/setup).
 * @param tipChoice - Tip choice to select for the purchase flow. The call fails if you provide a
 * value for `tipChoice.tipType` that doesn't match the relevant tip settings
 * configuration. For example:
 * + `AMOUNT` when `tipSettings.tipType` isn't `AMOUNT`.
 * + `PERCENTAGE` when `tipSettings.tipType` isn't `PERCENTAGE`.
 * + `CUSTOM` when `tipSettings.allowCustomTip` is `false`.
 * @public
 * @documentationMaturity preview
 * @requiredField options
 * @requiredField options.purchaseFlowId
 * @requiredField tipChoice
 * @param options - Options to use when updating a tip choice.
 * @permissionId WIX_TIPS.TIP_UPDATE_CHOICE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.tips.tip.v1.TipsService.UpdateTipChoice
 */
export async function updateTipChoice(tipChoice, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        tipChoice: tipChoice,
        purchaseFlowId: options?.purchaseFlowId,
    });
    const reqOpts = ambassadorWixTipsV1Tip.updateTipChoice(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                tipChoice: '$[0]',
                purchaseFlowId: '$[1].purchaseFlowId',
            },
            singleArgumentUnchanged: false,
        }, ['tipChoice', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates the tip choice that's currently selected by the customer for a specific [eCommerce checkout](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/setup).
 * @public
 * @documentationMaturity preview
 * @requiredField options.tip
 * @requiredField options.tip.distributions.transaction._id
 * @requiredField options.tip.distributions.transaction.date
 * @param options - Options to use when setting a tip on an order.
 * @permissionId WIX_TIPS.TIP_SET
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.SetTipOnOrder
 */
export async function setTipOnOrder(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        orderId: options?.orderId,
        tip: options?.tip,
    });
    const reqOpts = ambassadorWixTipsV1Tip.setTipOnOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderId: '$[0].orderId', tip: '$[0].tip' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Removes a tip from an
 * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
 *
 *
 * If no tip exists on the order, the call succeeds and the response contains an
 * empty `OrderInfo` object.
 *
 * The call fails if the customer has already been charged for at least one of
 * the associated tip distributions.
 * @public
 * @documentationMaturity preview
 * @param options - Options to use when removing a tip from an order.
 * @permissionId WIX_TIPS.TIP_REMOVE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.RemoveTipFromOrder
 */
export async function removeTipFromOrder(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        orderId: options?.orderId,
    });
    const reqOpts = ambassadorWixTipsV1Tip.removeTipFromOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderId: '$[0].orderId' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Adds tip distributions to an
 * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
 *
 *
 * If no tip exists on the order, an `additionalFee` is added and the total tip
 * amount is equal to the sum of all distribution amounts. If a tip is already
 * present, the existing `additionalFee` is replaced and the total tip amount is
 * increased by the sum of the new tip distributions.
 *
 * The call fails if:
 * + The order's `paymentStatus` is either `FULLY_REFUNDED` or `PARTIALLY_REFUNDED`.
 * + Any of the tip distribution amounts is zero or negative.
 * @public
 * @documentationMaturity preview
 * @requiredField options.tipDistributions
 * @requiredField options.tipDistributions.transaction._id
 * @requiredField options.tipDistributions.transaction.date
 * @param options - Options to use when adding tip distributions to an order.
 * @permissionId WIX_TIPS.TIP_DISTRIBUTION_ADD
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.AddTipDistributionsToOrder
 */
export async function addTipDistributionsToOrder(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        orderId: options?.orderId,
        tipDistributions: options?.tipDistributions,
    });
    const reqOpts = ambassadorWixTipsV1Tip.addTipDistributionsToOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                orderId: '$[0].orderId',
                tipDistributions: '$[0].tipDistributions',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a query to retrieve a list of tip distributions.
 *
 * The `queryTipDistributions()` function builds a query to retrieve a list of tip distributions and returns a `TipDistributionsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the [find()](https://dev.wix.com/docs/sdk/backend-modules/ecom/tips/tip-distributions-query-builder/find) function.
 *
 * You can refine the query by chaining `TipDistributionsQueryBuilder` functions onto the query. `TipDistributionsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTipDistributions()` returns.
 *
 * `queryTipDistributions()` runs with the following `TipDistributionsQueryBuilder` default that you can override:
 *
 * + `limit` is `50`
 *
 * The functions that are chained to `queryTipDistributions()` are applied in the order they are called. For example, if you apply `ascending("transaction.transactionDate")` and then `ascending("staff.id")`, the results are sorted first by the `"transaction.transactionDate"`, and then, if there are multiple results with the same `"transaction.transactionDate"`, the items are sorted by `"staff.id"`.
 *
 * When setting a date filter remember to use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * The following `TipDistributionsQueryBuilder` functions are supported for the `queryTipDistributions()` function. For a full description of the tip distributions object, see the object returned for the [items](https://dev.wix.com/docs/sdk/backend-modules/ecom/tips/tip-distributions-query-result/items) property in `TipDistributionsQueryResult`.
 *
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId WIX_TIPS.TIP_DISTRIBUTION_READ
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.QueryTipDistributions
 */
export function queryTipDistributions() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixTipsV1Tip.queryTipDistributions(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(data);
            return {
                items: transformedData?.tipDistributions,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Sums tip distribution amounts, given the provided filtering.
 * @param filter - Filter object in the following format:
 * `"filter" : {
 * "fieldName1": "value1",
 * "fieldName2":{"$operator":"value2"}
 * }`
 * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
 * @public
 * @documentationMaturity preview
 * @requiredField filter
 * @permissionId WIX_TIPS.TIP_DISTRIBUTION_READ
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.tip.v1.TipsService.SumTipDistributionAmounts
 */
export async function sumTipDistributionAmounts(filter) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ filter: filter });
    const reqOpts = ambassadorWixTipsV1Tip.sumTipDistributionAmounts(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { filter: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['filter']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=tips-v1-tip-tips.universal.js.map