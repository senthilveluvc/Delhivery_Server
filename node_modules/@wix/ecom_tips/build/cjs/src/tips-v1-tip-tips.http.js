"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sumTipDistributionAmounts = exports.queryTipDistributions = exports.addTipDistributionsToOrder = exports.removeTipFromOrder = exports.setTipOnOrder = exports.updateTipChoice = exports.getTipChoice = exports.getTipByDraftOrderId = exports.getTipByOrderId = exports.previewTip = void 0;
const rest_modules_1 = require("@wix/sdk-runtime/rest-modules");
const timestamp_1 = require("@wix/sdk-runtime/transformations/timestamp");
const timestamp_2 = require("@wix/sdk-runtime/transformations/timestamp");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
const rest_modules_2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixTipsTipV1TipsServiceUrl(opts) {
    const domainToMappings = {
        'manage._base_domain_': [
            {
                srcPath: '/_api/tips-service',
                destPath: '',
            },
        ],
        _: [
            {
                srcPath: '/_api/tips-service',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/tips',
                destPath: '',
            },
        ],
    };
    return (0, rest_modules_2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/ecom_tips';
/**
 * Previews a tip for a list of line items.
 *
 *
 * If you provide the Wix Bookings app ID `13d21c63-b5ec-5912-8397-c3a5ddb27a97` as `lineItemInfo.catalogReference.appId`, the response includes tip
 * distributions for each associated Bookings staff member.
 *
 * If you don't provide a `tipSettingsId`, the `staffDistributionMethod` is
 * based on the site's default tip settings.
 */
function previewTip(payload) {
    function __previewTip({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'POST',
            methodFqn: 'wix.tips.tip.v1.TipsService.PreviewTip',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/preview',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'tip.distributions.createdDate' },
                        { path: 'tip.distributions.transaction.date' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __previewTip;
}
exports.previewTip = previewTip;
/**
 * Retrieves the tip that's associated with an
 * [eCommerce order](https://dev.wix.com/docs/sdk/backend-modules/ecom/orders/setup).
 */
function getTipByOrderId(payload) {
    function __getTipByOrderId({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'GET',
            methodFqn: 'wix.tips.tip.v1.TipsService.GetTipByOrderId',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/order/{orderId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'tip.distributions.createdDate' },
                        { path: 'tip.distributions.transaction.date' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getTipByOrderId;
}
exports.getTipByOrderId = getTipByOrderId;
/**
 * Retrieves the tip that's associated with an eCommerce draft order.
 *
 *
 * <blockquote class="important">
 *
 * __Important:__
 * The eCommerce Draft Orders API is currently under development and not yet available to users.
 *
 * </blockquote>
 */
function getTipByDraftOrderId(payload) {
    function __getTipByDraftOrderId({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'GET',
            methodFqn: 'wix.tips.tip.v1.TipsService.GetTipByDraftOrderId',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/draft-order/{draftOrderId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'tip.distributions.createdDate' },
                        { path: 'tip.distributions.transaction.date' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getTipByDraftOrderId;
}
exports.getTipByDraftOrderId = getTipByDraftOrderId;
/**
 * Retrieves the tip choice that's currently selected by the customer for a specific [eCommerce checkout](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/setup).
 * If the customer hasn't yet selected a tip choice, the response is empty.
 */
function getTipChoice(payload) {
    function __getTipChoice({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'GET',
            methodFqn: 'wix.tips.tip.v1.TipsService.GetTipChoice',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/choice/{purchaseFlowId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
        };
        return metadata;
    }
    return __getTipChoice;
}
exports.getTipChoice = getTipChoice;
/** Updates the tip choice that's currently selected by the customer for a specific [eCommerce checkout](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/setup). */
function updateTipChoice(payload) {
    function __updateTipChoice({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'PATCH',
            methodFqn: 'wix.tips.tip.v1.TipsService.UpdateTipChoice',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/choice',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __updateTipChoice;
}
exports.updateTipChoice = updateTipChoice;
/** Updates the tip choice that's currently selected by the customer for a specific [eCommerce checkout](https://dev.wix.com/docs/sdk/backend-modules/ecom/checkout/setup). */
function setTipOnOrder(payload) {
    function __setTipOnOrder({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'tip.distributions.createdDate' },
                    { path: 'tip.distributions.transaction.date' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'POST',
            methodFqn: 'wix.tips.tip.v1.TipsService.SetTipOnOrder',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/set',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'tip.distributions.createdDate' },
                        { path: 'tip.distributions.transaction.date' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __setTipOnOrder;
}
exports.setTipOnOrder = setTipOnOrder;
/**
 * Removes a tip from an
 * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
 *
 *
 * If no tip exists on the order, the call succeeds and the response contains an
 * empty `OrderInfo` object.
 *
 * The call fails if the customer has already been charged for at least one of
 * the associated tip distributions.
 */
function removeTipFromOrder(payload) {
    function __removeTipFromOrder({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'POST',
            methodFqn: 'wix.tips.tip.v1.TipsService.RemoveTipFromOrder',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/remove',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __removeTipFromOrder;
}
exports.removeTipFromOrder = removeTipFromOrder;
/**
 * Adds tip distributions to an
 * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/introduction).
 *
 *
 * If no tip exists on the order, an `additionalFee` is added and the total tip
 * amount is equal to the sum of all distribution amounts. If a tip is already
 * present, the existing `additionalFee` is replaced and the total tip amount is
 * increased by the sum of the new tip distributions.
 *
 * The call fails if:
 * + The order's `paymentStatus` is either `FULLY_REFUNDED` or `PARTIALLY_REFUNDED`.
 * + Any of the tip distribution amounts is zero or negative.
 */
function addTipDistributionsToOrder(payload) {
    function __addTipDistributionsToOrder({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'tipDistributions.createdDate' },
                    { path: 'tipDistributions.transaction.date' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'POST',
            methodFqn: 'wix.tips.tip.v1.TipsService.AddTipDistributionsToOrder',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/tip-distributions/add',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'tipDistributions.createdDate' },
                        { path: 'tipDistributions.transaction.date' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __addTipDistributionsToOrder;
}
exports.addTipDistributionsToOrder = addTipDistributionsToOrder;
/**
 * Creates a query to retrieve a list of tip distributions.
 *
 * The `queryTipDistributions()` function builds a query to retrieve a list of tip distributions and returns a `TipDistributionsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the [find()](https://dev.wix.com/docs/sdk/backend-modules/ecom/tips/tip-distributions-query-builder/find) function.
 *
 * You can refine the query by chaining `TipDistributionsQueryBuilder` functions onto the query. `TipDistributionsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTipDistributions()` returns.
 *
 * `queryTipDistributions()` runs with the following `TipDistributionsQueryBuilder` default that you can override:
 *
 * + `limit` is `50`
 *
 * The functions that are chained to `queryTipDistributions()` are applied in the order they are called. For example, if you apply `ascending("transaction.transactionDate")` and then `ascending("staff.id")`, the results are sorted first by the `"transaction.transactionDate"`, and then, if there are multiple results with the same `"transaction.transactionDate"`, the items are sorted by `"staff.id"`.
 *
 * When setting a date filter remember to use
 * [UTC time](https://en.wikipedia.org/wiki/Coordinated_Universal_Time).
 *
 * The following `TipDistributionsQueryBuilder` functions are supported for the `queryTipDistributions()` function. For a full description of the tip distributions object, see the object returned for the [items](https://dev.wix.com/docs/sdk/backend-modules/ecom/tips/tip-distributions-query-result/items) property in `TipDistributionsQueryResult`.
 *
 */
function queryTipDistributions(payload) {
    function __queryTipDistributions({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'POST',
            methodFqn: 'wix.tips.tip.v1.TipsService.QueryTipDistributions',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/tip-distributions/query',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'tipDistributions.createdDate' },
                        { path: 'tipDistributions.transaction.date' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __queryTipDistributions;
}
exports.queryTipDistributions = queryTipDistributions;
/** Sums tip distribution amounts, given the provided filtering. */
function sumTipDistributionAmounts(payload) {
    function __sumTipDistributionAmounts({ host }) {
        const metadata = {
            entityFqdn: 'wix.tips.v1.tip',
            method: 'POST',
            methodFqn: 'wix.tips.tip.v1.TipsService.SumTipDistributionAmounts',
            packageName: PACKAGE_NAME,
            url: resolveWixTipsTipV1TipsServiceUrl({
                protoPath: '/v1/tips/tip-distributions/sum-amounts',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __sumTipDistributionAmounts;
}
exports.sumTipDistributionAmounts = sumTipDistributionAmounts;
//# sourceMappingURL=tips-v1-tip-tips.http.js.map