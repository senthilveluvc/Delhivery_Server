/**
 * A tip holds information about how much a customer has tipped, how the tip is
 * distributed among staff, and the associated orderâ€™s line item subtotal.
 */
export interface Tip {
    /**
     * ID of the tip. Identical to the `code` of the related `order.additionalFee`.
     * @readonly
     */
    id?: string | null;
    /**
     * Subtotal of all line items from the [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)
     * that's related to the tip. In the response of
     * [Preview Tip](https://dev.wix.com/docs/rest/business-solutions/e-commerce/tips/tips/preview-tip),
     * there is no related eCommerce order. Then, value of this field corresponds to
     * the sum of all line item prices passed in the request.
     * @readonly
     */
    lineItemSubtotal?: string | null;
    /**
     * Total amount of the tip.
     *
     * Min: `0.00`
     */
    amount?: string | null;
    /**
     * Details about how the tip is shared among staff. Available only if at least
     * one staff member receives part of the tip, and it's not entirely allocated to
     * the business.
     *
     * Max: 50 distributions
     */
    distributions?: TipDistribution[];
    /**
     * Undistributed tip amount. Calculated as the difference between `tip.amount`
     * and the sum of all `tip.tipDistributions.amount` values.
     *
     * Min: `0.01`
     * @readonly
     */
    undistributedAmount?: string | null;
}
export interface TipDistribution {
    /**
     * ID of the tip distribution.
     * @readonly
     */
    id?: string | null;
    /**
     * ID of the tip associated with the distribution. Matches the corresponding
     * `order.additionalFee.code`.
     * @readonly
     */
    tipId?: string | null;
    /** Information about the business staff receiving the tip distribution. */
    staff?: Staff;
    /**
     * Amount of the tip distribution.
     *
     * Min: `0.00`
     */
    amount?: string | null;
    /**
     * Details about the related line items from the
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object).
     *
     * Max: 10 `lineItemInfo` objects
     */
    lineItemInfo?: LineItemInfo[];
    /**
     * Details of how the customer is charged for the tip. Available only if the
     * [transcation](https://dev.wix.com/docs/rest/business-management/payments/cashier/payments/transaction/transaction-object)
     * has been created.
     */
    transaction?: Transaction;
    /**
     * ID of the [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/orders/order-object)
     * associated with the tip distribution. Identical for all distributions that
     * belong to the same tip.
     * @readonly
     */
    orderId?: string | null;
    /**
     * Date and time the distribution was created in
     * `YYYY-MM-DDThh:mm:ss.sssZ` format.
     * @readonly
     */
    createdDate?: Date | null;
}
export interface CommonIdentificationData extends CommonIdentificationDataIdOneOf {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /**
     * ID of the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/introduction)
     * in the site's [CRM by Ascend](https://www.wix.com/ascend/crm) system.
     */
    contactId?: string | null;
}
/** @oneof */
export interface CommonIdentificationDataIdOneOf {
    /** ID of a site visitor who hasn't logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor who has logged in to the site. */
    memberId?: string;
    /**
     * ID of a Wix user. For example, the site owner or a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum IdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
export interface Staff {
    /**
     * ID of the staff receiving the tip. Matches `staffMemberId` if available, or
     * `identificationData.wixUserId` if not.
     * @readonly
     */
    id?: string | null;
    /**
     * Staff name. Matches `staffMember.name` if the staff is a
     * [Bookings staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/staff-member-object),
     * or the [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/contact-v4/contact-object)'s
     * `info.name` if not.
     *
     * Max: 500 characters
     * @readonly
     */
    name?: string | null;
    /**
     * ID of the [staff member](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/staff-member-object).
     * Available only if the staff is a staff member and not a
     * [site collaborator](https://support.wix.com/en/article/inviting-people-to-contribute-to-your-site).
     */
    staffMemberId?: string | null;
    /**
     * Identification data. Available only if the staff is a
     * [contact](https://dev.wix.com/docs/rest/crm/members-contacts/contacts/contacts/contact-v4/contact-object)
     * on the Wix site. Note that not all site collaborators are also
     * [staff members](https://dev.wix.com/docs/rest/business-solutions/bookings/staff-members/introduction).
     */
    identificationData?: CommonIdentificationData;
}
export interface LineItemInfo {
    /**
     * IDs of the line items associated with the tip.
     *
     * Min: 1 character
     * Max: 100 characters
     */
    lineItemId?: string | null;
    /**
     * Information about the line item and the corresponding catalog. Catalogs
     * include Wix Bookings and Wix Stores.
     */
    catalogReference?: CatalogReference;
    /**
     * Price of the line item.
     *
     * Min: `0.00`
     */
    price?: string | null;
    /**
     * Name of the line item, which is identical to:
     * + `product.name` for [Stores](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores).
     * + `service.name` for [Bookings](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings).
     *
     * Min: 1 character
     * Max: 200 characters
     */
    name?: string | null;
    /**
     * Quantity of the line item.
     *
     * Min: `1`
     * Max: `100000` (one hundred thousand)
     */
    quantity?: number | null;
}
export interface CatalogReference {
    /**
     * ID of the line item within its catalog, corresponding to:
     * + `product.id` for [Stores](https://dev.wix.com/docs/rest/business-solutions/stores/about-wix-stores).
     * + `service.id` for [Bookings](https://dev.wix.com/docs/rest/business-solutions/bookings/about-wix-bookings).
     */
    catalogItemId?: string | null;
    /**
     * ID of the [app](https://dev.wix.com/docs/rest/articles/getting-started/wix-business-solutions)
     * to which the catalog belongs.
     *
     * Supported app IDs:
     * + [Wix Tips](https://www.wix.com/app-market/wix-tips): `"869a50c8-dd38-4324-b201-e33dc0747a5f"`
     * + [Wix Stores](https://www.wix.com/app-market/wix-stores): `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + [Wix Bookings](https://www.wix.com/app-market/bookings): `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + [Wix Restaurants Orders](https://www.wix.com/app-market/web-solution/wix-restaurants-orders-new): `"13e8d036-5516-6104-b456-c8466db39542"`
     */
    appId?: string | null;
}
export interface Transaction {
    /** ID of the transaction that's associated with the tip distribution. */
    id?: string | null;
    /**
     * Date and time the transaction was created in `YYYY-MM-DDThh:mm:ss.sssZ`
     * format. Isn't identical to the time the customer was actually charged.
     */
    date?: Date | null;
}
export declare enum Source {
    /** There is no information about who created the tip distributions. */
    UNKNOWN_SOURCE = "UNKNOWN_SOURCE",
    /** The customer added the tip distributions via an external payment terminal. */
    POS = "POS",
    /** The customer added the tip distributions during an online [ecommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction). */
    WEB = "WEB",
    /** The business added the tip distributions on behalf of the customer in the site's dashboard. */
    DASHBOARD = "DASHBOARD"
}
export interface PreviewTipRequest {
    /**
     * Information about the line items to preview the tip for.
     *
     * Min: 1 line item
     * Max: 50 line items
     */
    lineItemInfo: LineItemInfo[];
    /**
     * Information about how to calculate the total tip amount and the distribution
     * amounts.
     */
    tipChoice: TipChoice;
    /**
     * ID of the tip settings used to preview the tip. If you don't provide a
     * `tipSettingsId`, the `staffDistributionMethod` is based on the site's
     * default tip settings.
     */
    tipSettingsId?: string | null;
}
export interface TipChoice {
    /** Value of the tip choice. */
    value?: string | null;
    /**
     * Type of the tip choice.
     *
     * Supported values:
     * + `UNKNOWN_TIP_TYPE`: There is no information about the tip type.
     * + `PERCENTAGE`: The tip is calculated as a percentage of the subtotal of associated line items.
     * + `AMOUNT`: The tip is a fixed value, pre-configured from the relevant settings presets.
     * + `CUSTOM`: The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values.
     */
    tipType?: TipType;
}
export declare enum TipType {
    /** There is no information about the tip type. */
    UNKNOWN_TIP_TYPE = "UNKNOWN_TIP_TYPE",
    /** The tip is calculated as a percentage of the subtotal of associated line items. */
    PERCENTAGE = "PERCENTAGE",
    /** The tip is a fixed value, pre-configured from the relevant settings presets. */
    AMOUNT = "AMOUNT",
    /** The customer, or the business on behalf of the customer, manually set a tip amount, which may not match any preset values. */
    CUSTOM = "CUSTOM"
}
export interface PreviewTipResponse {
    /** Tip. */
    tip?: Tip;
}
export interface GetTipByOrderIdRequest {
    /** ID of the order to retrieve the tip for. */
    orderId: string | null;
}
export interface GetTipByOrderIdResponse {
    /** Retrieved tip. */
    tip?: Tip;
}
export interface GetTipByDraftOrderIdRequest {
    /** ID of the draft order to retrieve the tip for. */
    draftOrderId: string | null;
}
export interface GetTipByDraftOrderIdResponse {
    /** Retrieved tip. */
    tip?: Tip;
}
export interface GetTipChoiceRequest {
    /**
     * ID of the [eCommerce purchase flow](https://dev.wix.com/docs/rest/business-solutions/e-commerce/wix-e-commerce-platform-handbook/overview/architecture-data-flow)
     * to retrieve the tip choice for.
     */
    purchaseFlowId: string | null;
}
export interface GetTipChoiceResponse {
    /** Tip choice that's currently selected for the given purchase flow. */
    tipChoice?: TipChoice;
}
export interface UpdateTipChoiceRequest {
    /**
     * Tip choice to select for the purchase flow. The call fails if you provide a
     * value for `tipChoice.tipType` that doesn't match the relevant tip settings
     * configuration. For example:
     * + `AMOUNT` when `tipSettings.tipType` isn't `AMOUNT`.
     * + `PERCENTAGE` when `tipSettings.tipType` isn't `PERCENTAGE`.
     * + `CUSTOM` when `tipSettings.allowCustomTip` is `false`.
     */
    tipChoice: TipChoice;
    /**
     * ID of the purchase flow that's associated with the
     * [eCommerce order](https://dev.wix.com/docs/rest/business-solutions/e-commerce/order/introduction)
     */
    purchaseFlowId: string | null;
}
export interface UpdateTipChoiceResponse {
    /**
     * Tip choice currently selected in the
     * [eCommerce checkout](https://dev.wix.com/docs/rest/business-solutions/e-commerce/checkout/introduction)
     * for the given purchase flow.
     */
    tipChoice?: TipChoice;
}
export interface SetTipOnOrderRequest extends SetTipOnOrderRequestIdentifierOneOf {
    /** ID of the order for which to set the tip. */
    orderId?: string | null;
    /** Tip to set on the order. */
    tip: Tip;
}
/** @oneof */
export interface SetTipOnOrderRequestIdentifierOneOf {
    /** ID of the order for which to set the tip. */
    orderId?: string | null;
}
export interface SetTipOnOrderResponse {
    /** Set tip. */
    tip?: Tip;
    /** Information about the order on which the tip was set. */
    orderInfo?: OrderInfo;
}
export interface OrderInfo extends OrderInfoIdentifierOneOf {
    /** Order ID. */
    orderId?: string | null;
    /** ID of the order's additional fee that's associated with the tip. */
    additionalFeeId?: string | null;
    /** Price of the order's additional fee that's associated with the tip. */
    additionalFeePrice?: Price;
}
/** @oneof */
export interface OrderInfoIdentifierOneOf {
    /** Order ID. */
    orderId?: string | null;
}
export interface Price {
    /** Amount of the additional fee that's associated with the tip. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     *
     * Max: 100 characters
     * @readonly
     */
    formattedAmount?: string;
}
export interface RemoveTipFromOrderRequest extends RemoveTipFromOrderRequestIdentifierOneOf {
    /** ID of the order from which to remove the tip. */
    orderId?: string | null;
}
/** @oneof */
export interface RemoveTipFromOrderRequestIdentifierOneOf {
    /** ID of the order from which to remove the tip. */
    orderId?: string | null;
}
export interface RemoveTipFromOrderResponse {
    /** Information about the order from which the tip was removed. */
    orderInfo?: OrderInfo;
}
export interface CreateTipDistributionsRequest {
    /**
     * Tip distributions to create.
     *
     * Min: 1 distribution
     * Max: 50 distributions
     */
    tipDistributions?: TipDistribution[];
    /** ID of the tip for which to create distributions. */
    tipId?: string | null;
}
export interface CreateTipDistributionsResponse {
    /**
     * ID of the tip for which the distributions were created.
     * @readonly
     */
    tipId?: string | null;
    /** Created tip distributions. */
    tipDistributions?: TipDistribution[];
}
export interface DeleteTipDistributionsRequest extends DeleteTipDistributionsRequestDeleteByOneOf {
    /** ID of the tip for which to delete all associated tip distributions. */
    tipId?: string | null;
    /** ID of the order for which to delete all associated tip distributions. */
    orderId?: string | null;
}
/** @oneof */
export interface DeleteTipDistributionsRequestDeleteByOneOf {
    /** ID of the tip for which to delete all associated tip distributions. */
    tipId?: string | null;
    /** ID of the order for which to delete all associated tip distributions. */
    orderId?: string | null;
}
export interface DeleteTipDistributionsResponse {
}
export interface AddTipDistributionsToOrderRequest extends AddTipDistributionsToOrderRequestIdentifierOneOf {
    /** ID of the order for which to add tip distributions. */
    orderId?: string | null;
    /** Tip distributions to add to the order. */
    tipDistributions: TipDistribution[];
}
/** @oneof */
export interface AddTipDistributionsToOrderRequestIdentifierOneOf {
    /** ID of the order for which to add tip distributions. */
    orderId?: string | null;
}
export interface AddTipDistributionsToOrderResponse {
    /** Tip distributions that were added to the order. */
    tipDistributions?: TipDistribution[];
    /** Information about the order to which the tip distributions were added. */
    orderInfo?: OrderInfo;
}
export interface QueryTipDistributionsRequest {
    /** WQL expression. */
    query: CursorQuery;
}
export interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
export interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface CursorPaging {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface QueryTipDistributionsResponse {
    /** Retrieved tip distributions. */
    tipDistributions?: TipDistribution[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
export interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
export interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
export interface SumTipDistributionAmountsRequest {
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     * Example of operators: `$eq`, `$ne`, `$lt`, `$lte`, `$gt`, `$gte`, `$in`, `$hasSome`, `$hasAll`, `$startsWith`, `$contains`
     */
    filter: Record<string, any> | null;
}
export interface SumTipDistributionAmountsResponse {
    /** Total amount of tip distributions matching the filter. */
    totalAmount?: string | null;
}
export interface ApplyTipDistributionsRequest {
    /** ID of the tip for which all tip distributions are applied to the order. */
    tipId?: string | null;
    /** ID of the order for which to apply all tip distributions. */
    orderId?: string | null;
    /** Whether to query by order ID or tip ID. */
    queryBy?: QueryBy;
}
export declare enum QueryBy {
    UNKNOWN_QUERY_BY = "UNKNOWN_QUERY_BY",
    ORDER = "ORDER",
    TIP = "TIP"
}
export interface ApplyTipDistributionsResponse {
    /** Applied tip distributions. */
    tipDistributions?: TipDistribution[];
}
export interface PublishTipDistributionsCreatedEventRequest {
    /** The tip distributions that will be published on the event. */
    tipDistributions?: TipDistribution[];
    /** The tip ID of the distributions */
    tipId?: string | null;
    /** The order ID that the tip is connected to */
    orderId?: string | null;
}
export interface PublishTipDistributionsCreatedEventResponse {
}
export interface TipDistributionsCreated {
    /** ID of the tip to which the distribution belongs. */
    tipId?: string | null;
    /**
     * Created tip distributions.
     *
     * Min: 1 tip distribution
     * Max: 100 tip distributions
     */
    tipDistributions?: TipDistribution[];
    /** The order ID that the tip is connected to */
    orderId?: string | null;
    /** The undistributed tip amount */
    undistributedAmount?: string | null;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entityAsJson?: string;
    /** Indicates the event was triggered by a restore-from-trashbin operation for a previously deleted entity */
    restoreInfo?: RestoreInfo;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntityAsJson?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntityAsJson?: string | null;
}
export interface ActionEvent {
    bodyAsJson?: string;
}
export interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface CommonIdentificationDataNonNullableFields {
    anonymousVisitorId: string;
    memberId: string;
    wixUserId: string;
    appId: string;
    identityType: IdentityType;
}
interface StaffNonNullableFields {
    identificationData?: CommonIdentificationDataNonNullableFields;
}
interface TipDistributionNonNullableFields {
    staff?: StaffNonNullableFields;
    source: Source;
}
interface TipNonNullableFields {
    distributions: TipDistributionNonNullableFields[];
}
export interface PreviewTipResponseNonNullableFields {
    tip?: TipNonNullableFields;
}
export interface GetTipByOrderIdResponseNonNullableFields {
    tip?: TipNonNullableFields;
}
export interface GetTipByDraftOrderIdResponseNonNullableFields {
    tip?: TipNonNullableFields;
}
interface TipChoiceNonNullableFields {
    tipType: TipType;
}
export interface GetTipChoiceResponseNonNullableFields {
    tipChoice?: TipChoiceNonNullableFields;
}
export interface UpdateTipChoiceResponseNonNullableFields {
    tipChoice?: TipChoiceNonNullableFields;
}
interface PriceNonNullableFields {
    amount: string;
    formattedAmount: string;
}
interface OrderInfoNonNullableFields {
    additionalFeePrice?: PriceNonNullableFields;
}
export interface SetTipOnOrderResponseNonNullableFields {
    tip?: TipNonNullableFields;
    orderInfo?: OrderInfoNonNullableFields;
}
export interface RemoveTipFromOrderResponseNonNullableFields {
    orderInfo?: OrderInfoNonNullableFields;
}
export interface AddTipDistributionsToOrderResponseNonNullableFields {
    tipDistributions: TipDistributionNonNullableFields[];
    orderInfo?: OrderInfoNonNullableFields;
}
export interface QueryTipDistributionsResponseNonNullableFields {
    tipDistributions: TipDistributionNonNullableFields[];
}
export {};
