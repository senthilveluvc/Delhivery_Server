export interface AbandonedCheckout {
    /** Abandoned checkout ID. */
    id?: string;
    /** Date and time the abandoned checkout was created. */
    createdDate?: Date | null;
    /** Date and time the abandoned checkout was updated. */
    updatedDate?: Date | null;
    /** The associated checkout ID. */
    checkoutId?: string | null;
    /** The associated cart ID. */
    cartId?: string | null;
    /** Status of the abandoned checkout. */
    status?: Status;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Buyer information. */
    buyerInfo?: V1BuyerInfo;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
    /** The store's currency. */
    currency?: string;
    /** Currency the buyer used in checkout. */
    conversionCurrency?: string | null;
    /** Total price after discounts, gift cards, and tax. */
    totalPrice?: MultiCurrencyPrice;
    /**
     * List of all automation activities performed by [Wix Automations](https://dev.wix.com/docs/rest/business-management/automations/introduction) regarding the abandoned checkout.
     * Wix Automations updates the `activities` field for each actvity in the automation flow. Only relevant if the site owner set up
     * [automations in the Dashboard](https://support.wix.com/en/article/wix-automations-creating-an-automation-with-the-new-builder#step-1-create-a-new-automation). Read more about `activities` in
     * the [introduction](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/abandoned-checkout/introduction).
     */
    activities?: Activity[];
    /** Date and time the abandoned checkout was recovered. */
    checkoutRecoveredDate?: Date | null;
    /** Checkout URL. */
    checkoutUrl?: string;
    /** Subtotal price of all line items, before discounts and before tax. */
    subtotalPrice?: MultiCurrencyPrice;
}
export declare enum ActivityType {
    /** Not implemented. */
    UNKNOWN_TYPE = "UNKNOWN_TYPE",
    /** Scheduled. */
    SCHEDULED = "SCHEDULED",
    /** Email sent. */
    EMAIL_SENT = "EMAIL_SENT",
    /** Email not sent. */
    EMAIL_NOT_SENT = "EMAIL_NOT_SENT",
    /** Notification sent. */
    NOTIFICATION_SENT = "NOTIFICATION_SENT",
    /** Task created. */
    TASK_CREATED = "TASK_CREATED"
}
/** Status of the abandoned checkout. */
export declare enum Status {
    /** Abandoned. */
    ABANDONED = "ABANDONED",
    /** Recovered. */
    RECOVERED = "RECOVERED"
}
/** Buyer information. */
export interface V1BuyerInfo extends V1BuyerInfoIdOneOf {
    /** Visitor ID (if the site visitor is **not** a site member). */
    visitorId?: string;
    /** Member ID (if the site visitor is a site member). */
    memberId?: string;
    /** User ID (if the site visitor is a site owner or collaborator). */
    userId?: string;
    /**
     * Contact ID. For more information, see the [Contacts API](https://dev.wix.com/docs/rest/api-reference/contacts/introduction).
     * @readonly
     */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
export interface V1BuyerInfoIdOneOf {
    /** Visitor ID (if the site visitor is **not** a site member). */
    visitorId?: string;
    /** Member ID (if the site visitor is a site member). */
    memberId?: string;
    /** User ID (if the site visitor is a site owner or collaborator). */
    userId?: string;
}
/** Full contact details for an address */
export interface FullAddressContactDetails {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
export interface VatId {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType;
}
/** tax info types */
export declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
export interface MultiCurrencyPrice {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
export interface Activity {
    /** Date and time the automation activity was created. */
    createdDate?: Date | null;
    /** Automation activity type. */
    type?: ActivityType;
}
export interface CartAbandonedEvent {
    cartId?: string;
    /**
     * Time the cart was created
     * @readonly
     */
    creationTime?: Date | null;
    /**
     * Time the cart was abandoned
     * @readonly
     */
    abandonTime?: Date | null;
    /** Buyer information */
    buyerInfo?: BuyerInfo;
    /** Amount of items in cart */
    itemsCount?: number;
    /** Coupon ID (if relevant) */
    couponId?: string;
    /** Subtotal of all line items in cart, not before shipping and taxes */
    totals?: Totals;
    /** Checkout URL - checkout with the abandoned cart details */
    checkoutUrl?: string;
}
export interface BuyerInfo {
    /** Wix customer ID */
    id?: string;
    /** Customer information */
    identityType?: Identity;
    /** Customer's email address */
    email?: string | null;
    /** Customer's phone number */
    phone?: string | null;
    /** Customer's first name */
    firstName?: string | null;
    /** Customer's last name */
    lastName?: string | null;
}
export declare enum Identity {
    /** Customer is the site owner */
    ADMIN = "ADMIN",
    /** Customer is logged in */
    MEMBER = "MEMBER",
    /** Customer is not logged in */
    VISITOR = "VISITOR",
    /** Contact was created for the customer */
    CONTACT = "CONTACT"
}
export interface Totals {
    /** Subtotal of all line items in cart, without shipping and taxes */
    subtotal?: number | null;
    /** Total cart price */
    total?: number | null;
    /** Formatted total cart price includes currency symbol */
    formattedTotal?: string;
}
export interface CartRecoveredEvent {
    cartId?: string;
    /**
     * Time the cart was recovered
     * @readonly
     */
    recoveredTime?: Date | null;
    /**
     * Time the cart was created
     * @readonly
     */
    creationTime?: Date | null;
    /**
     * Time the cart was abandoned
     * @readonly
     */
    abandonedTime?: Date | null;
}
export interface GetAbandonedCheckoutRequest {
    /** Abandoned checkout ID. */
    abandonedCheckoutId: string;
}
export interface GetAbandonedCheckoutResponse {
    /** The requested abandoned checkout. */
    abandonedCheckout?: AbandonedCheckout;
}
export interface DeleteAbandonedCheckoutRequest {
    /** Id of the abandoned checkout to delete */
    abandonedCheckoutId: string;
}
export interface DeleteAbandonedCheckoutResponse {
}
export interface QueryAbandonedCheckoutsRequest {
    /** Query options. */
    query: QueryV2;
}
export interface QueryV2 extends QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * Learn more about the [filter section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object.
     *
     * Learn more about the [sort section](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
    /** Array of projected fields. A list of specific field names to return. If `fieldsets` are also specified, the union of `fieldsets` and `fields` is returned. */
    fields?: string[];
    /** Array of named, predefined sets of projected fields. A array of predefined named sets of fields to be returned. Specifying multiple `fieldsets` will return the union of fields from all sets. If `fields` are also specified, the union of `fieldsets` and `fields` is returned. */
    fieldsets?: string[];
}
/** @oneof */
export interface QueryV2PagingMethodOneOf {
    /** Paging options to limit and skip the number of items. */
    paging?: Paging;
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface Paging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface QueryAbandonedCheckoutsResponse {
    /**
     * __Deprecated.__ Use `abandonedCheckouts` instead.
     * @deprecated
     */
    results?: AbandonedCheckout[];
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout[];
    /** Details on the paged set of results returned. */
    metadata?: PagingMetadataV2;
}
export interface PagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: Cursors;
}
export interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
export interface SearchAbandonedCheckoutsRequest {
    /** WQL query expression. */
    search?: Search;
}
export interface Search extends SearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging;
    /** A filter object. See documentation [here](https://bo.wix.com/wix-docs/rnd/platformization-guidelines/api-query-language#platformization-guidelines_api-query-language_defining-in-protobuf) */
    filter?: Record<string, any> | null;
    /** Sort object in the form [{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}] */
    sort?: CommonSorting[];
    /** free text to match in searchable fields */
    search?: SearchDetails;
}
/** @oneof */
export interface SearchPagingMethodOneOf {
    /** Pointer to page of results using offset. Can not be used together with 'cursor_paging' */
    paging?: CommonPaging;
    /** Cursor pointing to page of results. Can't be used together with 'paging'. 'cursor_paging.cursor' can not be used together with 'filter' or 'sort' */
    cursorPaging?: CommonCursorPaging;
}
export interface CommonSorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: CommonSortOrder;
}
export declare enum CommonSortOrder {
    /** Ascending order. */
    ASC = "ASC",
    /** Descending order. */
    DESC = "DESC"
}
export interface SearchDetails {
    /** boolean search mode */
    mode?: Mode;
    /** search term or expression */
    expression?: string | null;
    /** fields to search in. if empty - server will search in own default fields */
    fields?: string[];
    /** flag if should use auto fuzzy search (allowing typos by a managed proximity algorithm) */
    fuzzy?: boolean;
}
export declare enum Mode {
    /** Any */
    OR = "OR",
    /** All */
    AND = "AND"
}
export interface CommonPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface CommonCursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface SearchAbandonedCheckoutsResponse {
    /** List of abandoned checkouts. */
    abandonedCheckouts?: AbandonedCheckout[];
    /** Paging metadata. Contains cursor which can be used in next query. */
    pagingMetadata?: CommonPagingMetadataV2;
}
export interface CommonPagingMetadataV2 {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    offset?: number | null;
    /** Total number of items that match the query. Returned if offset paging is used and the `tooManyToCount` flag is not set. */
    total?: number | null;
    /** Flag that indicates the server failed to calculate the `total` field. */
    tooManyToCount?: boolean | null;
    /** Cursors to navigate through the result pages using `next` and `prev`. Returned if cursor paging is used. */
    cursors?: CommonCursors;
}
export interface CommonCursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
export interface AddAbandonedCheckoutActivityRequest {
    /** Id of the abandoned checkout to update */
    abandonedCheckoutId?: string | null;
    /** The type of the activity to add */
    activityType?: ActivityType;
}
export interface AddAbandonedCheckoutActivityResponse {
    /** The updated abandoned checkout with the added activity */
    abandonedCheckout?: AbandonedCheckout;
}
export interface Task {
    key?: TaskKey;
    executeAt?: Date | null;
    payload?: string | null;
}
export interface TaskKey {
    appId?: string;
    instanceId?: string;
    subjectId?: string | null;
}
export interface TaskAction extends TaskActionActionOneOf {
    complete?: Complete;
    cancel?: Cancel;
    reschedule?: Reschedule;
}
/** @oneof */
export interface TaskActionActionOneOf {
    complete?: Complete;
    cancel?: Cancel;
    reschedule?: Reschedule;
}
export interface Complete {
}
export interface Cancel {
}
export interface Reschedule {
    executeAt?: Date | null;
    payload?: string | null;
}
export interface RedirectToCheckoutRequest {
    /** abandoned checkout id */
    abandonedCheckoutId: string;
    /** Identifier of the metaSite this checkout uses */
    metasiteId: string;
}
export interface RawHttpResponse {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry[];
}
export interface HeadersEntry {
    key?: string;
    value?: string;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entityAsJson?: string;
    /** Indicates the event was triggered by a restore-from-trashbin operation for a previously deleted entity */
    restoreInfo?: RestoreInfo;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntityAsJson?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntityAsJson?: string | null;
}
export interface ActionEvent {
    bodyAsJson?: string;
}
export interface Empty {
}
/** Triggered when an abandoned checkout is recovered (the customer completes the checkout). */
export interface AbandonedCheckoutRecovered {
    abandonedCheckout?: AbandonedCheckout;
}
export interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface V1BuyerInfoNonNullableFields {
    visitorId: string;
    memberId: string;
    userId: string;
}
interface VatIdNonNullableFields {
    id: string;
    type: VatType;
}
interface FullAddressContactDetailsNonNullableFields {
    vatId?: VatIdNonNullableFields;
}
interface MultiCurrencyPriceNonNullableFields {
    amount: string;
    convertedAmount: string;
    formattedAmount: string;
    formattedConvertedAmount: string;
}
interface ActivityNonNullableFields {
    type: ActivityType;
}
interface AbandonedCheckoutNonNullableFields {
    id: string;
    status: Status;
    buyerInfo?: V1BuyerInfoNonNullableFields;
    contactDetails?: FullAddressContactDetailsNonNullableFields;
    currency: string;
    totalPrice?: MultiCurrencyPriceNonNullableFields;
    activities: ActivityNonNullableFields[];
    checkoutUrl: string;
    subtotalPrice?: MultiCurrencyPriceNonNullableFields;
}
export interface GetAbandonedCheckoutResponseNonNullableFields {
    abandonedCheckout?: AbandonedCheckoutNonNullableFields;
}
export interface QueryAbandonedCheckoutsResponseNonNullableFields {
    results: AbandonedCheckoutNonNullableFields[];
    abandonedCheckouts: AbandonedCheckoutNonNullableFields[];
}
export interface SearchAbandonedCheckoutsResponseNonNullableFields {
    abandonedCheckouts: AbandonedCheckoutNonNullableFields[];
}
interface HeadersEntryNonNullableFields {
    key: string;
    value: string;
}
export interface RawHttpResponseNonNullableFields {
    body: Uint8Array;
    headers: HeadersEntryNonNullableFields[];
}
export {};
