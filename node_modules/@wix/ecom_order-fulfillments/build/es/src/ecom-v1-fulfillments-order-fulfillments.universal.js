import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1Fulfillments from './ecom-v1-fulfillments-order-fulfillments.http.js';
export var IdentityType;
(function (IdentityType) {
    IdentityType["UNSPECIFIED_IDENTITY_TYPE"] = "UNSPECIFIED_IDENTITY_TYPE";
    /** Site member */
    IdentityType["MEMBER"] = "MEMBER";
    /** Contact */
    IdentityType["CONTACT"] = "CONTACT";
})(IdentityType || (IdentityType = {}));
export var FulfillmentStatus;
(function (FulfillmentStatus) {
    /** None of the order items are fulfilled */
    FulfillmentStatus["NOT_FULFILLED"] = "NOT_FULFILLED";
    /**
     * All of the order items are fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FulfillmentStatus["FULFILLED"] = "FULFILLED";
    /** Order is canceled */
    FulfillmentStatus["CANCELED"] = "CANCELED";
    /** Some, but not all of the order items are fulfilled */
    FulfillmentStatus["PARTIALLY_FULFILLED"] = "PARTIALLY_FULFILLED";
})(FulfillmentStatus || (FulfillmentStatus = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Retrieves fulfillments associated with a specified order.
 *
 *
 * The `listFulfillmentsForSingleOrder()` function returns a Promise that resolves when the fulfillments are retrieved.
 * @param orderId - Order ID for which to retrieve fulfillments.
 * @public
 * @requiredField orderId
 * @permissionId ECOM.READ_FULFILLMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity MEMBER
 * @fqn com.wix.ecom.orders.fulfillments.v1.Fulfillments.ListFulfillmentsForSingleOrder
 */
export async function listFulfillmentsForSingleOrder(orderId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ orderId: orderId });
    const reqOpts = ambassadorWixEcomV1Fulfillments.listFulfillmentsForSingleOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves fulfillments associated with multiple specified orders.
 *
 *
 * The `listFulfillmentsForMultipleOrders()` function returns a Promise that resolves when the fulfillments are retrieved.
 * @param orderIds - List of order IDs for which to retrieve fulfillments.
 * @public
 * @requiredField orderIds
 * @permissionId ECOM.READ_FULFILLMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity MEMBER
 * @fqn com.wix.ecom.orders.fulfillments.v1.Fulfillments.ListFulfillmentsForMultipleOrders
 */
export async function listFulfillmentsForMultipleOrders(orderIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ orderIds: orderIds });
    const reqOpts = ambassadorWixEcomV1Fulfillments.listFulfillmentsForMultipleOrders(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderIds: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates an order fulfillment.
 *
 *
 * The `createFulfillment()` function returns a Promise that resolves when the fulfillment is created.
 * @param orderId - Order ID.
 * @param fulfillment - Fulfillment info.
 * @public
 * @requiredField fulfillment
 * @requiredField fulfillment.lineItems
 * @requiredField fulfillment.lineItems._id
 * @requiredField orderId
 * @permissionId ECOM.MODIFY_FULFILLMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.fulfillments.v1.Fulfillments.CreateFulfillment
 */
export async function createFulfillment(orderId, fulfillment) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        orderId: orderId,
        fulfillment: fulfillment,
    });
    const reqOpts = ambassadorWixEcomV1Fulfillments.createFulfillment(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderId: '$[0]', fulfillment: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['orderId', 'fulfillment']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a fulfillment's properties.
 * To update a field's value, include the new value in the `fulfillment` field in the body params.
 * To remove a field's value, pass `null`.
 *
 *
 * The `updateFulfillment()` function returns a Promise that resolves when the fulfillment is updated.
 *
 * > **Note:** Updating line item IDs or fulfilled quantities is not allowed. To update line item IDs or quantities, delete the fulfillment and create it again.
 * @public
 * @requiredField identifiers
 * @requiredField identifiers.fulfillmentId
 * @requiredField identifiers.orderId
 * @param identifiers - Order and fulfillment IDs to be updated.
 * @param options - Available options to use when updating a fulfillment.
 * @permissionId ECOM.MODIFY_FULFILLMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns Order ID and the orders' associated fulfillments after update.
 * @fqn com.wix.ecom.orders.fulfillments.v1.Fulfillments.UpdateFulfillment
 */
export async function updateFulfillment(identifiers, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        fulfillment: { ...options?.fulfillment, id: identifiers?.fulfillmentId },
        orderId: identifiers?.orderId,
    });
    const reqOpts = ambassadorWixEcomV1Fulfillments.updateFulfillment(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.orderWithFulfillments;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { fulfillment: '$[1].fulfillment' },
            explicitPathsToArguments: {
                'fulfillment.id': '$[0].fulfillmentId',
                orderId: '$[0].orderId',
            },
            singleArgumentUnchanged: false,
        }, ['identifiers', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes an existing order fulfillment.
 *
 *
 * The `deleteFulfillment()` function returns a Promise that resolves when the fulfillment is deleted.
 * @public
 * @requiredField identifiers
 * @requiredField identifiers.fulfillmentId
 * @requiredField identifiers.orderId
 * @param identifiers - Order and fulfillment IDs.
 * @permissionId ECOM.MODIFY_FULFILLMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.fulfillments.v1.Fulfillments.DeleteFulfillment
 */
export async function deleteFulfillment(identifiers) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        fulfillmentId: identifiers?.fulfillmentId,
        orderId: identifiers?.orderId,
    });
    const reqOpts = ambassadorWixEcomV1Fulfillments.deleteFulfillment(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                fulfillmentId: '$[0].fulfillmentId',
                orderId: '$[0].orderId',
            },
            singleArgumentUnchanged: false,
        }, ['identifiers']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates multiple fulfillments for one or more orders.
 *
 *
 * The `bulkCreateFulfillments()` function returns a Promise that resolves when the fulfillments are created.
 * @param ordersWithFulfillments - List of order IDs and their associated fulfillments' info.
 * @public
 * @requiredField ordersWithFulfillments
 * @requiredField ordersWithFulfillments.fulfillments
 * @requiredField ordersWithFulfillments.fulfillments.lineItems
 * @requiredField ordersWithFulfillments.fulfillments.lineItems._id
 * @requiredField ordersWithFulfillments.orderId
 * @permissionId ECOM.MODIFY_FULFILLMENTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.fulfillments.v1.Fulfillments.BulkCreateFulfillment
 */
export async function bulkCreateFulfillments(ordersWithFulfillments) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        ordersWithFulfillments: ordersWithFulfillments,
    });
    const reqOpts = ambassadorWixEcomV1Fulfillments.bulkCreateFulfillment(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { ordersWithFulfillments: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['ordersWithFulfillments']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-fulfillments-order-fulfillments.universal.js.map