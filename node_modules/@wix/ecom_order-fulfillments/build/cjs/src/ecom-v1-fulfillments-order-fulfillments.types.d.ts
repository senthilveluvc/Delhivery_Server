export interface OrderWithFulfillments {
    /** Order ID. */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment[];
}
/** for now, this is a sub-object of Orders, so can refer to order line items by id. */
export interface Fulfillment extends FulfillmentFulfillmentInfoOneOf {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo;
    /**
     * Fulfillment ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Fulfillment creation date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    createdDate?: Date | null;
    /** Line items being fulfilled. */
    lineItems?: FulfillmentLineItem[];
    /**
     * Fulfillment status.
     *
     * Supported values:
     * + `"Pending"`
     * + `"Accepted"`
     * + `"Ready"`
     * + `"In_Delivery"`
     * + `"Fulfilled"`
     */
    status?: string | null;
    /** Fulfillment handling complete. */
    completed?: boolean | null;
}
/** @oneof */
export interface FulfillmentFulfillmentInfoOneOf {
    /** Tracking info. */
    trackingInfo?: FulfillmentTrackingInfo;
    /** Custom fulfillment info. */
    customInfo?: CustomFulfillmentInfo;
}
export interface FulfillmentLineItem {
    /** Line item ID (mirrors the ID of the order line item). */
    id?: string;
    /**
     * Line item quantity.
     * * If this property isn't passed on creation, it defaults to the number of items not already linked to a fulfillment.
     * * If the order does not have the requested quantity of line items available to add to this fulfillment, the fulfillment will not be created and an error is returned.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number | null;
}
export interface FulfillmentTrackingInfo {
    /** Shipping/delivery tracking number. */
    trackingNumber?: string | null;
    /**
     * Shipping provider. Using one of the following shipping providers will allow for auto-filling the tracking link:
     * * `'fedex'`
     * * `'ups'`
     * * `'usps'`
     * * `'dhl'`
     * * `'canadaPost'`
     */
    shippingProvider?: string | null;
    /** Tracking link. Auto-filled if a predefined shipping provider is used, otherwise provided on creation. */
    trackingLink?: string | null;
}
export interface CustomFulfillmentInfo {
    /** Custom fulfillment info in key:value form. */
    fieldsData?: Record<string, string>;
}
export interface FulfillmentCreated {
    /** Order ID (auto generated upon order creation). */
    orderId?: string;
    /** ID of the newly created fulfillment. */
    fulfillmentId?: string;
    /** Fulfillment creation date and time. */
    dateCreated?: Date | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /** Order fulfillment status. */
    fulfillmentStatus?: FulfillmentStatus;
    /** Fulfillment tracking information. */
    trackingInfo?: V2FulfillmentTrackingInfo;
}
/** Buyer Info */
export interface BuyerInfo {
    /** Wix customer ID */
    id?: string | null;
    /**
     * Deprecated (use identityType instead)
     * @readonly
     * @deprecated
     */
    type?: IdentityType;
    /** Customer type */
    identityType?: IdentityType;
    /**
     * Customer's first name
     * @readonly
     */
    firstName?: string;
    /**
     * Customer's last name
     * @readonly
     */
    lastName?: string;
    /**
     * Customer's phone number
     * @readonly
     */
    phone?: string | null;
    /**
     * Customer's email address
     * @readonly
     */
    email?: string;
}
export declare enum IdentityType {
    UNSPECIFIED_IDENTITY_TYPE = "UNSPECIFIED_IDENTITY_TYPE",
    /** Site member */
    MEMBER = "MEMBER",
    /** Contact */
    CONTACT = "CONTACT"
}
export declare enum FulfillmentStatus {
    /** None of the order items are fulfilled */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FULFILLED = "FULFILLED",
    /** Order is canceled */
    CANCELED = "CANCELED",
    /** Some, but not all of the order items are fulfilled */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
export interface V2FulfillmentTrackingInfo {
    /** Tracking number. */
    trackingNumber?: string;
    /**
     * Shipping provider. Using the following shipping providers will allow for autofilling the tracking link:
     * * `fedex`
     * * `ups`
     * * `usps`
     * * `dhl`
     * * `canadaPost`
     */
    shippingProvider?: string;
    /** Tracking link - autofilled if using a predefined shipping provider, otherwise provided on creation. */
    trackingLink?: string | null;
}
export interface FulfillmentUpdated {
    /** Order ID (auto generated upon order creation). */
    orderId?: string;
    /** ID of the updated fulfillment. */
    fulfillmentId?: string;
    /** Fulfillment tracking information. */
    trackingInfo?: V2FulfillmentTrackingInfo;
}
export interface FulfillmentDeleted {
    /** Order ID (auto generated upon order creation). */
    orderId?: string;
    /** ID of the deleted fulfillment. */
    fulfillmentId?: string;
    /** Order fulfillment status. */
    fulfillmentStatus?: FulfillmentStatus;
}
export interface ListFulfillmentsForSingleOrderRequest {
    /** Order ID for which to retrieve fulfillments. */
    orderId: string;
}
export interface ListFulfillmentsForSingleOrderResponse {
    /** List of fulfillments associated with the order. */
    orderWithFulfillments?: OrderWithFulfillments;
}
export interface ListFulfillmentsForMultipleOrdersRequest {
    /** List of order IDs for which to retrieve fulfillments. */
    orderIds: string[];
}
export interface ListFulfillmentsForMultipleOrdersResponse {
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments?: OrderWithFulfillments[];
}
export interface CreateFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info. */
    fulfillment: Fulfillment;
}
export interface CreateFulfillmentResponse {
    /** Order ID and the orders' fulfillments. */
    orderWithFulfillments?: OrderWithFulfillments;
    /** ID of created fulfillment. */
    fulfillmentId?: string;
}
export interface UpdateFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** Fulfillment info to update. */
    fulfillment?: Fulfillment;
}
export interface UpdateFulfillmentResponse {
    /** Order ID and the orders' associated fulfillments after update. */
    orderWithFulfillments?: OrderWithFulfillments;
}
export interface DeleteFulfillmentRequest {
    /** Order ID. */
    orderId: string;
    /** ID of the fulfillment to delete. */
    fulfillmentId: string;
}
export interface DeleteFulfillmentResponse {
    /** Order ID and the order's associated fulfillments after deletion. */
    orderWithFulfillments?: OrderWithFulfillments;
}
export interface BulkCreateFulfillmentRequest {
    /** List of order IDs and their associated fulfillments. */
    ordersWithFulfillments: BulkCreateOrderWithFulfillments[];
}
export interface BulkCreateOrderWithFulfillments {
    /** Order ID. */
    orderId?: string;
    /** Fulfillments associated with the order. */
    fulfillments?: Fulfillment[];
}
export interface BulkCreateFulfillmentResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderFulfillmentsResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkOrderFulfillmentsResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
    ordersWithFulfillments?: OrderWithFulfillments;
}
export interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
export interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
export interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entityAsJson?: string;
    /** Indicates the event was triggered by a restore-from-trashbin operation for a previously deleted entity */
    restoreInfo?: RestoreInfo;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntityAsJson?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntityAsJson?: string | null;
}
export interface ActionEvent {
    bodyAsJson?: string;
}
export interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface FulfillmentLineItemNonNullableFields {
    id: string;
}
interface FulfillmentNonNullableFields {
    lineItems: FulfillmentLineItemNonNullableFields[];
}
interface OrderWithFulfillmentsNonNullableFields {
    orderId: string;
    fulfillments: FulfillmentNonNullableFields[];
}
export interface ListFulfillmentsForSingleOrderResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
export interface ListFulfillmentsForMultipleOrdersResponseNonNullableFields {
    ordersWithFulfillments: OrderWithFulfillmentsNonNullableFields[];
}
export interface CreateFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
    fulfillmentId: string;
}
export interface UpdateFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
export interface DeleteFulfillmentResponseNonNullableFields {
    orderWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface BulkOrderFulfillmentsResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    ordersWithFulfillments?: OrderWithFulfillmentsNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
export interface BulkCreateFulfillmentResponseNonNullableFields {
    results: BulkOrderFulfillmentsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
export {};
