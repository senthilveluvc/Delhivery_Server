import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1BackInStockSettings from './ecom-v1-back-in-stock-settings-back-in-stock-settings.http.js';
/**
 * Sets `settings.collectionStates.collectingRequests` to `true` for given `appId`.
 *
 * When the collection state is set to `true`, collecting requests is enabled and customers may request
 * notifications for out of stock products. While collecting is enabled, customers see a "Notify When Available"
 * button on out-of-stock items. Customers can click the button to enter their email address, which creates the
 * notification request.
 * @param appId - ID of the app to start accepting notification requests for.
 * @public
 * @documentationMaturity preview
 * @requiredField appId
 * @permissionId ECOM.MODIFY_BACK_IN_STOCK_NOTIFICATION_SETTINGS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @fqn com.wixpress.ecom.back.in.stock.BackInStockSettingsService.StartCollectingRequests
 */
export async function startCollectingRequests(appId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ appId: appId });
    const reqOpts = ambassadorWixEcomV1BackInStockSettings.startCollectingRequests(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { appId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['appId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Sets `settings.collectionStates.collectingRequests` to `false` for given `appId`.
 *
 * When the collection state is set to `false`, collecting notification requests is disabled.
 * @param appId - ID of the app to stop accepting notification requests for.
 * @public
 * @documentationMaturity preview
 * @requiredField appId
 * @permissionId ECOM.MODIFY_BACK_IN_STOCK_NOTIFICATION_SETTINGS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @fqn com.wixpress.ecom.back.in.stock.BackInStockSettingsService.StopCollectingRequests
 */
export async function stopCollectingRequests(appId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ appId: appId });
    const reqOpts = ambassadorWixEcomV1BackInStockSettings.stopCollectingRequests(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { appId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['appId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves back in stock request settings.
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.READ_BACK_IN_STOCK_NOTIFICATION_SETTINGS
 * @applicableIdentity MEMBER
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.ecom.back.in.stock.BackInStockSettingsService.GetSettings
 */
export async function getSettings() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixEcomV1BackInStockSettings.getSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-back-in-stock-settings-back-in-stock-settings.universal.js.map