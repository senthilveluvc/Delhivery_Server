"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSettings = exports.stopCollectingRequests = exports.startCollectingRequests = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixEcomV1BackInStockSettings = __importStar(require("./ecom-v1-back-in-stock-settings-back-in-stock-settings.http.js"));
/**
 * Sets `settings.collectionStates.collectingRequests` to `true` for given `appId`.
 *
 * When the collection state is set to `true`, collecting requests is enabled and customers may request
 * notifications for out of stock products. While collecting is enabled, customers see a "Notify When Available"
 * button on out-of-stock items. Customers can click the button to enter their email address, which creates the
 * notification request.
 * @param appId - ID of the app to start accepting notification requests for.
 * @public
 * @documentationMaturity preview
 * @requiredField appId
 * @permissionId ECOM.MODIFY_BACK_IN_STOCK_NOTIFICATION_SETTINGS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @fqn com.wixpress.ecom.back.in.stock.BackInStockSettingsService.StartCollectingRequests
 */
async function startCollectingRequests(appId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ appId: appId });
    const reqOpts = ambassadorWixEcomV1BackInStockSettings.startCollectingRequests(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { appId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['appId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.startCollectingRequests = startCollectingRequests;
/**
 * Sets `settings.collectionStates.collectingRequests` to `false` for given `appId`.
 *
 * When the collection state is set to `false`, collecting notification requests is disabled.
 * @param appId - ID of the app to stop accepting notification requests for.
 * @public
 * @documentationMaturity preview
 * @requiredField appId
 * @permissionId ECOM.MODIFY_BACK_IN_STOCK_NOTIFICATION_SETTINGS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @fqn com.wixpress.ecom.back.in.stock.BackInStockSettingsService.StopCollectingRequests
 */
async function stopCollectingRequests(appId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({ appId: appId });
    const reqOpts = ambassadorWixEcomV1BackInStockSettings.stopCollectingRequests(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { appId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['appId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.stopCollectingRequests = stopCollectingRequests;
/**
 * Retrieves back in stock request settings.
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.READ_BACK_IN_STOCK_NOTIFICATION_SETTINGS
 * @applicableIdentity MEMBER
 * @applicableIdentity VISITOR
 * @fqn com.wixpress.ecom.back.in.stock.BackInStockSettingsService.GetSettings
 */
async function getSettings() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({});
    const reqOpts = ambassadorWixEcomV1BackInStockSettings.getSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getSettings = getSettings;
//# sourceMappingURL=ecom-v1-back-in-stock-settings-back-in-stock-settings.universal.js.map