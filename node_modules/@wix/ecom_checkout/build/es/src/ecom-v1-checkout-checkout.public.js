import { renameKeysFromRESTResponseToSDKResponse } from '@wix/sdk-runtime/rename-all-nested-keys';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';
import { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';
import { transformRESTPageURLV2ToSDKPageURLV2 } from '@wix/sdk-runtime/transformations/page-url-v2';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { EventDefinition } from '@wix/sdk-types';
import { addToCheckout as universalAddToCheckout, createCheckout as universalCreateCheckout, createOrder as universalCreateOrder, getCheckout as universalGetCheckout, getCheckoutByCartId as universalGetCheckoutByCartId, getCheckoutUrl as universalGetCheckoutUrl, markCheckoutAsCompleted as universalMarkCheckoutAsCompleted, removeCoupon as universalRemoveCoupon, removeGiftCard as universalRemoveGiftCard, removeLineItems as universalRemoveLineItems, removeOverrideCheckoutUrl as universalRemoveOverrideCheckoutUrl, updateCheckout as universalUpdateCheckout, updateLineItemsQuantity as universalUpdateLineItemsQuantity, } from './ecom-v1-checkout-checkout.universal.js';
export const __metadata = { PACKAGE_NAME: '@wix/ecom' };
export function createCheckout(httpClient) {
    return (options) => universalCreateCheckout(options, 
    // @ts-ignore
    { httpClient });
}
export function getCheckout(httpClient) {
    return (_id) => universalGetCheckout(_id, 
    // @ts-ignore
    { httpClient });
}
export function getCheckoutByCartId(httpClient) {
    return (_id) => universalGetCheckoutByCartId(_id, 
    // @ts-ignore
    { httpClient });
}
export function getCheckoutUrl(httpClient) {
    return (_id) => universalGetCheckoutUrl(_id, 
    // @ts-ignore
    { httpClient });
}
export function updateCheckout(httpClient) {
    return (_id, checkout, options) => universalUpdateCheckout(_id, checkout, options, 
    // @ts-ignore
    { httpClient });
}
export function removeCoupon(httpClient) {
    return (_id) => universalRemoveCoupon(_id, 
    // @ts-ignore
    { httpClient });
}
export function removeGiftCard(httpClient) {
    return (_id) => universalRemoveGiftCard(_id, 
    // @ts-ignore
    { httpClient });
}
export function removeOverrideCheckoutUrl(httpClient) {
    return (_id) => universalRemoveOverrideCheckoutUrl(_id, 
    // @ts-ignore
    { httpClient });
}
export function addToCheckout(httpClient) {
    return (_id, options) => universalAddToCheckout(_id, options, 
    // @ts-ignore
    { httpClient });
}
export function removeLineItems(httpClient) {
    return (_id, lineItemIds) => universalRemoveLineItems(_id, lineItemIds, 
    // @ts-ignore
    { httpClient });
}
export function createOrder(httpClient) {
    return (_id, options) => universalCreateOrder(_id, options, 
    // @ts-ignore
    { httpClient });
}
export function markCheckoutAsCompleted(httpClient) {
    return (_id) => universalMarkCheckoutAsCompleted(_id, 
    // @ts-ignore
    { httpClient });
}
export function updateLineItemsQuantity(httpClient) {
    return (_id, lineItems) => universalUpdateLineItemsQuantity(_id, lineItems, 
    // @ts-ignore
    { httpClient });
}
export const onCheckoutCompleted = EventDefinition('wix.ecom.v1.checkout_completed', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'data.checkout.createdDate' },
            { path: 'data.checkout.updatedDate' },
            {
                path: 'data.checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
            },
            { path: 'data.checkout.lineItems.serviceProperties.scheduledDate' },
            {
                path: 'data.checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
            },
            {
                path: 'data.checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
            },
            {
                path: 'data.checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
            },
            {
                path: 'data.checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
            },
            {
                path: 'data.checkout.membershipOptions.eligibleMemberships.expirationDate',
            },
            {
                path: 'data.checkout.membershipOptions.invalidMemberships.membership.expirationDate',
            },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTPageURLV2ToSDKPageURLV2,
        paths: [{ path: 'data.checkout.lineItems.url' }],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [
            { path: 'data.checkout.lineItems.media' },
            { path: 'data.checkout.lineItems.catalogOverrideFields.image' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            { path: 'data.checkout.lineItems.physicalProperties.weight' },
            {
                path: 'data.checkout.lineItems.catalogOverrideFields.physicalProperties.weight',
            },
            {
                path: 'data.checkout.appliedDiscounts.merchantDiscount.percentage',
            },
        ],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [
            { path: 'data.checkout.billingInfo.address' },
            { path: 'data.checkout.shippingInfo.shippingDestination.address' },
            {
                path: 'data.checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
            },
            {
                path: 'data.checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
            },
        ],
    },
])))();
export const onCheckoutCreated = EventDefinition('wix.ecom.v1.checkout_created', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.updatedDate' },
            {
                path: 'entity.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
            },
            { path: 'entity.lineItems.serviceProperties.scheduledDate' },
            {
                path: 'entity.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
            },
            {
                path: 'entity.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
            },
            {
                path: 'entity.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
            },
            {
                path: 'entity.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
            },
            {
                path: 'entity.membershipOptions.eligibleMemberships.expirationDate',
            },
            {
                path: 'entity.membershipOptions.invalidMemberships.membership.expirationDate',
            },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTPageURLV2ToSDKPageURLV2,
        paths: [{ path: 'entity.lineItems.url' }],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [
            { path: 'entity.lineItems.media' },
            { path: 'entity.lineItems.catalogOverrideFields.image' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            { path: 'entity.lineItems.physicalProperties.weight' },
            {
                path: 'entity.lineItems.catalogOverrideFields.physicalProperties.weight',
            },
            { path: 'entity.appliedDiscounts.merchantDiscount.percentage' },
        ],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [
            { path: 'entity.billingInfo.address' },
            { path: 'entity.shippingInfo.shippingDestination.address' },
            {
                path: 'entity.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
            },
            {
                path: 'entity.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
            },
        ],
    },
])))();
export const onCheckoutUpdated = EventDefinition('wix.ecom.v1.checkout_updated', true, (event) => renameKeysFromRESTResponseToSDKResponse(transformPaths(event, [
    {
        transformFn: transformRESTTimestampToSDKTimestamp,
        paths: [
            { path: 'entity.createdDate' },
            { path: 'entity.updatedDate' },
            {
                path: 'entity.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
            },
            { path: 'entity.lineItems.serviceProperties.scheduledDate' },
            {
                path: 'entity.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
            },
            {
                path: 'entity.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
            },
            {
                path: 'entity.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
            },
            {
                path: 'entity.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
            },
            {
                path: 'entity.membershipOptions.eligibleMemberships.expirationDate',
            },
            {
                path: 'entity.membershipOptions.invalidMemberships.membership.expirationDate',
            },
            { path: 'metadata.eventTime' },
        ],
    },
    {
        transformFn: transformRESTPageURLV2ToSDKPageURLV2,
        paths: [{ path: 'entity.lineItems.url' }],
    },
    {
        transformFn: transformRESTImageToSDKImage,
        paths: [
            { path: 'entity.lineItems.media' },
            { path: 'entity.lineItems.catalogOverrideFields.image' },
        ],
    },
    {
        transformFn: transformRESTFloatToSDKFloat,
        paths: [
            { path: 'entity.lineItems.physicalProperties.weight' },
            {
                path: 'entity.lineItems.catalogOverrideFields.physicalProperties.weight',
            },
            { path: 'entity.appliedDiscounts.merchantDiscount.percentage' },
        ],
    },
    {
        transformFn: transformRESTAddressToSDKAddress,
        paths: [
            { path: 'entity.billingInfo.address' },
            { path: 'entity.shippingInfo.shippingDestination.address' },
            {
                path: 'entity.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
            },
            {
                path: 'entity.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
            },
        ],
    },
])))();
export { AdditionalFeeSource, ChannelInfoChannelType, ChannelType, ChargeType, CommonVatType, DescriptionLineType, DiscountDiscountType, DiscountType, FallbackReason, FileType, GetCheckoutPaymentSettingsResponsePaymentOption, IdentityType, ItemAvailabilityStatus, ItemTypeItemType, JurisdictionType, LineItemType, ManualCalculationReason, MediaItemType, NameInLineItem, NameInOther, PaymentOptionType, PickupMethod, RateType, RuleType, Severity, SubscriptionFrequency, SuggestedFix, TaxableAddressType, VatType, WebhookIdentityType, WeightUnit, } from './ecom-v1-checkout-checkout.universal.js';
//# sourceMappingURL=ecom-v1-checkout-checkout.public.js.map