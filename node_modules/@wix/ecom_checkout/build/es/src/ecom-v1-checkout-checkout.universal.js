import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1Checkout from './ecom-v1-checkout-checkout.http.js';
import { transformSDKAddressToRESTAddress } from '@wix/sdk-runtime/transformations/address';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformSDKImageToRESTImage } from '@wix/sdk-runtime/transformations/image';
import { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';
import { transformSDKPageURLV2ToRESTPageURLV2 } from '@wix/sdk-runtime/transformations/page-url-v2';
import { transformRESTPageURLV2ToSDKPageURLV2 } from '@wix/sdk-runtime/transformations/page-url-v2';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
export var JurisdictionType;
(function (JurisdictionType) {
    JurisdictionType["UNDEFINED"] = "UNDEFINED";
    JurisdictionType["COUNTRY"] = "COUNTRY";
    JurisdictionType["STATE"] = "STATE";
    JurisdictionType["COUNTY"] = "COUNTY";
    JurisdictionType["CITY"] = "CITY";
    JurisdictionType["SPECIAL"] = "SPECIAL";
})(JurisdictionType || (JurisdictionType = {}));
export var DescriptionLineType;
(function (DescriptionLineType) {
    /** Unrecognized type. */
    DescriptionLineType["UNRECOGNISED"] = "UNRECOGNISED";
    /** Plain text type. */
    DescriptionLineType["PLAIN_TEXT"] = "PLAIN_TEXT";
    /** Color type. */
    DescriptionLineType["COLOR"] = "COLOR";
})(DescriptionLineType || (DescriptionLineType = {}));
export var ItemAvailabilityStatus;
(function (ItemAvailabilityStatus) {
    ItemAvailabilityStatus["AVAILABLE"] = "AVAILABLE";
    /** Item does not exist */
    ItemAvailabilityStatus["NOT_FOUND"] = "NOT_FOUND";
    /** Item not in stock */
    ItemAvailabilityStatus["NOT_AVAILABLE"] = "NOT_AVAILABLE";
    /** Available quantity is less than requested */
    ItemAvailabilityStatus["PARTIALLY_AVAILABLE"] = "PARTIALLY_AVAILABLE";
})(ItemAvailabilityStatus || (ItemAvailabilityStatus = {}));
export var ItemTypeItemType;
(function (ItemTypeItemType) {
    ItemTypeItemType["UNRECOGNISED"] = "UNRECOGNISED";
    ItemTypeItemType["PHYSICAL"] = "PHYSICAL";
    ItemTypeItemType["DIGITAL"] = "DIGITAL";
    ItemTypeItemType["GIFT_CARD"] = "GIFT_CARD";
    ItemTypeItemType["SERVICE"] = "SERVICE";
})(ItemTypeItemType || (ItemTypeItemType = {}));
/** Frequency unit of recurring payment */
export var SubscriptionFrequency;
(function (SubscriptionFrequency) {
    SubscriptionFrequency["UNDEFINED"] = "UNDEFINED";
    SubscriptionFrequency["DAY"] = "DAY";
    SubscriptionFrequency["WEEK"] = "WEEK";
    SubscriptionFrequency["MONTH"] = "MONTH";
    SubscriptionFrequency["YEAR"] = "YEAR";
})(SubscriptionFrequency || (SubscriptionFrequency = {}));
export var FileType;
(function (FileType) {
    FileType["UNSPECIFIED"] = "UNSPECIFIED";
    FileType["SECURE_PICTURE"] = "SECURE_PICTURE";
    FileType["SECURE_VIDEO"] = "SECURE_VIDEO";
    FileType["SECURE_DOCUMENT"] = "SECURE_DOCUMENT";
    FileType["SECURE_MUSIC"] = "SECURE_MUSIC";
    FileType["SECURE_ARCHIVE"] = "SECURE_ARCHIVE";
})(FileType || (FileType = {}));
/** Type of selected payment option for catalog item */
export var PaymentOptionType;
(function (PaymentOptionType) {
    /** The entire payment for this item happens as part of the checkout. */
    PaymentOptionType["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    PaymentOptionType["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    PaymentOptionType["MEMBERSHIP"] = "MEMBERSHIP";
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    PaymentOptionType["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    PaymentOptionType["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
})(PaymentOptionType || (PaymentOptionType = {}));
export var TaxableAddressType;
(function (TaxableAddressType) {
    TaxableAddressType["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
    TaxableAddressType["BUSINESS"] = "BUSINESS";
    TaxableAddressType["BILLING"] = "BILLING";
    TaxableAddressType["SHIPPING"] = "SHIPPING";
})(TaxableAddressType || (TaxableAddressType = {}));
/** tax info types */
export var CommonVatType;
(function (CommonVatType) {
    CommonVatType["UNSPECIFIED"] = "UNSPECIFIED";
    /** CPF - for individual tax payers. */
    CommonVatType["CPF"] = "CPF";
    /** CNPJ - for corporations */
    CommonVatType["CNPJ"] = "CNPJ";
})(CommonVatType || (CommonVatType = {}));
export var PickupMethod;
(function (PickupMethod) {
    PickupMethod["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
    PickupMethod["STORE_PICKUP"] = "STORE_PICKUP";
    PickupMethod["PICKUP_POINT"] = "PICKUP_POINT";
})(PickupMethod || (PickupMethod = {}));
export var ChargeType;
(function (ChargeType) {
    ChargeType["HANDLING_FEE"] = "HANDLING_FEE";
    ChargeType["INSURANCE"] = "INSURANCE";
})(ChargeType || (ChargeType = {}));
export var RuleType;
(function (RuleType) {
    RuleType["VALIDATION"] = "VALIDATION";
    RuleType["OTHER"] = "OTHER";
    RuleType["MAX"] = "MAX";
    RuleType["MIN"] = "MIN";
    RuleType["MAX_LENGTH"] = "MAX_LENGTH";
    RuleType["MIN_LENGTH"] = "MIN_LENGTH";
    RuleType["MAX_SIZE"] = "MAX_SIZE";
    RuleType["MIN_SIZE"] = "MIN_SIZE";
    RuleType["FORMAT"] = "FORMAT";
    RuleType["DECIMAL_LTE"] = "DECIMAL_LTE";
    RuleType["DECIMAL_GTE"] = "DECIMAL_GTE";
    RuleType["DECIMAL_LT"] = "DECIMAL_LT";
    RuleType["DECIMAL_GT"] = "DECIMAL_GT";
    RuleType["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
    RuleType["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
    RuleType["REQUIRED_FIELD"] = "REQUIRED_FIELD";
    RuleType["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
    RuleType["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
    RuleType["EXACT_LENGTH"] = "EXACT_LENGTH";
    RuleType["EXACT_SIZE"] = "EXACT_SIZE";
    RuleType["REQUIRED_ONE_OF_FIELD"] = "REQUIRED_ONE_OF_FIELD";
})(RuleType || (RuleType = {}));
export var DiscountType;
(function (DiscountType) {
    DiscountType["GLOBAL"] = "GLOBAL";
    DiscountType["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
    DiscountType["SHIPPING"] = "SHIPPING";
})(DiscountType || (DiscountType = {}));
export var WeightUnit;
(function (WeightUnit) {
    /** Weight unit can't be classified, due to an error */
    WeightUnit["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
    /** Kilograms */
    WeightUnit["KG"] = "KG";
    /** Pounds */
    WeightUnit["LB"] = "LB";
})(WeightUnit || (WeightUnit = {}));
export var RateType;
(function (RateType) {
    /** no tax being collected for this request due to location of purchase */
    RateType["NO_TAX_COLLECTED"] = "NO_TAX_COLLECTED";
    /** manual rate used for calculation */
    RateType["MANUAL_RATE"] = "MANUAL_RATE";
    /** autotax rate used for calculation */
    RateType["AUTO_RATE"] = "AUTO_RATE";
    /** fallback rate used for calculation */
    RateType["FALLBACK_RATE"] = "FALLBACK_RATE";
})(RateType || (RateType = {}));
export var ManualCalculationReason;
(function (ManualCalculationReason) {
    /** user set calculator in Business Manager to be Manual */
    ManualCalculationReason["GLOBAL_SETTING_TO_MANUAL"] = "GLOBAL_SETTING_TO_MANUAL";
    /** specific region is on manual even though Global setting is Auto-tax */
    ManualCalculationReason["REGION_SETTING_TO_MANUAL"] = "REGION_SETTING_TO_MANUAL";
})(ManualCalculationReason || (ManualCalculationReason = {}));
export var FallbackReason;
(function (FallbackReason) {
    /** auto-tax failed to be calculated */
    FallbackReason["AUTO_TAX_FAILED"] = "AUTO_TAX_FAILED";
    /** auto-tax was temporarily deactivated on a system-level */
    FallbackReason["AUTO_TAX_DEACTIVATED"] = "AUTO_TAX_DEACTIVATED";
})(FallbackReason || (FallbackReason = {}));
export var ChannelType;
(function (ChannelType) {
    /** Unspecified sales channel. This value is not supported. */
    ChannelType["UNSPECIFIED"] = "UNSPECIFIED";
    /** A web client. */
    ChannelType["WEB"] = "WEB";
    /** [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395). */
    ChannelType["POS"] = "POS";
    /** [eBay shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop). */
    ChannelType["EBAY"] = "EBAY";
    /** [Amazon shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop). */
    ChannelType["AMAZON"] = "AMAZON";
    /** Other sales platform. */
    ChannelType["OTHER_PLATFORM"] = "OTHER_PLATFORM";
    /** [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview). */
    ChannelType["WIX_APP_STORE"] = "WIX_APP_STORE";
    /** Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings) */
    ChannelType["WIX_INVOICES"] = "WIX_INVOICES";
    /** Wix merchant backoffice. */
    ChannelType["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
    /** Wish sales channel. */
    ChannelType["WISH"] = "WISH";
    /** [ClassPass sales channel](https://support.wix.com/en/article/wix-bookings-letting-clients-book-your-services-with-classpass). */
    ChannelType["CLASS_PASS"] = "CLASS_PASS";
    /** Global-E sales channel. */
    ChannelType["GLOBAL_E"] = "GLOBAL_E";
    /** [Facebook shop](https://support.wix.com/en/article/wix-stores-changes-to-facebook-shops). */
    ChannelType["FACEBOOK"] = "FACEBOOK";
    /** [Etsy sales channel](https://support.wix.com/en/article/wix-stores-request-adding-etsy-as-a-sales-channel). */
    ChannelType["ETSY"] = "ETSY";
    /** [TikTok sales channel](https://support.wix.com/en/article/wix-stores-request-adding-tiktok-as-a-sales-channel). */
    ChannelType["TIKTOK"] = "TIKTOK";
    /** [Faire marketplace integration](https://support.wix.com/en/article/wix-stores-creating-a-faire-store-using-the-faire-integration-app). */
    ChannelType["FAIRE_COM"] = "FAIRE_COM";
})(ChannelType || (ChannelType = {}));
export var AdditionalFeeSource;
(function (AdditionalFeeSource) {
    AdditionalFeeSource["UNKNOWN_ADDITIONAL_FEE_SOURCE"] = "UNKNOWN_ADDITIONAL_FEE_SOURCE";
    /** The additional fee was added by an additional fee service plugin */
    AdditionalFeeSource["SERVICE_PLUGIN"] = "SERVICE_PLUGIN";
    /** The additional fee was added on the item either via the catalog or on custom line item */
    AdditionalFeeSource["ITEM"] = "ITEM";
    /** The additional fee was added manually on the request */
    AdditionalFeeSource["MANUAL"] = "MANUAL";
})(AdditionalFeeSource || (AdditionalFeeSource = {}));
export var Severity;
(function (Severity) {
    /** The user is allowed to move forward in the flow. */
    Severity["WARNING"] = "WARNING";
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    Severity["ERROR"] = "ERROR";
})(Severity || (Severity = {}));
/** Available locations on the webpage */
export var NameInOther;
(function (NameInOther) {
    /** Default location, in case no specific location is specified. */
    NameInOther["OTHER_DEFAULT"] = "OTHER_DEFAULT";
})(NameInOther || (NameInOther = {}));
/** Available locations on the line item */
export var NameInLineItem;
(function (NameInLineItem) {
    /** Default location, in case no specific location is specified. */
    NameInLineItem["LINE_ITEM_DEFAULT"] = "LINE_ITEM_DEFAULT";
})(NameInLineItem || (NameInLineItem = {}));
export var SuggestedFix;
(function (SuggestedFix) {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    SuggestedFix["UNKNOWN_SUGGESTED_FIX"] = "UNKNOWN_SUGGESTED_FIX";
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    SuggestedFix["REMOVE_LINE_ITEM"] = "REMOVE_LINE_ITEM";
})(SuggestedFix || (SuggestedFix = {}));
export var GetCheckoutPaymentSettingsResponsePaymentOption;
(function (GetCheckoutPaymentSettingsResponsePaymentOption) {
    GetCheckoutPaymentSettingsResponsePaymentOption["UNKNOWN_PAYMENT_OPTION"] = "UNKNOWN_PAYMENT_OPTION";
    GetCheckoutPaymentSettingsResponsePaymentOption["MANUAL"] = "MANUAL";
})(GetCheckoutPaymentSettingsResponsePaymentOption || (GetCheckoutPaymentSettingsResponsePaymentOption = {}));
export var IdentityType;
(function (IdentityType) {
    IdentityType["UNSPECIFIED_IDENTITY_TYPE"] = "UNSPECIFIED_IDENTITY_TYPE";
    /** Site member */
    IdentityType["MEMBER"] = "MEMBER";
    /** Contact */
    IdentityType["CONTACT"] = "CONTACT";
})(IdentityType || (IdentityType = {}));
export var LineItemType;
(function (LineItemType) {
    /** Line item type can't be classified, due to an error */
    LineItemType["UNSPECIFIED_LINE_ITEM_TYPE"] = "UNSPECIFIED_LINE_ITEM_TYPE";
    /** Physical item type */
    LineItemType["PHYSICAL"] = "PHYSICAL";
    /** Digital item type */
    LineItemType["DIGITAL"] = "DIGITAL";
    /** Custom item price */
    LineItemType["CUSTOM_AMOUNT_ITEM"] = "CUSTOM_AMOUNT_ITEM";
})(LineItemType || (LineItemType = {}));
export var MediaItemType;
(function (MediaItemType) {
    /** Media item type can't be classified, due to an error */
    MediaItemType["UNSPECIFIED_MEDIA_TYPE_ITEM"] = "UNSPECIFIED_MEDIA_TYPE_ITEM";
    /** Image item type */
    MediaItemType["IMAGE"] = "IMAGE";
})(MediaItemType || (MediaItemType = {}));
/** Brazilian tax info types */
export var VatType;
(function (VatType) {
    /** When the tax info type can't be classified, due to an error */
    VatType["UNSPECIFIED_TAX_TYPE"] = "UNSPECIFIED_TAX_TYPE";
    /** CPF - for individual tax payers */
    VatType["CPF"] = "CPF";
    /** CNPJ - for corporations */
    VatType["CNPJ"] = "CNPJ";
})(VatType || (VatType = {}));
export var DiscountDiscountType;
(function (DiscountDiscountType) {
    DiscountDiscountType["UNDEFINED"] = "UNDEFINED";
    /** No discount */
    DiscountDiscountType["AMOUNT"] = "AMOUNT";
    DiscountDiscountType["PERCENT"] = "PERCENT";
})(DiscountDiscountType || (DiscountDiscountType = {}));
export var ChannelInfoChannelType;
(function (ChannelInfoChannelType) {
    ChannelInfoChannelType["UNSPECIFIED"] = "UNSPECIFIED";
    ChannelInfoChannelType["WEB"] = "WEB";
    ChannelInfoChannelType["OTHER_PLATFORM"] = "OTHER_PLATFORM";
    ChannelInfoChannelType["WIX_APP_STORE"] = "WIX_APP_STORE";
})(ChannelInfoChannelType || (ChannelInfoChannelType = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a checkout.
 *
 *
 * The `createCheckout()` function returns a Promise that resolves to the new checkout when it's created.
 *
 * > **Notes:**
 * > + Checkout must include at least 1 item in the `options.lineItems` array.
 * > + `options.channelType` is required.
 * > + If `_id` for `options.lineItems` is added, make sure that each `_id` is unique.
 * > + If `options.checkoutInfo.customFields` are added, then `options.checkoutInfo.customFields.value` is required.
 * @public
 * @requiredField options.channelType
 * @requiredField options.checkoutInfo.customFields.value
 * @requiredField options.checkoutInfo.membershipOptions.selectedMemberships.memberships._id
 * @requiredField options.checkoutInfo.membershipOptions.selectedMemberships.memberships.appId
 * @requiredField options.checkoutInfo.membershipOptions.selectedMemberships.memberships.lineItemIds
 * @requiredField options.customLineItems.descriptionLines
 * @requiredField options.customLineItems.descriptionLines.name
 * @requiredField options.customLineItems.itemType
 * @requiredField options.customLineItems.price
 * @requiredField options.customLineItems.productName
 * @requiredField options.customLineItems.quantity
 * @requiredField options.lineItems.catalogReference
 * @requiredField options.lineItems.catalogReference.appId
 * @requiredField options.lineItems.catalogReference.catalogItemId
 * @requiredField options.lineItems.quantity
 * @param options - Checkout creation options.
 * @permissionId ECOM.MODIFY_CHECKOUTS
 * @permissionId ECOM.ADMIN_MODIFY_CHECKOUTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - Admin Permissions
 * @permissionScopeId SCOPE.ECOM.MANAGE-ADMIN
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - the newly created checkout.
 * @fqn com.wix.ecom.checkout.api.v1.CheckoutService.CreateCheckout
 */
export async function createCheckout(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        checkoutInfo: options?.checkoutInfo,
        couponCode: options?.couponCode,
        lineItems: options?.lineItems,
        customLineItems: options?.customLineItems,
        channelType: options?.channelType,
        giftCardCode: options?.giftCardCode,
        overrideCheckoutUrl: options?.overrideCheckoutUrl,
    }), [
        {
            transformFn: transformSDKPageURLV2ToRESTPageURLV2,
            paths: [
                { path: 'checkoutInfo.lineItems.url' },
                { path: 'lineItems.url' },
                { path: 'customLineItems.url' },
            ],
        },
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [
                { path: 'checkoutInfo.lineItems.media' },
                { path: 'checkoutInfo.lineItems.catalogOverrideFields.image' },
                { path: 'lineItems.media' },
                { path: 'lineItems.catalogOverrideFields.image' },
                { path: 'customLineItems.media' },
            ],
        },
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [
                { path: 'checkoutInfo.billingInfo.address' },
                { path: 'checkoutInfo.shippingInfo.shippingDestination.address' },
                {
                    path: 'checkoutInfo.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
                },
                {
                    path: 'checkoutInfo.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
                },
            ],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1Checkout.createCheckout(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'checkout.lineItems.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'checkout.lineItems.media' },
                    { path: 'checkout.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'checkout.billingInfo.address' },
                    { path: 'checkout.shippingInfo.shippingDestination.address' },
                    {
                        path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
                    },
                    {
                        path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]))?.checkout;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                checkoutInfo: '$[0].checkoutInfo',
                couponCode: '$[0].couponCode',
                lineItems: '$[0].lineItems',
                customLineItems: '$[0].customLineItems',
                channelType: '$[0].channelType',
                giftCardCode: '$[0].giftCardCode',
                overrideCheckoutUrl: '$[0].overrideCheckoutUrl',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a checkout.
 *
 *
 * The `getCheckout()` function returns a Promise that resolves when the specified checkout is retrieved.
 * @param _id - Checkout ID.
 * @public
 * @requiredField _id
 * @permissionId ECOM.READ_CHECKOUTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Fulfilled - the requested checkout.
 * @fqn com.wix.ecom.checkout.api.v1.CheckoutService.GetCheckout
 */
export async function getCheckout(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixEcomV1Checkout.getCheckout(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'checkout.lineItems.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'checkout.lineItems.media' },
                    { path: 'checkout.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'checkout.billingInfo.address' },
                    { path: 'checkout.shippingInfo.shippingDestination.address' },
                    {
                        path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
                    },
                    {
                        path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]))?.checkout;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves the checkout associated with a specified cart.
 * @param _id - Cart ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @permissionId ECOM.READ_CHECKOUTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.checkout.api.v1.CheckoutService.GetCheckoutByCartId
 */
export async function getCheckoutByCartId(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixEcomV1Checkout.getCheckoutByCartId(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'checkout.lineItems.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'checkout.lineItems.media' },
                    { path: 'checkout.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'checkout.billingInfo.address' },
                    { path: 'checkout.shippingInfo.shippingDestination.address' },
                    {
                        path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
                    },
                    {
                        path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves the checkout page URL of a specified checkout.
 *
 * By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page.
 * However, if `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
 * @param _id - Checkout ID.
 * @public
 * @requiredField _id
 * @permissionId ECOM.READ_CHECKOUTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.checkout.api.v1.CheckoutService.GetCheckoutURL
 */
export async function getCheckoutUrl(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixEcomV1Checkout.getCheckoutUrl(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a checkout.
 *
 *
 * The `updateCheckout()` function returns a Promise that resolves to the updated checkout when the specified properties are updated.
 *
 * >**Notes:**
 * > + If nothing is passed in the request, the call will fail.
 * > + The `checkout.buyerInfo.email` may not be removed once it is set.
 * @param _id - Checkout ID.
 * @public
 * @requiredField _id
 * @requiredField checkout
 * @requiredField checkout.customFields.value
 * @requiredField checkout.membershipOptions.selectedMemberships.memberships._id
 * @requiredField checkout.membershipOptions.selectedMemberships.memberships.appId
 * @requiredField checkout.membershipOptions.selectedMemberships.memberships.lineItemIds
 * @requiredField options.customLineItems.descriptionLines
 * @requiredField options.customLineItems.descriptionLines.name
 * @requiredField options.customLineItems.itemType
 * @requiredField options.customLineItems.productName
 * @requiredField options.customLineItems.quantity
 * @requiredField options.lineItems.catalogReference
 * @requiredField options.lineItems.catalogReference.appId
 * @requiredField options.lineItems.catalogReference.catalogItemId
 * @requiredField options.lineItems.quantity
 * @param options - Checkout update options.
 * @permissionId ECOM.MODIFY_CHECKOUTS
 * @permissionId ECOM.ADMIN_MODIFY_CHECKOUTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - Admin Permissions
 * @permissionScopeId SCOPE.ECOM.MANAGE-ADMIN
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns Updated checkout.
 * @fqn com.wix.ecom.checkout.api.v1.CheckoutService.UpdateCheckout
 */
export async function updateCheckout(_id, checkout, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        checkout: { ...checkout, id: _id },
        couponCode: options?.couponCode,
        giftCardCode: options?.giftCardCode,
        overrideCheckoutUrl: options?.overrideCheckoutUrl,
        lineItems: options?.lineItems,
        customLineItems: options?.customLineItems,
    }), [
        {
            transformFn: transformSDKPageURLV2ToRESTPageURLV2,
            paths: [
                { path: 'checkout.lineItems.url' },
                { path: 'lineItems.url' },
                { path: 'customLineItems.url' },
            ],
        },
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [
                { path: 'checkout.lineItems.media' },
                { path: 'checkout.lineItems.catalogOverrideFields.image' },
                { path: 'lineItems.media' },
                { path: 'lineItems.catalogOverrideFields.image' },
                { path: 'customLineItems.media' },
            ],
        },
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [
                { path: 'checkout.billingInfo.address' },
                { path: 'checkout.shippingInfo.shippingDestination.address' },
                {
                    path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
                },
                {
                    path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
                },
            ],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1Checkout.updateCheckout(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'checkout.lineItems.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'checkout.lineItems.media' },
                    { path: 'checkout.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'checkout.billingInfo.address' },
                    { path: 'checkout.shippingInfo.shippingDestination.address' },
                    {
                        path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
                    },
                    {
                        path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]))?.checkout;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { checkout: '$[1]' },
            explicitPathsToArguments: {
                'checkout.id': '$[0]',
                couponCode: '$[2].couponCode',
                giftCardCode: '$[2].giftCardCode',
                overrideCheckoutUrl: '$[2].overrideCheckoutUrl',
                lineItems: '$[2].lineItems',
                customLineItems: '$[2].customLineItems',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'checkout', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Removes the coupon from a specified checkout.
 *
 *
 * The `removeCoupon()` function returns a Promise that resolves to the updated checkout when the coupon is removed from the specified checkout.
 *
 * >**Note:** A checkout can only hold 1 coupon.
 * @param _id - ID of the checkout to remove the coupon from.
 * @public
 * @requiredField _id
 * @permissionId ECOM.MODIFY_CHECKOUTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.checkout.api.v1.CheckoutService.RemoveCoupon
 */
export async function removeCoupon(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixEcomV1Checkout.removeCoupon(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'checkout.lineItems.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'checkout.lineItems.media' },
                    { path: 'checkout.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'checkout.billingInfo.address' },
                    { path: 'checkout.shippingInfo.shippingDestination.address' },
                    {
                        path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
                    },
                    {
                        path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Removes the gift card from a specified checkout.
 *
 *
 * The `removeGiftCard()` function returns a Promise that resolves to the updated checkout when the gift card is removed from the specified checkout.
 *
 * >**Note:** A checkout can only hold 1 gift card.
 * @param _id - ID of the checkout to remove the gift card from.
 * @public
 * @requiredField _id
 * @permissionId ECOM.MODIFY_CHECKOUTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.checkout.api.v1.CheckoutService.RemoveGiftCard
 */
export async function removeGiftCard(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixEcomV1Checkout.removeGiftCard(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'checkout.lineItems.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'checkout.lineItems.media' },
                    { path: 'checkout.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'checkout.billingInfo.address' },
                    { path: 'checkout.shippingInfo.shippingDestination.address' },
                    {
                        path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
                    },
                    {
                        path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Removes the `overrideCheckoutUrl` from a specified checkout.
 *
 * When `overrideCheckoutUrl` is removed, the `checkoutUrl` will be set to the default, standard
 * Wix checkout page URL.
 * @param _id - ID of the checkout to remove the override checkout url from.
 * @public
 * @requiredField _id
 * @permissionId ECOM.MODIFY_CHECKOUTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.checkout.api.v1.CheckoutService.RemoveOverrideCheckoutUrl
 */
export async function removeOverrideCheckoutUrl(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixEcomV1Checkout.removeOverrideCheckoutUrl(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'checkout.lineItems.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'checkout.lineItems.media' },
                    { path: 'checkout.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'checkout.billingInfo.address' },
                    { path: 'checkout.shippingInfo.shippingDestination.address' },
                    {
                        path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
                    },
                    {
                        path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Adds catalog line items and/or custom line items to a checkout.
 *
 *
 * The `addToCheckout()` function returns a Promise that resolves to the updated checkout when the specified items have been added.
 * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
 * @param _id - Checkout ID.
 * @public
 * @requiredField _id
 * @requiredField options.customLineItems.descriptionLines
 * @requiredField options.customLineItems.descriptionLines.name
 * @requiredField options.customLineItems.itemType
 * @requiredField options.customLineItems.productName
 * @requiredField options.customLineItems.quantity
 * @requiredField options.lineItems.catalogReference
 * @requiredField options.lineItems.catalogReference.appId
 * @requiredField options.lineItems.catalogReference.catalogItemId
 * @requiredField options.lineItems.quantity
 * @param options - Items to be added to checkout.
 * @permissionId ECOM.MODIFY_CHECKOUTS
 * @permissionId ECOM.ADMIN_MODIFY_CHECKOUTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - Admin Permissions
 * @permissionScopeId SCOPE.ECOM.MANAGE-ADMIN
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.checkout.api.v1.CheckoutService.AddToCheckout
 */
export async function addToCheckout(_id, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        id: _id,
        lineItems: options?.lineItems,
        customLineItems: options?.customLineItems,
    }), [
        {
            transformFn: transformSDKPageURLV2ToRESTPageURLV2,
            paths: [{ path: 'lineItems.url' }, { path: 'customLineItems.url' }],
        },
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [
                { path: 'lineItems.media' },
                { path: 'lineItems.catalogOverrideFields.image' },
                { path: 'customLineItems.media' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1Checkout.addToCheckout(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'checkout.lineItems.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'checkout.lineItems.media' },
                    { path: 'checkout.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'checkout.billingInfo.address' },
                    { path: 'checkout.shippingInfo.shippingDestination.address' },
                    {
                        path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
                    },
                    {
                        path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                id: '$[0]',
                lineItems: '$[1].lineItems',
                customLineItems: '$[1].customLineItems',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Removes line items from the specified checkout.
 *
 *
 * The `removeLineItems()` function returns a Promise that resolves to the updated checkout when the line items are removed from the specified checkout.
 * @param _id - ID of the checkout to remove line items from.
 * @public
 * @requiredField _id
 * @requiredField lineItemIds
 * @param lineItemIds - IDs of the line items to be removed.
 * To find the IDs of the checkout line items you'd like to remove, pass the `checkout._id` to [getCheckout()](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/getcheckout) and look for the IDs under `lineItems` and/or `customLineItems`.
 * @permissionId ECOM.MODIFY_CHECKOUTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.checkout.api.v1.CheckoutService.RemoveLineItems
 */
export async function removeLineItems(_id, lineItemIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        id: _id,
        lineItemIds: lineItemIds,
    });
    const reqOpts = ambassadorWixEcomV1Checkout.removeLineItems(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'checkout.lineItems.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'checkout.lineItems.media' },
                    { path: 'checkout.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'checkout.billingInfo.address' },
                    { path: 'checkout.shippingInfo.shippingDestination.address' },
                    {
                        path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
                    },
                    {
                        path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', lineItemIds: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'lineItemIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates an order from a specified checkout.
 *
 * The `createOrder()` function returns a Promise that resolves to the new order's ID and `paymentGatewayOrderID` when the order is created.
 * Pass the `paymentGatewayOrderId` as the `paymentId` param to the [`startPayment()`](https://www.wix.com/velo/reference/wix-pay-frontend/startpayment) function to allow a customer to pay for their order.
 *
 * > **Note:** The following requirements must be met for an order to be created from a checkout.
 * > + A checkout cannot have calculation errors. Pass the `checkout._id` to [Get Checkout](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/getcheckout) and take a look at the `calculationErrors` field.
 * > + A checkout must have at least 1 line item.
 * > + All of the line Items have an `availability.status` of `"AVAILABLE"` or `"PARTIALLY_AVAILABLE"`.
 * > + If there is a payment to be made, meaning that `priceSummary.total` is greater than 0, the `billingInfo.address` field must be provided.
 * > + When a checkout has line items to be shipped, the `shippingInfo.shippingDestination.address` and `shippingInfo.selectedCarrierServiceOption` fields must be provided.
 * > + When a checkout has line items for pickup, the `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails` field must be provided.
 * @param _id - Checkout ID.
 * @public
 * @requiredField _id
 * @param options - Further order creation options.
 * @permissionId ECOM.CREATE_ORDER_FROM_CHECKOUT
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.checkout.api.v1.CheckoutService.CreateOrder
 */
export async function createOrder(_id, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        id: _id,
        savePaymentMethod: options?.savePaymentMethod,
        delayCapture: options?.delayCapture,
    });
    const reqOpts = ambassadorWixEcomV1Checkout.createOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                id: '$[0]',
                savePaymentMethod: '$[1].savePaymentMethod',
                delayCapture: '$[1].delayCapture',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Marks a checkout as completed - `checkout.complete` boolean is set to `true`.
 *
 *
 * The `markCheckoutAsCompleted()` function returns a Promise that resolves when the specified checkout is marked as completed.
 * @param _id - Checkout ID.
 * @public
 * @requiredField _id
 * @permissionId ECOM.MODIFY_CHECKOUTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.checkout.api.v1.CheckoutService.MarkCheckoutAsCompleted
 */
export async function markCheckoutAsCompleted(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixEcomV1Checkout.markCheckoutAsCompleted(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates the quantity of one or more line items in a checkout.
 *
 * This endpoint is only for updating the quantity of line items. To entirely remove a line item from
 * the checkout, use [`removeLineItems()`](#removelineitems).
 * To add a new line item to the checkout, use [`addToCheckout()`](#addtocheckout).
 *
 * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity`
 * is greater than the remaining stock, then the `quantity` returned in the response is the total amount
 * of remaining stock.
 * @param _id - Checkout ID.
 * @param lineItems - Line item info to update.
 * @public
 * @requiredField _id
 * @requiredField lineItems
 * @requiredField lineItems._id
 * @requiredField lineItems.quantity
 * @permissionId ECOM.MODIFY_CHECKOUTS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.checkout.api.v1.CheckoutService.UpdateLineItemsQuantity
 */
export async function updateLineItemsQuantity(_id, lineItems) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        id: _id,
        lineItems: lineItems,
    });
    const reqOpts = ambassadorWixEcomV1Checkout.updateLineItemsQuantity(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTPageURLV2ToSDKPageURLV2,
                paths: [{ path: 'checkout.lineItems.url' }],
            },
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [
                    { path: 'checkout.lineItems.media' },
                    { path: 'checkout.lineItems.catalogOverrideFields.image' },
                ],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'checkout.billingInfo.address' },
                    { path: 'checkout.shippingInfo.shippingDestination.address' },
                    {
                        path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
                    },
                    {
                        path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]', lineItems: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'lineItems']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-checkout-checkout.universal.js.map