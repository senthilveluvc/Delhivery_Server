import { RequestOptionsFactory } from '@wix/sdk-types';
/**
 * Creates a checkout.
 *
 *
 * The `createCheckout()` function returns a Promise that resolves to the new checkout when it's created.
 *
 * > **Notes:**
 * > + Checkout must include at least 1 item in the `options.lineItems` array.
 * > + `options.channelType` is required.
 * > + If `_id` for `options.lineItems` is added, make sure that each `_id` is unique.
 * > + If `options.checkoutInfo.customFields` are added, then `options.checkoutInfo.customFields.value` is required.
 */
export declare function createCheckout(payload: object): RequestOptionsFactory<any>;
/**
 * Retrieves a checkout.
 *
 *
 * The `getCheckout()` function returns a Promise that resolves when the specified checkout is retrieved.
 */
export declare function getCheckout(payload: object): RequestOptionsFactory<any>;
/** Retrieves the checkout associated with a specified cart. */
export declare function getCheckoutByCartId(payload: object): RequestOptionsFactory<any>;
/**
 * Retrieves the checkout page URL of a specified checkout.
 *
 * By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page.
 * However, if `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
 */
export declare function getCheckoutUrl(payload: object): RequestOptionsFactory<any>;
/**
 * Updates a checkout.
 *
 *
 * The `updateCheckout()` function returns a Promise that resolves to the updated checkout when the specified properties are updated.
 *
 * >**Notes:**
 * > + If nothing is passed in the request, the call will fail.
 * > + The `checkout.buyerInfo.email` may not be removed once it is set.
 */
export declare function updateCheckout(payload: object): RequestOptionsFactory<any>;
/**
 * Removes the coupon from a specified checkout.
 *
 *
 * The `removeCoupon()` function returns a Promise that resolves to the updated checkout when the coupon is removed from the specified checkout.
 *
 * >**Note:** A checkout can only hold 1 coupon.
 */
export declare function removeCoupon(payload: object): RequestOptionsFactory<any>;
/**
 * Removes the gift card from a specified checkout.
 *
 *
 * The `removeGiftCard()` function returns a Promise that resolves to the updated checkout when the gift card is removed from the specified checkout.
 *
 * >**Note:** A checkout can only hold 1 gift card.
 */
export declare function removeGiftCard(payload: object): RequestOptionsFactory<any>;
/**
 * Removes the `overrideCheckoutUrl` from a specified checkout.
 *
 * When `overrideCheckoutUrl` is removed, the `checkoutUrl` will be set to the default, standard
 * Wix checkout page URL.
 */
export declare function removeOverrideCheckoutUrl(payload: object): RequestOptionsFactory<any>;
/**
 * Adds catalog line items and/or custom line items to a checkout.
 *
 *
 * The `addToCheckout()` function returns a Promise that resolves to the updated checkout when the specified items have been added.
 * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
 */
export declare function addToCheckout(payload: object): RequestOptionsFactory<any>;
/**
 * Removes line items from the specified checkout.
 *
 *
 * The `removeLineItems()` function returns a Promise that resolves to the updated checkout when the line items are removed from the specified checkout.
 */
export declare function removeLineItems(payload: object): RequestOptionsFactory<any>;
/**
 * Creates an order from a specified checkout.
 *
 * The `createOrder()` function returns a Promise that resolves to the new order's ID and `paymentGatewayOrderID` when the order is created.
 * Pass the `paymentGatewayOrderId` as the `paymentId` param to the [`startPayment()`](https://www.wix.com/velo/reference/wix-pay-frontend/startpayment) function to allow a customer to pay for their order.
 *
 * > **Note:** The following requirements must be met for an order to be created from a checkout.
 * > + A checkout cannot have calculation errors. Pass the `checkout._id` to [Get Checkout](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/getcheckout) and take a look at the `calculationErrors` field.
 * > + A checkout must have at least 1 line item.
 * > + All of the line Items have an `availability.status` of `"AVAILABLE"` or `"PARTIALLY_AVAILABLE"`.
 * > + If there is a payment to be made, meaning that `priceSummary.total` is greater than 0, the `billingInfo.address` field must be provided.
 * > + When a checkout has line items to be shipped, the `shippingInfo.shippingDestination.address` and `shippingInfo.selectedCarrierServiceOption` fields must be provided.
 * > + When a checkout has line items for pickup, the `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails` field must be provided.
 */
export declare function createOrder(payload: object): RequestOptionsFactory<any>;
/**
 * Marks a checkout as completed - `checkout.complete` boolean is set to `true`.
 *
 *
 * The `markCheckoutAsCompleted()` function returns a Promise that resolves when the specified checkout is marked as completed.
 */
export declare function markCheckoutAsCompleted(payload: object): RequestOptionsFactory<any>;
/**
 * Updates the quantity of one or more line items in a checkout.
 *
 * This endpoint is only for updating the quantity of line items. To entirely remove a line item from
 * the checkout, use [`removeLineItems()`](#removelineitems).
 * To add a new line item to the checkout, use [`addToCheckout()`](#addtocheckout).
 *
 * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity`
 * is greater than the remaining stock, then the `quantity` returned in the response is the total amount
 * of remaining stock.
 */
export declare function updateLineItemsQuantity(payload: object): RequestOptionsFactory<any>;
