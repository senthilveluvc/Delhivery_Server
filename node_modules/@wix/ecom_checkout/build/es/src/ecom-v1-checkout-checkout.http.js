import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';
import { transformSDKFloatToRESTFloat } from '@wix/sdk-runtime/transformations/float';
import { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';
import { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformSDKFieldMaskToRESTFieldMask } from '@wix/sdk-runtime/transformations/field-mask';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { resolveUrl } from '@wix/sdk-runtime/rest-modules';
function resolveComWixEcomCheckoutApiV1CheckoutServiceUrl(opts) {
    const domainToMappings = {
        'www.wixapis.com': [
            {
                srcPath: '/ecom/v1/checkouts',
                destPath: '/v1/checkouts',
            },
        ],
        'api._api_base_domain_': [
            {
                srcPath: '/checkout',
                destPath: '',
            },
        ],
        _: [
            {
                srcPath: '/ecom/v1/checkouts',
                destPath: '/v1/checkouts',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/ecom/v1/checkouts',
                destPath: '/v1/checkouts',
            },
        ],
        'www._base_domain_': [
            {
                srcPath: '/ecom/v1/checkouts',
                destPath: '/v1/checkouts',
            },
        ],
        'bo._base_domain_': [
            {
                srcPath: '/ecom/v1/checkouts',
                destPath: '/v1/checkouts',
            },
        ],
        'wixbo.ai': [
            {
                srcPath: '/ecom/v1/checkouts',
                destPath: '/v1/checkouts',
            },
        ],
        'wix-bo.com': [
            {
                srcPath: '/ecom/v1/checkouts',
                destPath: '/v1/checkouts',
            },
        ],
    };
    return resolveUrl(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/ecom_checkout';
/**
 * Creates a checkout.
 *
 *
 * The `createCheckout()` function returns a Promise that resolves to the new checkout when it's created.
 *
 * > **Notes:**
 * > + Checkout must include at least 1 item in the `options.lineItems` array.
 * > + `options.channelType` is required.
 * > + If `_id` for `options.lineItems` is added, make sure that each `_id` is unique.
 * > + If `options.checkoutInfo.customFields` are added, then `options.checkoutInfo.customFields.value` is required.
 */
export function createCheckout(payload) {
    function __createCheckout({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'checkoutInfo.createdDate' },
                    { path: 'checkoutInfo.updatedDate' },
                    { path: 'checkoutInfo.lineItems.media.urlExpirationDate' },
                    {
                        path: 'checkoutInfo.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'checkoutInfo.lineItems.serviceProperties.scheduledDate' },
                    {
                        path: 'checkoutInfo.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                    },
                    {
                        path: 'checkoutInfo.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                    },
                    {
                        path: 'checkoutInfo.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                    },
                    {
                        path: 'checkoutInfo.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                    },
                    {
                        path: 'checkoutInfo.membershipOptions.eligibleMemberships.expirationDate',
                    },
                    {
                        path: 'checkoutInfo.membershipOptions.invalidMemberships.membership.expirationDate',
                    },
                    { path: 'lineItems.media.urlExpirationDate' },
                    {
                        path: 'lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'lineItems.serviceProperties.scheduledDate' },
                    {
                        path: 'customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'customLineItems.serviceProperties.scheduledDate' },
                ],
            },
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'checkoutInfo.lineItems.media.focalPoint.x' },
                    { path: 'checkoutInfo.lineItems.media.focalPoint.y' },
                    { path: 'lineItems.media.focalPoint.x' },
                    { path: 'lineItems.media.focalPoint.y' },
                    { path: 'checkoutInfo.lineItems.physicalProperties.weight' },
                    {
                        path: 'checkoutInfo.lineItems.catalogOverrideFields.physicalProperties.weight',
                    },
                    { path: 'checkoutInfo.billingInfo.address.geocode.latitude' },
                    { path: 'checkoutInfo.billingInfo.address.geocode.longitude' },
                    {
                        path: 'checkoutInfo.shippingInfo.shippingDestination.address.geocode.latitude',
                    },
                    {
                        path: 'checkoutInfo.shippingInfo.shippingDestination.address.geocode.longitude',
                    },
                    {
                        path: 'checkoutInfo.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                    },
                    {
                        path: 'checkoutInfo.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                    },
                    {
                        path: 'checkoutInfo.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                    },
                    {
                        path: 'checkoutInfo.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                    },
                    { path: 'checkoutInfo.appliedDiscounts.merchantDiscount.percentage' },
                    { path: 'lineItems.physicalProperties.weight' },
                    { path: 'lineItems.catalogOverrideFields.physicalProperties.weight' },
                    { path: 'customLineItems.physicalProperties.weight' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout',
            method: 'POST',
            methodFqn: 'com.wix.ecom.checkout.api.v1.CheckoutService.CreateCheckout',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
                protoPath: '/v1/checkouts',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'checkout.createdDate' },
                        { path: 'checkout.updatedDate' },
                        { path: 'checkout.lineItems.media.urlExpirationDate' },
                        {
                            path: 'checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'checkout.lineItems.serviceProperties.scheduledDate' },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.membershipOptions.eligibleMemberships.expirationDate',
                        },
                        {
                            path: 'checkout.membershipOptions.invalidMemberships.membership.expirationDate',
                        },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'checkout.lineItems.media.focalPoint.x' },
                        { path: 'checkout.lineItems.media.focalPoint.y' },
                        { path: 'checkout.lineItems.physicalProperties.weight' },
                        {
                            path: 'checkout.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'checkout.billingInfo.address.geocode.latitude' },
                        { path: 'checkout.billingInfo.address.geocode.longitude' },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'checkout.appliedDiscounts.merchantDiscount.percentage' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __createCheckout;
}
/**
 * Retrieves a checkout.
 *
 *
 * The `getCheckout()` function returns a Promise that resolves when the specified checkout is retrieved.
 */
export function getCheckout(payload) {
    function __getCheckout({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout',
            method: 'GET',
            methodFqn: 'com.wix.ecom.checkout.api.v1.CheckoutService.GetCheckout',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
                protoPath: '/v1/checkouts/{id}',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'checkout.createdDate' },
                        { path: 'checkout.updatedDate' },
                        { path: 'checkout.lineItems.media.urlExpirationDate' },
                        {
                            path: 'checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'checkout.lineItems.serviceProperties.scheduledDate' },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.membershipOptions.eligibleMemberships.expirationDate',
                        },
                        {
                            path: 'checkout.membershipOptions.invalidMemberships.membership.expirationDate',
                        },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'checkout.lineItems.media.focalPoint.x' },
                        { path: 'checkout.lineItems.media.focalPoint.y' },
                        { path: 'checkout.lineItems.physicalProperties.weight' },
                        {
                            path: 'checkout.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'checkout.billingInfo.address.geocode.latitude' },
                        { path: 'checkout.billingInfo.address.geocode.longitude' },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'checkout.appliedDiscounts.merchantDiscount.percentage' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getCheckout;
}
/** Retrieves the checkout associated with a specified cart. */
export function getCheckoutByCartId(payload) {
    function __getCheckoutByCartId({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout',
            method: 'GET',
            methodFqn: 'com.wix.ecom.checkout.api.v1.CheckoutService.GetCheckoutByCartId',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
                protoPath: '/v1/checkouts/by-cart-id/{id}',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'checkout.createdDate' },
                        { path: 'checkout.updatedDate' },
                        { path: 'checkout.lineItems.media.urlExpirationDate' },
                        {
                            path: 'checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'checkout.lineItems.serviceProperties.scheduledDate' },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.membershipOptions.eligibleMemberships.expirationDate',
                        },
                        {
                            path: 'checkout.membershipOptions.invalidMemberships.membership.expirationDate',
                        },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'checkout.lineItems.media.focalPoint.x' },
                        { path: 'checkout.lineItems.media.focalPoint.y' },
                        { path: 'checkout.lineItems.physicalProperties.weight' },
                        {
                            path: 'checkout.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'checkout.billingInfo.address.geocode.latitude' },
                        { path: 'checkout.billingInfo.address.geocode.longitude' },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'checkout.appliedDiscounts.merchantDiscount.percentage' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getCheckoutByCartId;
}
/**
 * Retrieves the checkout page URL of a specified checkout.
 *
 * By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page.
 * However, if `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
 */
export function getCheckoutUrl(payload) {
    function __getCheckoutUrl({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout',
            method: 'GET',
            methodFqn: 'com.wix.ecom.checkout.api.v1.CheckoutService.GetCheckoutURL',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
                protoPath: '/v1/checkouts/{id}/checkout-url',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
        };
        return metadata;
    }
    return __getCheckoutUrl;
}
/**
 * Updates a checkout.
 *
 *
 * The `updateCheckout()` function returns a Promise that resolves to the updated checkout when the specified properties are updated.
 *
 * >**Notes:**
 * > + If nothing is passed in the request, the call will fail.
 * > + The `checkout.buyerInfo.email` may not be removed once it is set.
 */
export function updateCheckout(payload) {
    function __updateCheckout({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'fieldMask' }],
            },
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'checkout.createdDate' },
                    { path: 'checkout.updatedDate' },
                    { path: 'checkout.lineItems.media.urlExpirationDate' },
                    {
                        path: 'checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'checkout.lineItems.serviceProperties.scheduledDate' },
                    {
                        path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                    },
                    {
                        path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                    },
                    {
                        path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                    },
                    {
                        path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                    },
                    {
                        path: 'checkout.membershipOptions.eligibleMemberships.expirationDate',
                    },
                    {
                        path: 'checkout.membershipOptions.invalidMemberships.membership.expirationDate',
                    },
                    { path: 'lineItems.media.urlExpirationDate' },
                    {
                        path: 'lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'lineItems.serviceProperties.scheduledDate' },
                    {
                        path: 'customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'customLineItems.serviceProperties.scheduledDate' },
                ],
            },
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'checkout.lineItems.media.focalPoint.x' },
                    { path: 'checkout.lineItems.media.focalPoint.y' },
                    { path: 'lineItems.media.focalPoint.x' },
                    { path: 'lineItems.media.focalPoint.y' },
                    { path: 'checkout.lineItems.physicalProperties.weight' },
                    {
                        path: 'checkout.lineItems.catalogOverrideFields.physicalProperties.weight',
                    },
                    { path: 'checkout.billingInfo.address.geocode.latitude' },
                    { path: 'checkout.billingInfo.address.geocode.longitude' },
                    {
                        path: 'checkout.shippingInfo.shippingDestination.address.geocode.latitude',
                    },
                    {
                        path: 'checkout.shippingInfo.shippingDestination.address.geocode.longitude',
                    },
                    {
                        path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                    },
                    {
                        path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                    },
                    {
                        path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                    },
                    {
                        path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                    },
                    { path: 'checkout.appliedDiscounts.merchantDiscount.percentage' },
                    { path: 'lineItems.physicalProperties.weight' },
                    { path: 'lineItems.catalogOverrideFields.physicalProperties.weight' },
                    { path: 'customLineItems.physicalProperties.weight' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout',
            method: 'PATCH',
            methodFqn: 'com.wix.ecom.checkout.api.v1.CheckoutService.UpdateCheckout',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
                protoPath: '/v1/checkouts/{checkout.id}',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'checkout.createdDate' },
                        { path: 'checkout.updatedDate' },
                        { path: 'checkout.lineItems.media.urlExpirationDate' },
                        {
                            path: 'checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'checkout.lineItems.serviceProperties.scheduledDate' },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.membershipOptions.eligibleMemberships.expirationDate',
                        },
                        {
                            path: 'checkout.membershipOptions.invalidMemberships.membership.expirationDate',
                        },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'checkout.lineItems.media.focalPoint.x' },
                        { path: 'checkout.lineItems.media.focalPoint.y' },
                        { path: 'checkout.lineItems.physicalProperties.weight' },
                        {
                            path: 'checkout.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'checkout.billingInfo.address.geocode.latitude' },
                        { path: 'checkout.billingInfo.address.geocode.longitude' },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'checkout.appliedDiscounts.merchantDiscount.percentage' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateCheckout;
}
/**
 * Removes the coupon from a specified checkout.
 *
 *
 * The `removeCoupon()` function returns a Promise that resolves to the updated checkout when the coupon is removed from the specified checkout.
 *
 * >**Note:** A checkout can only hold 1 coupon.
 */
export function removeCoupon(payload) {
    function __removeCoupon({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout',
            method: 'POST',
            methodFqn: 'com.wix.ecom.checkout.api.v1.CheckoutService.RemoveCoupon',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
                protoPath: '/v1/checkouts/{id}/remove-coupon',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'checkout.createdDate' },
                        { path: 'checkout.updatedDate' },
                        { path: 'checkout.lineItems.media.urlExpirationDate' },
                        {
                            path: 'checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'checkout.lineItems.serviceProperties.scheduledDate' },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.membershipOptions.eligibleMemberships.expirationDate',
                        },
                        {
                            path: 'checkout.membershipOptions.invalidMemberships.membership.expirationDate',
                        },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'checkout.lineItems.media.focalPoint.x' },
                        { path: 'checkout.lineItems.media.focalPoint.y' },
                        { path: 'checkout.lineItems.physicalProperties.weight' },
                        {
                            path: 'checkout.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'checkout.billingInfo.address.geocode.latitude' },
                        { path: 'checkout.billingInfo.address.geocode.longitude' },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'checkout.appliedDiscounts.merchantDiscount.percentage' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __removeCoupon;
}
/**
 * Removes the gift card from a specified checkout.
 *
 *
 * The `removeGiftCard()` function returns a Promise that resolves to the updated checkout when the gift card is removed from the specified checkout.
 *
 * >**Note:** A checkout can only hold 1 gift card.
 */
export function removeGiftCard(payload) {
    function __removeGiftCard({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout',
            method: 'POST',
            methodFqn: 'com.wix.ecom.checkout.api.v1.CheckoutService.RemoveGiftCard',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
                protoPath: '/v1/checkouts/{id}/remove-gift-card',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'checkout.createdDate' },
                        { path: 'checkout.updatedDate' },
                        { path: 'checkout.lineItems.media.urlExpirationDate' },
                        {
                            path: 'checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'checkout.lineItems.serviceProperties.scheduledDate' },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.membershipOptions.eligibleMemberships.expirationDate',
                        },
                        {
                            path: 'checkout.membershipOptions.invalidMemberships.membership.expirationDate',
                        },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'checkout.lineItems.media.focalPoint.x' },
                        { path: 'checkout.lineItems.media.focalPoint.y' },
                        { path: 'checkout.lineItems.physicalProperties.weight' },
                        {
                            path: 'checkout.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'checkout.billingInfo.address.geocode.latitude' },
                        { path: 'checkout.billingInfo.address.geocode.longitude' },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'checkout.appliedDiscounts.merchantDiscount.percentage' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __removeGiftCard;
}
/**
 * Removes the `overrideCheckoutUrl` from a specified checkout.
 *
 * When `overrideCheckoutUrl` is removed, the `checkoutUrl` will be set to the default, standard
 * Wix checkout page URL.
 */
export function removeOverrideCheckoutUrl(payload) {
    function __removeOverrideCheckoutUrl({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout',
            method: 'POST',
            methodFqn: 'com.wix.ecom.checkout.api.v1.CheckoutService.RemoveOverrideCheckoutUrl',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
                protoPath: '/v1/checkouts/{id}/remove-override-checkout-url',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'checkout.createdDate' },
                        { path: 'checkout.updatedDate' },
                        { path: 'checkout.lineItems.media.urlExpirationDate' },
                        {
                            path: 'checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'checkout.lineItems.serviceProperties.scheduledDate' },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.membershipOptions.eligibleMemberships.expirationDate',
                        },
                        {
                            path: 'checkout.membershipOptions.invalidMemberships.membership.expirationDate',
                        },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'checkout.lineItems.media.focalPoint.x' },
                        { path: 'checkout.lineItems.media.focalPoint.y' },
                        { path: 'checkout.lineItems.physicalProperties.weight' },
                        {
                            path: 'checkout.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'checkout.billingInfo.address.geocode.latitude' },
                        { path: 'checkout.billingInfo.address.geocode.longitude' },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'checkout.appliedDiscounts.merchantDiscount.percentage' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __removeOverrideCheckoutUrl;
}
/**
 * Adds catalog line items and/or custom line items to a checkout.
 *
 *
 * The `addToCheckout()` function returns a Promise that resolves to the updated checkout when the specified items have been added.
 * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
 */
export function addToCheckout(payload) {
    function __addToCheckout({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'lineItems.media.urlExpirationDate' },
                    {
                        path: 'lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'lineItems.serviceProperties.scheduledDate' },
                    {
                        path: 'customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'customLineItems.serviceProperties.scheduledDate' },
                ],
            },
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'lineItems.media.focalPoint.x' },
                    { path: 'lineItems.media.focalPoint.y' },
                    { path: 'lineItems.physicalProperties.weight' },
                    { path: 'lineItems.catalogOverrideFields.physicalProperties.weight' },
                    { path: 'customLineItems.physicalProperties.weight' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout',
            method: 'POST',
            methodFqn: 'com.wix.ecom.checkout.api.v1.CheckoutService.AddToCheckout',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
                protoPath: '/v1/checkouts/{id}/add-to-checkout',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'checkout.createdDate' },
                        { path: 'checkout.updatedDate' },
                        { path: 'checkout.lineItems.media.urlExpirationDate' },
                        {
                            path: 'checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'checkout.lineItems.serviceProperties.scheduledDate' },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.membershipOptions.eligibleMemberships.expirationDate',
                        },
                        {
                            path: 'checkout.membershipOptions.invalidMemberships.membership.expirationDate',
                        },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'checkout.lineItems.media.focalPoint.x' },
                        { path: 'checkout.lineItems.media.focalPoint.y' },
                        { path: 'checkout.lineItems.physicalProperties.weight' },
                        {
                            path: 'checkout.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'checkout.billingInfo.address.geocode.latitude' },
                        { path: 'checkout.billingInfo.address.geocode.longitude' },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'checkout.appliedDiscounts.merchantDiscount.percentage' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __addToCheckout;
}
/**
 * Removes line items from the specified checkout.
 *
 *
 * The `removeLineItems()` function returns a Promise that resolves to the updated checkout when the line items are removed from the specified checkout.
 */
export function removeLineItems(payload) {
    function __removeLineItems({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout',
            method: 'POST',
            methodFqn: 'com.wix.ecom.checkout.api.v1.CheckoutService.RemoveLineItems',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
                protoPath: '/v1/checkouts/{id}/remove-line-items',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'checkout.createdDate' },
                        { path: 'checkout.updatedDate' },
                        { path: 'checkout.lineItems.media.urlExpirationDate' },
                        {
                            path: 'checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'checkout.lineItems.serviceProperties.scheduledDate' },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.membershipOptions.eligibleMemberships.expirationDate',
                        },
                        {
                            path: 'checkout.membershipOptions.invalidMemberships.membership.expirationDate',
                        },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'checkout.lineItems.media.focalPoint.x' },
                        { path: 'checkout.lineItems.media.focalPoint.y' },
                        { path: 'checkout.lineItems.physicalProperties.weight' },
                        {
                            path: 'checkout.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'checkout.billingInfo.address.geocode.latitude' },
                        { path: 'checkout.billingInfo.address.geocode.longitude' },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'checkout.appliedDiscounts.merchantDiscount.percentage' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __removeLineItems;
}
/**
 * Creates an order from a specified checkout.
 *
 * The `createOrder()` function returns a Promise that resolves to the new order's ID and `paymentGatewayOrderID` when the order is created.
 * Pass the `paymentGatewayOrderId` as the `paymentId` param to the [`startPayment()`](https://www.wix.com/velo/reference/wix-pay-frontend/startpayment) function to allow a customer to pay for their order.
 *
 * > **Note:** The following requirements must be met for an order to be created from a checkout.
 * > + A checkout cannot have calculation errors. Pass the `checkout._id` to [Get Checkout](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/getcheckout) and take a look at the `calculationErrors` field.
 * > + A checkout must have at least 1 line item.
 * > + All of the line Items have an `availability.status` of `"AVAILABLE"` or `"PARTIALLY_AVAILABLE"`.
 * > + If there is a payment to be made, meaning that `priceSummary.total` is greater than 0, the `billingInfo.address` field must be provided.
 * > + When a checkout has line items to be shipped, the `shippingInfo.shippingDestination.address` and `shippingInfo.selectedCarrierServiceOption` fields must be provided.
 * > + When a checkout has line items for pickup, the `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails` field must be provided.
 */
export function createOrder(payload) {
    function __createOrder({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout',
            method: 'POST',
            methodFqn: 'com.wix.ecom.checkout.api.v1.CheckoutService.CreateOrder',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
                protoPath: '/v1/checkouts/{id}/create-order',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __createOrder;
}
/**
 * Marks a checkout as completed - `checkout.complete` boolean is set to `true`.
 *
 *
 * The `markCheckoutAsCompleted()` function returns a Promise that resolves when the specified checkout is marked as completed.
 */
export function markCheckoutAsCompleted(payload) {
    function __markCheckoutAsCompleted({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout',
            method: 'POST',
            methodFqn: 'com.wix.ecom.checkout.api.v1.CheckoutService.MarkCheckoutAsCompleted',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
                protoPath: '/v1/checkouts/{id}/mark-as-completed',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __markCheckoutAsCompleted;
}
/**
 * Updates the quantity of one or more line items in a checkout.
 *
 * This endpoint is only for updating the quantity of line items. To entirely remove a line item from
 * the checkout, use [`removeLineItems()`](#removelineitems).
 * To add a new line item to the checkout, use [`addToCheckout()`](#addtocheckout).
 *
 * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity`
 * is greater than the remaining stock, then the `quantity` returned in the response is the total amount
 * of remaining stock.
 */
export function updateLineItemsQuantity(payload) {
    function __updateLineItemsQuantity({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout',
            method: 'POST',
            methodFqn: 'com.wix.ecom.checkout.api.v1.CheckoutService.UpdateLineItemsQuantity',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomCheckoutApiV1CheckoutServiceUrl({
                protoPath: '/v1/checkouts/{id}/update-line-items-quantity',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'checkout.createdDate' },
                        { path: 'checkout.updatedDate' },
                        { path: 'checkout.lineItems.media.urlExpirationDate' },
                        {
                            path: 'checkout.lineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'checkout.lineItems.serviceProperties.scheduledDate' },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.deliveryTimeSlot.to',
                        },
                        {
                            path: 'checkout.membershipOptions.eligibleMemberships.expirationDate',
                        },
                        {
                            path: 'checkout.membershipOptions.invalidMemberships.membership.expirationDate',
                        },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'checkout.lineItems.media.focalPoint.x' },
                        { path: 'checkout.lineItems.media.focalPoint.y' },
                        { path: 'checkout.lineItems.physicalProperties.weight' },
                        {
                            path: 'checkout.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        { path: 'checkout.billingInfo.address.geocode.latitude' },
                        { path: 'checkout.billingInfo.address.geocode.longitude' },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address.geocode.longitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'checkout.shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'checkout.appliedDiscounts.merchantDiscount.percentage' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateLineItemsQuantity;
}
//# sourceMappingURL=ecom-v1-checkout-checkout.http.js.map