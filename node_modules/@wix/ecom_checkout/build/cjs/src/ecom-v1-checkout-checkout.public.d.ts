import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { AddToCheckoutOptions, AddToCheckoutResponse, AddToCheckoutResponseNonNullableFields, Checkout, CheckoutCompletedEnvelope, CheckoutCreatedEnvelope, CheckoutNonNullableFields, CheckoutUpdatedEnvelope, CreateCheckoutOptions, CreateOrderOptions, CreateOrderResponse, CreateOrderResponseNonNullableFields, GetCheckoutByCartIdResponse, GetCheckoutByCartIdResponseNonNullableFields, GetCheckoutURLResponse, GetCheckoutURLResponseNonNullableFields, LineItemQuantityUpdate, RemoveCouponResponse, RemoveCouponResponseNonNullableFields, RemoveGiftCardResponse, RemoveGiftCardResponseNonNullableFields, RemoveLineItemsResponse, RemoveLineItemsResponseNonNullableFields, RemoveOverrideCheckoutUrlResponse, RemoveOverrideCheckoutUrlResponseNonNullableFields, UpdateCheckout, UpdateCheckoutOptions, UpdateLineItemsQuantityResponse, UpdateLineItemsQuantityResponseNonNullableFields } from './ecom-v1-checkout-checkout.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createCheckout(httpClient: HttpClient): CreateCheckoutSignature;
interface CreateCheckoutSignature {
    /**
     * Creates a checkout.
     *
     *
     * The `createCheckout()` function returns a Promise that resolves to the new checkout when it's created.
     *
     * > **Notes:**
     * > + Checkout must include at least 1 item in the `options.lineItems` array.
     * > + `options.channelType` is required.
     * > + If `_id` for `options.lineItems` is added, make sure that each `_id` is unique.
     * > + If `options.checkoutInfo.customFields` are added, then `options.checkoutInfo.customFields.value` is required.
     * @param - Checkout creation options.
     * @returns Fulfilled - the newly created checkout.
     */
    (options?: CreateCheckoutOptions | undefined): Promise<Checkout & CheckoutNonNullableFields>;
}
export declare function getCheckout(httpClient: HttpClient): GetCheckoutSignature;
interface GetCheckoutSignature {
    /**
     * Retrieves a checkout.
     *
     *
     * The `getCheckout()` function returns a Promise that resolves when the specified checkout is retrieved.
     * @param - Checkout ID.
     * @returns Fulfilled - the requested checkout.
     */
    (_id: string): Promise<Checkout & CheckoutNonNullableFields>;
}
export declare function getCheckoutByCartId(httpClient: HttpClient): GetCheckoutByCartIdSignature;
interface GetCheckoutByCartIdSignature {
    /**
     * Retrieves the checkout associated with a specified cart.
     * @param - Cart ID.
     */
    (_id: string): Promise<GetCheckoutByCartIdResponse & GetCheckoutByCartIdResponseNonNullableFields>;
}
export declare function getCheckoutUrl(httpClient: HttpClient): GetCheckoutUrlSignature;
interface GetCheckoutUrlSignature {
    /**
     * Retrieves the checkout page URL of a specified checkout.
     *
     * By default, a `checkoutUrl` generates for a checkout and directs to a standard Wix checkout page.
     * However, if `overrideCheckoutUrl` has a value, it will replace and set the value of `checkoutUrl`.
     * @param - Checkout ID.
     */
    (_id: string): Promise<GetCheckoutURLResponse & GetCheckoutURLResponseNonNullableFields>;
}
export declare function updateCheckout(httpClient: HttpClient): UpdateCheckoutSignature;
interface UpdateCheckoutSignature {
    /**
     * Updates a checkout.
     *
     *
     * The `updateCheckout()` function returns a Promise that resolves to the updated checkout when the specified properties are updated.
     *
     * >**Notes:**
     * > + If nothing is passed in the request, the call will fail.
     * > + The `checkout.buyerInfo.email` may not be removed once it is set.
     * @param - Checkout ID.
     * @param - Checkout update options.
     * @returns Updated checkout.
     */
    (_id: string | null, checkout: UpdateCheckout, options?: UpdateCheckoutOptions | undefined): Promise<Checkout & CheckoutNonNullableFields>;
}
export declare function removeCoupon(httpClient: HttpClient): RemoveCouponSignature;
interface RemoveCouponSignature {
    /**
     * Removes the coupon from a specified checkout.
     *
     *
     * The `removeCoupon()` function returns a Promise that resolves to the updated checkout when the coupon is removed from the specified checkout.
     *
     * >**Note:** A checkout can only hold 1 coupon.
     * @param - ID of the checkout to remove the coupon from.
     */
    (_id: string): Promise<RemoveCouponResponse & RemoveCouponResponseNonNullableFields>;
}
export declare function removeGiftCard(httpClient: HttpClient): RemoveGiftCardSignature;
interface RemoveGiftCardSignature {
    /**
     * Removes the gift card from a specified checkout.
     *
     *
     * The `removeGiftCard()` function returns a Promise that resolves to the updated checkout when the gift card is removed from the specified checkout.
     *
     * >**Note:** A checkout can only hold 1 gift card.
     * @param - ID of the checkout to remove the gift card from.
     */
    (_id: string): Promise<RemoveGiftCardResponse & RemoveGiftCardResponseNonNullableFields>;
}
export declare function removeOverrideCheckoutUrl(httpClient: HttpClient): RemoveOverrideCheckoutUrlSignature;
interface RemoveOverrideCheckoutUrlSignature {
    /**
     * Removes the `overrideCheckoutUrl` from a specified checkout.
     *
     * When `overrideCheckoutUrl` is removed, the `checkoutUrl` will be set to the default, standard
     * Wix checkout page URL.
     * @param - ID of the checkout to remove the override checkout url from.
     */
    (_id: string): Promise<RemoveOverrideCheckoutUrlResponse & RemoveOverrideCheckoutUrlResponseNonNullableFields>;
}
export declare function addToCheckout(httpClient: HttpClient): AddToCheckoutSignature;
interface AddToCheckoutSignature {
    /**
     * Adds catalog line items and/or custom line items to a checkout.
     *
     *
     * The `addToCheckout()` function returns a Promise that resolves to the updated checkout when the specified items have been added.
     * > **Note:** When adding catalog items, `options.lineItems.catalogReference` is required.
     * @param - Checkout ID.
     * @param - Items to be added to checkout.
     */
    (_id: string, options?: AddToCheckoutOptions | undefined): Promise<AddToCheckoutResponse & AddToCheckoutResponseNonNullableFields>;
}
export declare function removeLineItems(httpClient: HttpClient): RemoveLineItemsSignature;
interface RemoveLineItemsSignature {
    /**
     * Removes line items from the specified checkout.
     *
     *
     * The `removeLineItems()` function returns a Promise that resolves to the updated checkout when the line items are removed from the specified checkout.
     * @param - ID of the checkout to remove line items from.
     * @param - IDs of the line items to be removed.
     * To find the IDs of the checkout line items you'd like to remove, pass the `checkout._id` to [getCheckout()](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/getcheckout) and look for the IDs under `lineItems` and/or `customLineItems`.
     */
    (_id: string, lineItemIds: string[]): Promise<RemoveLineItemsResponse & RemoveLineItemsResponseNonNullableFields>;
}
export declare function createOrder(httpClient: HttpClient): CreateOrderSignature;
interface CreateOrderSignature {
    /**
     * Creates an order from a specified checkout.
     *
     * The `createOrder()` function returns a Promise that resolves to the new order's ID and `paymentGatewayOrderID` when the order is created.
     * Pass the `paymentGatewayOrderId` as the `paymentId` param to the [`startPayment()`](https://www.wix.com/velo/reference/wix-pay-frontend/startpayment) function to allow a customer to pay for their order.
     *
     * > **Note:** The following requirements must be met for an order to be created from a checkout.
     * > + A checkout cannot have calculation errors. Pass the `checkout._id` to [Get Checkout](https://www.wix.com/velo/reference/wix-ecom-backend/checkout/getcheckout) and take a look at the `calculationErrors` field.
     * > + A checkout must have at least 1 line item.
     * > + All of the line Items have an `availability.status` of `"AVAILABLE"` or `"PARTIALLY_AVAILABLE"`.
     * > + If there is a payment to be made, meaning that `priceSummary.total` is greater than 0, the `billingInfo.address` field must be provided.
     * > + When a checkout has line items to be shipped, the `shippingInfo.shippingDestination.address` and `shippingInfo.selectedCarrierServiceOption` fields must be provided.
     * > + When a checkout has line items for pickup, the `shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails` field must be provided.
     * @param - Checkout ID.
     * @param - Further order creation options.
     */
    (_id: string, options?: CreateOrderOptions | undefined): Promise<CreateOrderResponse & CreateOrderResponseNonNullableFields>;
}
export declare function markCheckoutAsCompleted(httpClient: HttpClient): MarkCheckoutAsCompletedSignature;
interface MarkCheckoutAsCompletedSignature {
    /**
     * Marks a checkout as completed - `checkout.complete` boolean is set to `true`.
     *
     *
     * The `markCheckoutAsCompleted()` function returns a Promise that resolves when the specified checkout is marked as completed.
     * @param - Checkout ID.
     */
    (_id: string): Promise<void>;
}
export declare function updateLineItemsQuantity(httpClient: HttpClient): UpdateLineItemsQuantitySignature;
interface UpdateLineItemsQuantitySignature {
    /**
     * Updates the quantity of one or more line items in a checkout.
     *
     * This endpoint is only for updating the quantity of line items. To entirely remove a line item from
     * the checkout, use [`removeLineItems()`](#removelineitems).
     * To add a new line item to the checkout, use [`addToCheckout()`](#addtocheckout).
     *
     * This endpoint checks the amount of stock remaining for this line item. If the specified `quantity`
     * is greater than the remaining stock, then the `quantity` returned in the response is the total amount
     * of remaining stock.
     * @param - Checkout ID.
     * @param - Line item info to update.
     */
    (_id: string, lineItems: LineItemQuantityUpdate[]): Promise<UpdateLineItemsQuantityResponse & UpdateLineItemsQuantityResponseNonNullableFields>;
}
export declare const onCheckoutCompleted: EventDefinition<CheckoutCompletedEnvelope, "wix.ecom.v1.checkout_completed">;
export declare const onCheckoutCreated: EventDefinition<CheckoutCreatedEnvelope, "wix.ecom.v1.checkout_created">;
export declare const onCheckoutUpdated: EventDefinition<CheckoutUpdatedEnvelope, "wix.ecom.v1.checkout_updated">;
export { ActionEvent, AddToCheckoutOptions, AddToCheckoutRequest, AddToCheckoutResponse, AddToCheckoutResponseNonNullableFields, AdditionalFee, AdditionalFeeSource, Address, AddressAddressLine1OptionsOneOf, AddressLocation, AddressWithContact, AggregatedTaxBreakdown, ApiAddress, ApplicableLineItems, ApplicationError, AppliedCoupon, AppliedDiscount, AppliedDiscountDiscountSourceOneOf, AutoTaxFallbackCalculationDetails, BaseEventMetadata, BillingInfo, BuyerInfo, BuyerInfoIdOneOf, CalculationErrors, CalculationErrorsShippingCalculationErrorOneOf, Carrier, CarrierError, CarrierErrors, CarrierServiceOption, CatalogOverrideFields, CatalogReference, ChannelInfo, ChannelInfoChannelType, ChannelType, ChargeDetails, ChargeType, Checkout, CheckoutCompletedEnvelope, CheckoutCreatedEnvelope, CheckoutMarkedAsCompleted, CheckoutNonNullableFields, CheckoutUpdatedEnvelope, Color, CommonVatId, CommonVatType, ConversionInfo, Coupon, CreateCheckoutOptions, CreateCheckoutRequest, CreateCheckoutResponse, CreateCheckoutResponseNonNullableFields, CreateOrderAndChargeRequest, CreateOrderAndChargeResponse, CreateOrderAndChargeResponseIdOneOf, CreateOrderOptions, CreateOrderRequest, CreateOrderResponse, CreateOrderResponseIdOneOf, CreateOrderResponseNonNullableFields, CreatedBy, CreatedByIdOneOf, CustomContentReference, CustomField, CustomLineItem, CustomSettings, CustomTextFieldSelection, DeleteCheckoutRequest, DeleteCheckoutResponse, DeliveryAllocation, DeliveryLogistics, DeliveryTimeSlot, Description, DescriptionLine, DescriptionLineDescriptionLineValueOneOf, DescriptionLineName, DescriptionLineType, DescriptionLineValueOneOf, Details, DetailsKindOneOf, Discount, DiscountDiscountType, DiscountRule, DiscountRuleName, DiscountType, DomainEvent, DomainEventBodyOneOf, DoublePaymentErrorData, DoublePaymentErrorDataIdOneOf, Empty, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, ExtendedFields, ExternalReference, FallbackReason, FieldViolation, FileType, FocalPoint, FreeTrialPeriod, FullAddressContactDetails, FullName, GetCheckoutByCartIdRequest, GetCheckoutByCartIdResponse, GetCheckoutByCartIdResponseNonNullableFields, GetCheckoutPaymentSettingsRequest, GetCheckoutPaymentSettingsResponse, GetCheckoutPaymentSettingsResponsePaymentOption, GetCheckoutRequest, GetCheckoutResponse, GetCheckoutResponseNonNullableFields, GetCheckoutURLRequest, GetCheckoutURLResponse, GetCheckoutURLResponseNonNullableFields, GetCheckoutWithAllExtendedFieldsRequest, GetCheckoutWithAllExtendedFieldsResponse, GetWixCheckoutURLRequest, GetWixCheckoutURLResponse, GiftCard, Group, IdentificationData, IdentificationDataIdOneOf, IdentityType, InvalidMembership, ItemAvailabilityInfo, ItemAvailabilityStatus, ItemTaxFullDetails, ItemType, ItemTypeItemType, ItemTypeItemTypeDataOneOf, JurisdictionType, LineItem, LineItemDiscount, LineItemQuantityUpdate, LineItemType, ManualCalculationReason, MarkCheckoutAsCompletedRequest, MarkCheckoutAsCompletedResponse, MediaItem, MediaItemType, Membership, MembershipName, MembershipOptions, MembershipPaymentCredits, MerchantDiscount, MerchantDiscountInput, MessageEnvelope, MultiCurrencyPrice, NameInLineItem, NameInOther, OptionSelection, Other, OtherCharge, PaymentErrorResponseData, PaymentOption, PaymentOptionType, PhysicalProperties, PickupAddress, PickupDetails, PickupMethod, PlainTextValue, Policy, PriceDescription, PriceSummary, ProductDetails, ProductName, RateType, RedeemErrorData, Region, RemoveCouponRequest, RemoveCouponResponse, RemoveCouponResponseNonNullableFields, RemoveGiftCardRequest, RemoveGiftCardResponse, RemoveGiftCardResponseNonNullableFields, RemoveLineItemsRequest, RemoveLineItemsResponse, RemoveLineItemsResponseNonNullableFields, RemoveOverrideCheckoutUrlRequest, RemoveOverrideCheckoutUrlResponse, RemoveOverrideCheckoutUrlResponseNonNullableFields, RestoreInfo, RuleType, Scope, SecuredMedia, SelectedCarrierServiceOption, SelectedCarrierServiceOptionOtherCharge, SelectedCarrierServiceOptionPrices, SelectedMembership, SelectedMemberships, ServiceProperties, Severity, ShipmentDetails, ShippingCalculationErrorData, ShippingCalculationErrorDataShippingCalculationErrorOneOf, ShippingInfo, ShippingOption, ShippingPrice, ShippingRegion, StoreSettings, Street, StreetAddress, Subscription, SubscriptionCreated, SubscriptionFrequency, SubscriptionOptionInfo, SubscriptionSettings, SuggestedFix, SystemError, Target, TargetLineItem, TargetTargetTypeOneOf, TaxBreakdown, TaxCalculationDetails, TaxCalculationDetailsCalculationDetailsOneOf, TaxRateBreakdown, TaxSummary, TaxableAddress, TaxableAddressTaxableAddressDataOneOf, TaxableAddressType, Title, Totals, UpdateCheckout, UpdateCheckoutOptions, UpdateCheckoutRequest, UpdateCheckoutResponse, UpdateCheckoutResponseNonNullableFields, UpdateLineItemsQuantityRequest, UpdateLineItemsQuantityResponse, UpdateLineItemsQuantityResponseNonNullableFields, UpdatedCheckoutMessage, V1BuyerInfo, V1CustomField, V1LineItem, V1PickupDetails, V1ShippingInfo, V1ShippingInfoDetailsOneOf, V1SubscriptionOptionInfo, V1SubscriptionSettings, ValidationError, VatId, VatType, Violation, ViolationsList, WebhookIdentityType, WeightUnit, } from './ecom-v1-checkout-checkout.universal.js';
