"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConversionRate = exports.convertCurrency = exports.listCurrencies = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixEcommerceCurrencyConverterV1CurrencyRate = __importStar(require("./ecommerce-currency-converter-v1-currency-rate-currencies.http.js"));
/**
 * Returns an array of currencies. The array lists all currencies for which Wix supports conversion and their symbols.
 * @public
 * @permissionId CURRENCY_CONVERTER.READ_CURRENCIES
 * @permissionScope Manage Currencies
 * @permissionScopeId SCOPE.DC-CURRENCY-CONVERTER.MANAGE-CURRENCIES
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @fqn com.wixpress.currency.converter.api.v1.CurrencyConverter.ListCurrencies
 */
async function listCurrencies() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({});
    const reqOpts = ambassadorWixEcommerceCurrencyConverterV1CurrencyRate.listCurrencies(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.listCurrencies = listCurrencies;
/**
 * Returns an array of amounts converted from the original (`from`) currency to the target (`to`) currency and the timestamp for the conversion rate used.
 *
 *
 * Use the `convertCurrency()` function to convert an array of one or more amounts between two currencies. The `convertCurrency()` function returns an array of converted amounts and the timestamp for the conversion rate used.
 *
 * > **Note**:  The currency codes used must exist in the array of supported currencies returned by the [`listCurrencies()`](#listcurrencies) function.
 *
 * @param amounts - Amounts to convert.
 * @public
 * @requiredField amounts
 * @requiredField identifiers
 * @requiredField identifiers.from
 * @requiredField identifiers.to
 * @param identifiers - Identifying details needed to determine which currency rate to convert. The combination of the `from` and `to` properties together comprise the unique ID.
 * @param options - Options to use when converting currency.
 * @permissionId CURRENCY_CONVERTER.READ_CURRENCIES
 * @permissionScope Manage Currencies
 * @permissionScopeId SCOPE.DC-CURRENCY-CONVERTER.MANAGE-CURRENCIES
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @fqn com.wixpress.currency.converter.api.v1.CurrencyConverter.ConvertCurrency
 */
async function convertCurrency(identifiers, amounts) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        from: identifiers?.from,
        to: identifiers?.to,
        amounts: amounts,
    });
    const reqOpts = ambassadorWixEcommerceCurrencyConverterV1CurrencyRate.convertCurrency(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                from: '$[0].from',
                to: '$[0].to',
                amounts: '$[1]',
            },
            singleArgumentUnchanged: false,
        }, ['identifiers', 'amounts']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.convertCurrency = convertCurrency;
/**
 * Returns the conversion rate between 2 currencies.
 * @public
 * @requiredField identifiers
 * @requiredField identifiers.from
 * @requiredField identifiers.to
 * @param identifiers - Identifying details needed to get the conversion rate. The combination of the `from` and `to` properties together comprise the unique ID.
 * @permissionId CURRENCY_CONVERTER.READ_CURRENCIES
 * @permissionScope Manage Currencies
 * @permissionScopeId SCOPE.DC-CURRENCY-CONVERTER.MANAGE-CURRENCIES
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @fqn com.wixpress.currency.converter.api.v1.CurrencyConverter.ConversionRate
 */
async function getConversionRate(identifiers) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        from: identifiers?.from,
        to: identifiers?.to,
    });
    const reqOpts = ambassadorWixEcommerceCurrencyConverterV1CurrencyRate.conversionRate(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { from: '$[0].from', to: '$[0].to' },
            singleArgumentUnchanged: false,
        }, ['identifiers']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.getConversionRate = getConversionRate;
//# sourceMappingURL=ecommerce-currency-converter-v1-currency-rate-currencies.universal.js.map