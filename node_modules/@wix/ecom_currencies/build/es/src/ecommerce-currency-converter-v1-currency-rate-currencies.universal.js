import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcommerceCurrencyConverterV1CurrencyRate from './ecommerce-currency-converter-v1-currency-rate-currencies.http.js';
/**
 * Returns an array of currencies. The array lists all currencies for which Wix supports conversion and their symbols.
 * @public
 * @permissionId CURRENCY_CONVERTER.READ_CURRENCIES
 * @permissionScope Manage Currencies
 * @permissionScopeId SCOPE.DC-CURRENCY-CONVERTER.MANAGE-CURRENCIES
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @fqn com.wixpress.currency.converter.api.v1.CurrencyConverter.ListCurrencies
 */
export async function listCurrencies() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixEcommerceCurrencyConverterV1CurrencyRate.listCurrencies(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Returns an array of amounts converted from the original (`from`) currency to the target (`to`) currency and the timestamp for the conversion rate used.
 *
 *
 * Use the `convertCurrency()` function to convert an array of one or more amounts between two currencies. The `convertCurrency()` function returns an array of converted amounts and the timestamp for the conversion rate used.
 *
 * > **Note**:  The currency codes used must exist in the array of supported currencies returned by the [`listCurrencies()`](#listcurrencies) function.
 *
 * @param amounts - Amounts to convert.
 * @public
 * @requiredField amounts
 * @requiredField identifiers
 * @requiredField identifiers.from
 * @requiredField identifiers.to
 * @param identifiers - Identifying details needed to determine which currency rate to convert. The combination of the `from` and `to` properties together comprise the unique ID.
 * @param options - Options to use when converting currency.
 * @permissionId CURRENCY_CONVERTER.READ_CURRENCIES
 * @permissionScope Manage Currencies
 * @permissionScopeId SCOPE.DC-CURRENCY-CONVERTER.MANAGE-CURRENCIES
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @fqn com.wixpress.currency.converter.api.v1.CurrencyConverter.ConvertCurrency
 */
export async function convertCurrency(identifiers, amounts) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        from: identifiers?.from,
        to: identifiers?.to,
        amounts: amounts,
    });
    const reqOpts = ambassadorWixEcommerceCurrencyConverterV1CurrencyRate.convertCurrency(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                from: '$[0].from',
                to: '$[0].to',
                amounts: '$[1]',
            },
            singleArgumentUnchanged: false,
        }, ['identifiers', 'amounts']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Returns the conversion rate between 2 currencies.
 * @public
 * @requiredField identifiers
 * @requiredField identifiers.from
 * @requiredField identifiers.to
 * @param identifiers - Identifying details needed to get the conversion rate. The combination of the `from` and `to` properties together comprise the unique ID.
 * @permissionId CURRENCY_CONVERTER.READ_CURRENCIES
 * @permissionScope Manage Currencies
 * @permissionScopeId SCOPE.DC-CURRENCY-CONVERTER.MANAGE-CURRENCIES
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @applicableIdentity APP
 * @fqn com.wixpress.currency.converter.api.v1.CurrencyConverter.ConversionRate
 */
export async function getConversionRate(identifiers) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        from: identifiers?.from,
        to: identifiers?.to,
    });
    const reqOpts = ambassadorWixEcommerceCurrencyConverterV1CurrencyRate.conversionRate(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { from: '$[0].from', to: '$[0].to' },
            singleArgumentUnchanged: false,
        }, ['identifiers']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecommerce-currency-converter-v1-currency-rate-currencies.universal.js.map