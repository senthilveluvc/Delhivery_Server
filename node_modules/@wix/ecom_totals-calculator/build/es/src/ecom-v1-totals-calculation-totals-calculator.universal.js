import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1TotalsCalculation from './ecom-v1-totals-calculation-totals-calculator.http.js';
import { transformSDKAddressToRESTAddress } from '@wix/sdk-runtime/transformations/address';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
/** Frequency unit of recurring payment */
export var SubscriptionFrequency;
(function (SubscriptionFrequency) {
    SubscriptionFrequency["UNDEFINED"] = "UNDEFINED";
    SubscriptionFrequency["DAY"] = "DAY";
    SubscriptionFrequency["WEEK"] = "WEEK";
    SubscriptionFrequency["MONTH"] = "MONTH";
    SubscriptionFrequency["YEAR"] = "YEAR";
})(SubscriptionFrequency || (SubscriptionFrequency = {}));
/** Type of selected payment option for catalog item */
export var PaymentOptionType;
(function (PaymentOptionType) {
    /** The entire payment for this item happens as part of the checkout. */
    PaymentOptionType["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    PaymentOptionType["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    PaymentOptionType["MEMBERSHIP"] = "MEMBERSHIP";
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    PaymentOptionType["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    PaymentOptionType["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
})(PaymentOptionType || (PaymentOptionType = {}));
export var ItemTypeItemType;
(function (ItemTypeItemType) {
    ItemTypeItemType["UNRECOGNISED"] = "UNRECOGNISED";
    ItemTypeItemType["PHYSICAL"] = "PHYSICAL";
    ItemTypeItemType["DIGITAL"] = "DIGITAL";
    ItemTypeItemType["GIFT_CARD"] = "GIFT_CARD";
    ItemTypeItemType["SERVICE"] = "SERVICE";
})(ItemTypeItemType || (ItemTypeItemType = {}));
export var TaxableAddressType;
(function (TaxableAddressType) {
    TaxableAddressType["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
    TaxableAddressType["BUSINESS"] = "BUSINESS";
    TaxableAddressType["BILLING"] = "BILLING";
    TaxableAddressType["SHIPPING"] = "SHIPPING";
})(TaxableAddressType || (TaxableAddressType = {}));
export var PickupMethod;
(function (PickupMethod) {
    PickupMethod["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
    PickupMethod["STORE_PICKUP"] = "STORE_PICKUP";
    PickupMethod["PICKUP_POINT"] = "PICKUP_POINT";
})(PickupMethod || (PickupMethod = {}));
export var ChargeType;
(function (ChargeType) {
    ChargeType["HANDLING_FEE"] = "HANDLING_FEE";
    ChargeType["INSURANCE"] = "INSURANCE";
})(ChargeType || (ChargeType = {}));
export var DiscountType;
(function (DiscountType) {
    DiscountType["GLOBAL"] = "GLOBAL";
    DiscountType["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
    DiscountType["SHIPPING"] = "SHIPPING";
})(DiscountType || (DiscountType = {}));
export var DataFetchType;
(function (DataFetchType) {
    DataFetchType["SHIPPING"] = "SHIPPING";
    DataFetchType["DISCOUNT"] = "DISCOUNT";
    DataFetchType["ADDITIONAL_FEES"] = "ADDITIONAL_FEES";
    DataFetchType["ORDER_VALIDATION"] = "ORDER_VALIDATION";
})(DataFetchType || (DataFetchType = {}));
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
export var JurisdictionType;
(function (JurisdictionType) {
    JurisdictionType["UNDEFINED"] = "UNDEFINED";
    JurisdictionType["COUNTRY"] = "COUNTRY";
    JurisdictionType["STATE"] = "STATE";
    JurisdictionType["COUNTY"] = "COUNTY";
    JurisdictionType["CITY"] = "CITY";
    JurisdictionType["SPECIAL"] = "SPECIAL";
})(JurisdictionType || (JurisdictionType = {}));
export var RateType;
(function (RateType) {
    /** no tax being collected for this request due to location of purchase */
    RateType["NO_TAX_COLLECTED"] = "NO_TAX_COLLECTED";
    /** manual rate used for calculation */
    RateType["MANUAL_RATE"] = "MANUAL_RATE";
    /** autotax rate used for calculation */
    RateType["AUTO_RATE"] = "AUTO_RATE";
    /** fallback rate used for calculation */
    RateType["FALLBACK_RATE"] = "FALLBACK_RATE";
})(RateType || (RateType = {}));
export var ManualCalculationReason;
(function (ManualCalculationReason) {
    /** user set calculator in Business Manager to be Manual */
    ManualCalculationReason["GLOBAL_SETTING_TO_MANUAL"] = "GLOBAL_SETTING_TO_MANUAL";
    /** specific region is on manual even though Global setting is Auto-tax */
    ManualCalculationReason["REGION_SETTING_TO_MANUAL"] = "REGION_SETTING_TO_MANUAL";
})(ManualCalculationReason || (ManualCalculationReason = {}));
export var FallbackReason;
(function (FallbackReason) {
    /** auto-tax failed to be calculated */
    FallbackReason["AUTO_TAX_FAILED"] = "AUTO_TAX_FAILED";
    /** auto-tax was temporarily deactivated on a system-level */
    FallbackReason["AUTO_TAX_DEACTIVATED"] = "AUTO_TAX_DEACTIVATED";
})(FallbackReason || (FallbackReason = {}));
export var RuleType;
(function (RuleType) {
    RuleType["VALIDATION"] = "VALIDATION";
    RuleType["OTHER"] = "OTHER";
    RuleType["MAX"] = "MAX";
    RuleType["MIN"] = "MIN";
    RuleType["MAX_LENGTH"] = "MAX_LENGTH";
    RuleType["MIN_LENGTH"] = "MIN_LENGTH";
    RuleType["MAX_SIZE"] = "MAX_SIZE";
    RuleType["MIN_SIZE"] = "MIN_SIZE";
    RuleType["FORMAT"] = "FORMAT";
    RuleType["DECIMAL_LTE"] = "DECIMAL_LTE";
    RuleType["DECIMAL_GTE"] = "DECIMAL_GTE";
    RuleType["DECIMAL_LT"] = "DECIMAL_LT";
    RuleType["DECIMAL_GT"] = "DECIMAL_GT";
    RuleType["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
    RuleType["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
    RuleType["REQUIRED_FIELD"] = "REQUIRED_FIELD";
    RuleType["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
    RuleType["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
    RuleType["EXACT_LENGTH"] = "EXACT_LENGTH";
    RuleType["EXACT_SIZE"] = "EXACT_SIZE";
    RuleType["REQUIRED_ONE_OF_FIELD"] = "REQUIRED_ONE_OF_FIELD";
})(RuleType || (RuleType = {}));
export var WeightUnit;
(function (WeightUnit) {
    /** Weight unit can't be classified, due to an error */
    WeightUnit["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
    /** Kilograms */
    WeightUnit["KG"] = "KG";
    /** Pounds */
    WeightUnit["LB"] = "LB";
})(WeightUnit || (WeightUnit = {}));
export var AdditionalFeeSource;
(function (AdditionalFeeSource) {
    AdditionalFeeSource["UNKNOWN_ADDITIONAL_FEE_SOURCE"] = "UNKNOWN_ADDITIONAL_FEE_SOURCE";
    /** The additional fee was added by an additional fee service plugin */
    AdditionalFeeSource["SERVICE_PLUGIN"] = "SERVICE_PLUGIN";
    /** The additional fee was added on the item either via the catalog or on custom line item */
    AdditionalFeeSource["ITEM"] = "ITEM";
    /** The additional fee was added manually on the request */
    AdditionalFeeSource["MANUAL"] = "MANUAL";
})(AdditionalFeeSource || (AdditionalFeeSource = {}));
/**
 * Returns a totals calculation for specified line items.
 * @public
 * @documentationMaturity preview
 * @requiredField options.lineItems._id
 * @requiredField options.lineItems.price
 * @requiredField options.lineItems.quantity
 * @requiredField options.merchantDiscounts.amount
 * @requiredField options.selectedMemberships.memberships._id
 * @requiredField options.selectedMemberships.memberships.appId
 * @requiredField options.selectedMemberships.memberships.lineItemIds
 * @requiredField options.selectedShippingOption.code
 * @permissionId ECOM.CALCULATE_TOTALS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn com.wix.ecom.totals_calculator.v1.TotalsCalculator.CalculateTotals
 */
export async function calculateTotals(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        calculationId: options?.calculationId,
        lineItems: options?.lineItems,
        shippingAddress: options?.shippingAddress,
        billingAddress: options?.billingAddress,
        selectedShippingOption: options?.selectedShippingOption,
        couponId: options?.couponId,
        couponCode: options?.couponCode,
        giftCardId: options?.giftCardId,
        giftCardCode: options?.giftCardCode,
        merchantDiscounts: options?.merchantDiscounts,
        buyerEmail: options?.buyerEmail,
        memberId: options?.memberId,
        selectedMemberships: options?.selectedMemberships,
        buyerPhone: options?.buyerPhone,
        purchaseFlowId: options?.purchaseFlowId,
    }), [
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [
                { path: 'shippingAddress' },
                { path: 'billingAddress' },
                {
                    path: 'shippingOptions.shippingOptions.logistics.pickupDetails.address',
                },
            ],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1TotalsCalculation.calculateTotals(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    {
                        path: 'shippingInfo.selectedCarrierServiceOption.logistics.pickupDetails.address',
                    },
                    {
                        path: 'shippingInfo.carrierServiceOptions.shippingOptions.logistics.pickupDetails.address',
                    },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                calculationId: '$[0].calculationId',
                lineItems: '$[0].lineItems',
                shippingAddress: '$[0].shippingAddress',
                billingAddress: '$[0].billingAddress',
                selectedShippingOption: '$[0].selectedShippingOption',
                couponId: '$[0].couponId',
                couponCode: '$[0].couponCode',
                giftCardId: '$[0].giftCardId',
                giftCardCode: '$[0].giftCardCode',
                merchantDiscounts: '$[0].merchantDiscounts',
                buyerEmail: '$[0].buyerEmail',
                memberId: '$[0].memberId',
                selectedMemberships: '$[0].selectedMemberships',
                buyerPhone: '$[0].buyerPhone',
                purchaseFlowId: '$[0].purchaseFlowId',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-totals-calculation-totals-calculator.universal.js.map