export interface Order {
    /**
     * Order ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Order number displayed in the site owner's dashboard (auto-generated).
     * @readonly
     */
    number?: string;
    /**
     * Date and time the order was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    createdDate?: Date | null;
    /**
     * Date and time the order was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    updatedDate?: Date | null;
    /**
     * Order line items.
     * @readonly
     */
    lineItems?: OrderLineItem[];
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /** Order payment status. */
    paymentStatus?: PaymentStatus;
    /**
     * Order fulfillment status.
     * @readonly
     */
    fulfillmentStatus?: FulfillmentStatus;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     */
    buyerLanguage?: string | null;
    /** Weight measurement unit - defaults to site's weight unit. */
    weightUnit?: WeightUnit;
    /** Currency used for the pricing of this order in [ISO-4217](https://en.wikipedia.org/wiki/ISO_4217#List_of_ISO_4217_currency_codes) format. */
    currency?: string | null;
    /** Whether tax is included in line item prices. */
    taxIncludedInPrices?: boolean;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string | null;
    /**
     * Order price summary.
     * @readonly
     */
    priceSummary?: PriceSummary;
    /** Billing address and contact details. */
    billingInfo?: AddressWithContact;
    /** Shipping info and selected shipping option details. */
    shippingInfo?: V1ShippingInformation;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Order status. */
    status?: OrderStatus;
    /** Whether order is archived. */
    archived?: boolean | null;
    /**
     * Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @deprecated Tax summary.
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary;
    /** Tax information. */
    taxInfo?: OrderTaxInfo;
    /** Applied discounts. */
    appliedDiscounts?: AppliedDiscount[];
    /**
     * Order activities.
     * @readonly
     */
    activities?: Activity[];
    /** Order attribution source. */
    attributionSource?: AttributionSource;
    /**
     * ID of the order's initiator.
     * @readonly
     */
    createdBy?: CreatedBy;
    /** Information about the sales channel that submitted this order. */
    channelInfo?: ChannelInfo;
    /** Whether a human has seen the order. Set when an order is clicked on in the dashboard. */
    seenByAHuman?: boolean | null;
    /** Checkout ID. */
    checkoutId?: string | null;
    /** Custom fields. */
    customFields?: CustomField[];
    /**
     * Balance summary.
     * @readonly
     */
    balanceSummary?: BalanceSummary;
    /** Additional fees applied to the order. */
    additionalFees?: AdditionalFee[];
    /**
     * Custom field data for the order object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
    /**
     * Order recipient address and contact details.
     *
     * This field may differ from the address in `shippingInfo.logistics` when:
     * + The chosen shipping option is pickup point or store pickup.
     * + No shipping option is selected.
     */
    recipientInfo?: AddressWithContact;
    /**
     * Date and time the order was originally purchased in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * Used for migration from external systems.
     */
    purchasedDate?: Date | null;
}
export interface OrderLineItem {
    /** Line item ID. */
    id?: string;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference;
    /** Line item quantity. */
    quantity?: number;
    /**
     * Total discount for this line item's entire quantity.
     * @readonly
     */
    totalDiscount?: Price;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine[];
    /** Line item image. */
    image?: Image;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass the order ID to [List Fulfillments For Single Order](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/order-fulfillments/list-fulfillments-for-single-order).
     */
    fulfillerId?: string | null;
    /** Number of items that were refunded. */
    refundQuantity?: number | null;
    /** Number of items restocked. */
    restockQuantity?: number | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price;
    /**
     * Line item price before line item discounts for display purposes. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: Price;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: Price;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE` - The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` - Partial payment for the given item to be paid upfront during the checkout. Eligible for catalog items with type `DEPOSIT_ONLINE` only.
     */
    paymentOption?: PaymentOptionType;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails;
    /** Represents all the relevant tax details for a specific line item. */
    taxInfo?: LineItemTaxInfo;
    /** Digital file identifier, relevant only for items with type DIGITAL. */
    digitalFile?: DigitalFile;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /**
     * Item's price amount to be charged during checkout. Relevant for items with a `paymentOption` value of `"DEPOSIT_ONLINE"`.
     * @readonly
     */
    depositAmount?: Price;
    /**
     * Custom extended fields for the line item object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
}
export interface ProductName {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
export interface CatalogReference {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
export interface Price {
    /** Amount. */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
export interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
export interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
export interface DescriptionLineDescriptionLineValueOneOf {
}
export interface DescriptionLineName {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
export interface PlainTextValue {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
export interface Color {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
export declare enum DescriptionLineType {
    /** Unrecognized type. */
    UNRECOGNISED = "UNRECOGNISED",
    /** Plain text type. */
    PLAIN_TEXT = "PLAIN_TEXT",
    /** Color type. */
    COLOR = "COLOR"
}
export interface Image {
    /** WixMedia image ID. */
    id?: string;
    /** Image URL. */
    url?: string;
    /**
     * Original image height.
     * @readonly
     */
    height?: number;
    /**
     * Original image width.
     * @readonly
     */
    width?: number;
    /** Image alt text. */
    altText?: string | null;
    /**
     * Image filename.
     * @readonly
     */
    filename?: string | null;
}
export interface FocalPoint {
    /** X-coordinate of the focal point. */
    x?: number;
    /** Y-coordinate of the focal point. */
    y?: number;
    /** crop by height */
    height?: number | null;
    /** crop by width */
    width?: number | null;
}
export interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
export interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
export interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
export declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
/** Type of selected payment option for catalog item */
export declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
export interface ItemTaxFullDetails {
    /** Taxable amount of this line item. */
    taxableAmount?: Price;
    /** Tax rate percentage, as a decimal numeral between 0 and 1. For example, `"0.13"`. */
    taxRate?: string;
    /** The calculated tax, based on the `taxableAmount` and `taxRate`. */
    totalTax?: Price;
}
export interface LineItemTaxInfo {
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    taxAmount?: Price;
    /** Amount for which tax is calculated. */
    taxableAmount?: Price;
    /** Tax rate %, as a decimal point. */
    taxRate?: string | null;
    /**
     * Tax group ID.
     * Learn more about [Tax Groups](https://dev.wix.com/docs/rest/business-management/payments/tax/tax-groups/introduction).
     */
    taxGroupId?: string | null;
    /** Indicates whether the price already includes tax. */
    taxIncludedInPrice?: boolean;
    /** Tax information for a line item. */
    taxBreakdown?: LineItemTaxBreakdown[];
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
export interface LineItemTaxBreakdown {
    /** Jurisdiction that taxes were calculated for. For example, "New York", or "Quebec". */
    jurisdiction?: string | null;
    /** Tax rate used for this jurisdiction, as a decimal. For example, 10% tax is 0.1000. */
    rate?: string | null;
    /** Amount of tax calculated for this line item. */
    taxAmount?: Price;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** Type of jurisdiction that taxes were calculated for. */
    jurisdictionType?: JurisdictionType;
    /** Non-taxable amount of the line item price. */
    nonTaxableAmount?: Price;
    /** Taxable amount of the line item price. */
    taxableAmount?: Price;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
export declare enum JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
export interface DigitalFile {
    /** ID of the secure file in media. */
    fileId?: string;
    /** Link will exist after the digital links have been generated on the order. */
    link?: string | null;
    /**
     * Link expiration time and date.
     * @readonly
     */
    expirationDate?: Date | null;
}
export interface SubscriptionInfo {
    /** Subscription ID. */
    id?: string | null;
    /** Subscription cycle. For example, if this order is for the 3rd cycle of a subscription, value will be `3`. */
    cycleNumber?: number;
    /** Subscription option title. For example, `"Monthly coffee Subscription"`. */
    subscriptionOptionTitle?: string;
    /** Subscription option description. For example, `"1kg of selected coffee, once a month"`. */
    subscriptionOptionDescription?: string | null;
    /** Subscription detailed information. */
    subscriptionSettings?: SubscriptionSettings;
}
export interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency;
    /** Interval of recurring payment. */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal: true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
export declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
export interface FreeTrialPeriod {
    /** Frequency of priod. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequency;
    /** interval of period */
    interval?: number;
}
export interface PriceDescription {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
export interface LocationAndQuantity {
    /** Location id in the associated owner app. */
    id?: string;
    /**
     * Location owner app, if not provided then the site business info locations will be used.
     * @deprecated Location owner app, if not provided then the site business info locations will be used.
     * @targetRemovalDate 2025-03-01
     */
    appId?: string | null;
    /** Quantity for specific location. */
    quantity?: number;
}
export interface TaxableAddress extends TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType;
}
/** @oneof */
export interface TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType;
}
export declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
export interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
/** Buyer Info */
export interface BuyerInfo extends BuyerInfoIdOneOf {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
    /** Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction). */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
export interface BuyerInfoIdOneOf {
    /** Visitor ID (if site visitor is not a member). */
    visitorId?: string;
    /** Member ID (if site visitor is a site member). */
    memberId?: string;
}
export declare enum PaymentStatus {
    UNSPECIFIED = "UNSPECIFIED",
    /**
     * `NOT_PAID` can apply to an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     */
    NOT_PAID = "NOT_PAID",
    /** All required payments associated with this order are paid. */
    PAID = "PAID",
    /** Order partially refunded, but the refunded amount is less than the order's total price. See `order.balanceSummary` for more details. */
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    /** Order fully refunded. Refund amount equals total price. See `order.balanceSummary` for more details. */
    FULLY_REFUNDED = "FULLY_REFUNDED",
    /**
     * All payments pending.
     *
     * This can happen with two-step payments, when a payment requires manual review, or when a payment is in progress and will be concluded shortly.
     * Learn more about [pending orders](https://support.wix.com/en/article/pending-orders).
     */
    PENDING = "PENDING",
    /** At least one payment received and approved, but it covers less than the order's total price. See `order.balanceSummary` for more details. */
    PARTIALLY_PAID = "PARTIALLY_PAID",
    /**
     * Payment received, but not yet confirmed by the payment provider.
     *
     * In most cases, when a payment provider is holding payment it's because setup hasn't been successfully completed by the merchant/site owner.
     * To solve this, the merchant/site owner should log in to the payment provider's dashboard and make sure their account is set up correctly, or contact their support for further assistance.
     * @documentationMaturity preview
     */
    PENDING_MERCHANT = "PENDING_MERCHANT",
    /**
     * One or more payments canceled.
     * @documentationMaturity preview
     */
    CANCELED = "CANCELED",
    /**
     * One or more payments declined.
     * @documentationMaturity preview
     */
    DECLINED = "DECLINED"
}
export declare enum FulfillmentStatus {
    /** None of the order items are fulfilled or the order was manually marked as unfulfilled. */
    NOT_FULFILLED = "NOT_FULFILLED",
    /**
     * All of the order items are fulfilled or the order was manually marked as fulfilled.
     * Orders without shipping info are fulfilled automatically.
     */
    FULFILLED = "FULFILLED",
    /** Some, but not all, of the order items are fulfilled. */
    PARTIALLY_FULFILLED = "PARTIALLY_FULFILLED"
}
export declare enum WeightUnit {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
export interface PriceSummary {
    /** Subtotal of all the line items, before discounts and before tax. */
    subtotal?: Price;
    /** Total shipping price, before discounts and before tax. */
    shipping?: Price;
    /** Total tax on this order. */
    tax?: Price;
    /** Total calculated discount value. */
    discount?: Price;
    /** Order’s total price after discounts and tax. */
    total?: Price;
    /** Total price of additional fees before tax. */
    totalAdditionalFees?: Price;
}
/** Billing Info and shipping details */
export interface AddressWithContact {
    /** Address. */
    address?: Address;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
}
/** Physical address */
export interface Address {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
export interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
export interface AddressLocation {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
/** Full contact details for an address */
export interface FullAddressContactDetails {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
export interface VatId {
    /** Customer's tax ID. */
    id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType;
}
/** tax info types */
export declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
export interface V1ShippingInformation {
    /** App Def Id of external provider which was a source of shipping info */
    carrierId?: string | null;
    /** Unique code (or ID) of selected shipping option. For example, `"usps_std_overnight"`. */
    code?: string | null;
    /**
     * Shipping option title.
     * For example, `"USPS Standard Overnight Delivery"`, `"Standard"` or `"First-Class Package International"`.
     */
    title?: string;
    /** Shipping logistics. */
    logistics?: DeliveryLogistics;
    /** Shipping costs. */
    cost?: ShippingPrice;
    /** Shipping region. */
    region?: ShippingRegion;
}
export interface DeliveryLogistics extends DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
    /** Expected delivery time in free text. For example, `"3-5 business days"`. */
    deliveryTime?: string | null;
    /** Instructions for carrier. For example, `"Please knock on the door. If unanswered, please call contact number. Thanks."`. */
    instructions?: string | null;
    /**
     * Deprecated - Latest expected delivery date and time in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @deprecated
     */
    deliverByDate?: Date | null;
    /** Expected delivery time. */
    deliveryTimeSlot?: DeliveryTimeSlot;
}
/** @oneof */
export interface DeliveryLogisticsAddressOneOf {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
}
export interface PickupDetails {
    /** Pickup address. */
    address?: PickupAddress;
    /** Pickup method */
    pickupMethod?: PickupMethod;
}
/** Physical address */
export interface PickupAddress {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address object, with number, name, and apartment number in separate fields. */
    streetAddress?: StreetAddress;
    /** Main address line (usually street name and number). */
    addressLine?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
export declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
export interface DeliveryTimeSlot {
    /** Delivery slot starting time. */
    from?: Date | null;
    /** Delivery slot ending time. */
    to?: Date | null;
}
export interface ShippingPrice {
    /** Shipping price for display purposes. */
    price?: Price;
    /**
     * Total price of shipping after discounts (when relevant), and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: Price;
    /**
     * Shipping price after all discounts (if any exist), and after tax.
     * @readonly
     */
    totalPriceAfterTax?: Price;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /**
     * Shipping discount before tax.
     * @readonly
     */
    discount?: Price;
}
export interface ShippingRegion {
    /** Name of shipping region. For example, `"Metropolitan London"`, or `"Outer Melbourne suburbs"`. */
    name?: string | null;
}
export declare enum OrderStatus {
    /** Order created, but not yet approved or canceled. */
    INITIALIZED = "INITIALIZED",
    /**
     * Order approved.
     *
     * This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order).
     * Offline orders (cash payment) are automatically approved.
     */
    APPROVED = "APPROVED",
    /** Order canceled by the user. */
    CANCELED = "CANCELED",
    /**
     * Order pending.
     * @documentationMaturity preview
     */
    PENDING = "PENDING",
    /**
     * Order rejected.
     *
     * This happens when pending payments fail.
     * @documentationMaturity preview
     */
    REJECTED = "REJECTED"
}
export interface TaxSummary {
    /**
     * Total tax.
     * @readonly
     */
    totalTax?: Price;
}
export interface OrderTaxInfo {
    /** Calculated tax, added from line items. */
    totalTax?: Price;
    /** The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate. */
    taxBreakdown?: OrderTaxBreakdown[];
    /**
     * Whether the order is exempt from tax calculations.
     *
     * Default: `false`
     * @readonly
     */
    taxExempt?: boolean | null;
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
export interface OrderTaxBreakdown {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionType?: JurisdictionType;
    /** The rate at which this tax detail was calculated. */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: Price;
}
export interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Applied coupon info. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Automatic Discount */
    discountRule?: DiscountRule;
    /**
     * Discount type.
     * * `"GLOBAL"` - discount applies to entire order.
     * * `"SPECIFIC-ITEMS"` - discount applies to specific items.
     * * `"SHIPPING"` - discount applies to shipping. For example, free shipping.
     */
    discountType?: DiscountType;
    /**
     * IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @deprecated IDs of line items discount applies to.
     * Deprecated. Use `line_item_discounts` instead.
     * @replacedBy line_item_discounts
     * @targetRemovalDate 2024-10-30
     */
    lineItemIds?: string[];
    /** Discount id. */
    id?: string | null;
}
/** @oneof */
export interface AppliedDiscountDiscountSourceOneOf {
    /** Applied coupon info. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Automatic Discount */
    discountRule?: DiscountRule;
}
export declare enum DiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
export interface Coupon {
    /** Coupon ID. */
    id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon name. */
    name?: string;
    /** Coupon value. */
    amount?: Price;
}
export interface MerchantDiscount extends MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason;
    /** Discount description as free text (optional). */
    description?: string | null;
    /** Discount amount. */
    amount?: Price;
}
/** @oneof */
export interface MerchantDiscountMerchantDiscountReasonOneOf {
    /**
     * Pre-defined discount reason (optional).
     * * `"ITEMS_EXCHANGE"` - exchange balance acquired as a result of items exchange.
     */
    discountReason?: DiscountReason;
    /** Discount description as free text (optional). */
    description?: string | null;
}
export declare enum DiscountReason {
    UNSPECIFIED = "UNSPECIFIED",
    EXCHANGED_ITEMS = "EXCHANGED_ITEMS"
}
export interface DiscountRule {
    /** Discount rule ID */
    id?: string;
    /** Discount rule name */
    name?: DiscountRuleName;
    /** Discount value. */
    amount?: Price;
}
export interface DiscountRuleName {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
export interface LineItemDiscount {
    /** ID of line item the discount applies to. */
    id?: string;
    /** Total discount for this line item. */
    totalDiscount?: Price;
}
export interface Activity extends ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded;
    /**
     * Activity ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Activity author's email.
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Activity creation date and time.
     * @readonly
     */
    createdDate?: Date | null;
    /** Activity type. */
    type?: ActivityType;
}
/** @oneof */
export interface ActivityContentOneOf {
    /** Custom activity details (optional). `activity.type` must be `CUSTOM_ACTIVITY`. */
    customActivity?: CustomActivity;
    /** Merchant comment details (optional). `activity.type` must be `MERCHANT_COMMENT`. */
    merchantComment?: MerchantComment;
    /** Additional info about order refunded activity (optional). `activity.type` must be `ORDER_REFUNDED`. */
    orderRefunded?: OrderRefunded;
}
export interface CustomActivity {
    /** ID of the app that created the custom activity. */
    appId?: string;
    /** Custom activity type. For example, `"Ticket number set"`. */
    type?: string;
    /** Additional data in key-value form. For example, `{ "Ticket number": "123456" }`. */
    additionalData?: Record<string, string>;
}
/** Store owner added a comment */
export interface MerchantComment {
    /** Merchant comment message. */
    message?: string;
}
export interface OrderRefunded {
    /** Whether order was refunded manually. For example, via payment provider or using cash. */
    manual?: boolean;
    /** Refund amount. */
    amount?: Price;
    /** Reason for refund. */
    reason?: string;
}
export interface OrderCreatedFromExchange {
    /** ID of the original order for which the exchange happened. */
    originalOrderId?: string;
}
export interface NewExchangeOrderCreated {
    /** ID of the new order created as a result of an exchange of items. */
    exchangeOrderId?: string;
    /** IDs of the items that were exchanged. */
    lineItems?: LineItemExchangeData[];
}
export interface LineItemExchangeData {
    /** ID of the exchanged line item. */
    lineItemId?: string;
    /** Line item quantity being exchanged. */
    quantity?: number;
}
export interface DraftOrderChangesApplied {
    /** Draft order id. */
    draftOrderId?: string;
    /** Reason for edit, given by user (optional). */
    reason?: string | null;
    /** Changes applied to order. */
    changes?: OrderChange[];
}
export interface OrderChange extends OrderChangeValueOneOf {
    lineItemChanged?: LineItemChanges;
    lineItemAdded?: ManagedLineItem;
    lineItemRemoved?: ManagedLineItem;
    discountAdded?: ManagedDiscount;
    discountRemoved?: ManagedDiscount;
    additionalFeeAdded?: ManagedAdditionalFee;
    additionalFeeRemoved?: ManagedAdditionalFee;
    totalPriceChanged?: TotalPriceChange;
    shippingInformationChanged?: ShippingInformationChange;
}
/** @oneof */
export interface OrderChangeValueOneOf {
    lineItemChanged?: LineItemChanges;
    lineItemAdded?: ManagedLineItem;
    lineItemRemoved?: ManagedLineItem;
    discountAdded?: ManagedDiscount;
    discountRemoved?: ManagedDiscount;
    additionalFeeAdded?: ManagedAdditionalFee;
    additionalFeeRemoved?: ManagedAdditionalFee;
    totalPriceChanged?: TotalPriceChange;
    shippingInformationChanged?: ShippingInformationChange;
}
export interface LineItemChanges {
    /** Line item ID. */
    id?: string;
    /** Item name. */
    name?: ProductName;
    /** Item quantity change. */
    quantity?: LineItemQuantityChange;
    /** Item price change. */
    price?: LineItemPriceChange;
}
export interface LineItemQuantityChange {
    /** Item quantity before update. */
    originalQuantity?: number;
    /** Item quantity after update. */
    newQuantity?: number;
    /** Difference between original and new quantity. Absolute value. */
    diff?: number;
    /** Type of quantity change: increase or decrease. */
    deltaType?: LineItemQuantityChangeType;
}
export declare enum LineItemQuantityChangeType {
    /** Quantity increased. */
    QUANTITY_INCREASED = "QUANTITY_INCREASED",
    /** Quantity decreased. */
    QUANTITY_DECREASED = "QUANTITY_DECREASED"
}
export interface LineItemPriceChange {
    /** Item price before update. */
    originalPrice?: Price;
    /** Item price after update. */
    newPrice?: Price;
}
export interface ManagedLineItem {
    /** Line item ID. */
    id?: string;
    /** Item name. */
    name?: ProductName;
    /** Added or removed item quantity. */
    quantity?: number;
}
export interface ManagedDiscount {
    /** Discount id. */
    id?: string;
    /** Discount name: coupon name / discount rule name / merchant discount description. */
    name?: TranslatedValue;
    /** Line items discount applies to. */
    affectedLineItems?: LineItemAmount[];
    /** Discount amount. */
    totalAmount?: Price;
}
export interface TranslatedValue {
    /** Value in site default language. */
    original?: string;
    /** Translated value. */
    translated?: string | null;
}
export interface LineItemAmount {
    /** Order line item id */
    id?: string;
    /** Item name. */
    name?: ProductName;
    /** Amount associated with this item. (Discount amount for item / additional fee amount for item) */
    amount?: Price;
}
export interface ManagedAdditionalFee {
    /** Additional fee id. */
    id?: string;
    /** Additional fee name. */
    name?: TranslatedValue;
    /** Line items additional fee applies to. */
    affectedLineItems?: LineItemAmount[];
    /** Additional fee amount. */
    totalAmount?: Price;
}
export interface TotalPriceChange {
    /** Order’s total price after discounts and tax. Before update */
    originalTotal?: Price;
    /** Order’s total price after discounts and tax. After update */
    newTotal?: Price;
}
export interface ShippingInformationChange {
    /** Order’s Shipping Information. Before update */
    originalShippingInfo?: ShippingInformation;
    /** Order’s Shipping Information. After update */
    newShippingInfo?: ShippingInformation;
}
export interface ShippingInformation {
    /** Order’s shipping price. */
    total?: Price;
    /** Order’s shipping title. */
    shippingTitle?: string;
}
/** Payment method is saved for order */
export interface SavedPaymentMethod {
    /** Payment method name */
    name?: string;
    /** Payment method description */
    description?: string | null;
}
export interface AuthorizedPaymentCreated {
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
    /** Payment amount */
    amount?: Price;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
export interface AuthorizedPaymentCaptured {
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
    /** Payment amount */
    amount?: Price;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
export interface AuthorizedPaymentVoided {
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
    /** Payment amount */
    amount?: Price;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
export interface RefundInitiated {
    /** Refund ID. */
    refundId?: string;
    /** Refund amount. */
    amount?: Price;
    /** Details about the payments being refunded. */
    payments?: RefundedPayment[];
    /** Reason for refund. */
    reason?: string | null;
}
export interface RefundedPayment extends RefundedPaymentKindOneOf {
    /** Regular payment refund. */
    regular?: RegularPaymentRefund;
    /** Gift card payment refund. */
    giftCard?: GiftCardPaymentRefund;
    /** Membership payment refund. */
    membership?: MembershipPaymentRefund;
    /** Payment ID. */
    paymentId?: string;
    /** Whether refund was made externally and manually on the payment provider's side. */
    externalRefund?: boolean;
}
/** @oneof */
export interface RefundedPaymentKindOneOf {
    /** Regular payment refund. */
    regular?: RegularPaymentRefund;
    /** Gift card payment refund. */
    giftCard?: GiftCardPaymentRefund;
    /** Membership payment refund. */
    membership?: MembershipPaymentRefund;
}
export interface RegularPaymentRefund {
    /** Refund amount */
    amount?: Price;
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
export interface GiftCardPaymentRefund {
    /** Gift card payment ID */
    giftCardPaymentId?: string | null;
    /** Refund amount */
    amount?: Price;
}
export interface MembershipPaymentRefund {
    /** Membership ID */
    membershipId?: string | null;
}
export interface PaymentRefunded {
    /** Refund ID. */
    refundId?: string;
    /** Details about the refunded payment. */
    payment?: RefundedPayment;
}
export interface PaymentRefundFailed {
    /** Refund ID. */
    refundId?: string;
    /** Details about the failed payment refund. */
    payment?: RefundedPayment;
}
export interface RefundedAsStoreCredit {
    /** Refund amount */
    amount?: Price;
    /** Reason for refund */
    reason?: string | null;
}
export interface PaymentPending extends PaymentPendingPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
}
/** @oneof */
export interface PaymentPendingPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
}
export interface RegularPayment extends RegularPaymentPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardDetails;
    /** Payment amount */
    amount?: Price;
}
/** @oneof */
export interface RegularPaymentPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardDetails;
}
export interface CreditCardDetails {
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
export interface PaymentCanceled extends PaymentCanceledPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
}
/** @oneof */
export interface PaymentCanceledPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
}
export interface PaymentDeclined extends PaymentDeclinedPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
}
/** @oneof */
export interface PaymentDeclinedPaymentDetailsOneOf {
    /** Regular payment. */
    regular?: RegularPayment;
}
export interface ReceiptCreated extends ReceiptCreatedReceiptInfoOneOf {
    /** Receipt created by Wix */
    wixReceipt?: WixReceipt;
    /** Receipt created by an external system. */
    externalReceipt?: ExternalReceipt;
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
}
/** @oneof */
export interface ReceiptCreatedReceiptInfoOneOf {
    /** Receipt created by Wix */
    wixReceipt?: WixReceipt;
    /** Receipt created by an external system. */
    externalReceipt?: ExternalReceipt;
}
export interface WixReceipt {
    /** Receipt ID */
    receiptId?: string;
    /** Display number of receipt */
    displayNumber?: string | null;
}
export interface ExternalReceipt {
    /** Receipt ID */
    receiptId?: string | null;
    /** Display number of receipt */
    displayNumber?: string | null;
}
export interface ReceiptSent extends ReceiptSentReceiptInfoOneOf {
    /** Receipt created by Wix */
    wixReceipt?: WixReceipt;
    /** Receipt created by an external system. */
    externalReceipt?: ExternalReceipt;
    /** Payment ID of payment associated with this activity */
    paymentId?: string;
}
/** @oneof */
export interface ReceiptSentReceiptInfoOneOf {
    /** Receipt created by Wix */
    wixReceipt?: WixReceipt;
    /** Receipt created by an external system. */
    externalReceipt?: ExternalReceipt;
}
export declare enum ActivityType {
    ORDER_REFUNDED = "ORDER_REFUNDED",
    ORDER_PLACED = "ORDER_PLACED",
    ORDER_PAID = "ORDER_PAID",
    ORDER_FULFILLED = "ORDER_FULFILLED",
    ORDER_NOT_FULFILLED = "ORDER_NOT_FULFILLED",
    ORDER_CANCELED = "ORDER_CANCELED",
    DOWNLOAD_LINK_SENT = "DOWNLOAD_LINK_SENT",
    TRACKING_NUMBER_ADDED = "TRACKING_NUMBER_ADDED",
    TRACKING_NUMBER_EDITED = "TRACKING_NUMBER_EDITED",
    TRACKING_LINK_ADDED = "TRACKING_LINK_ADDED",
    SHIPPING_CONFIRMATION_EMAIL_SENT = "SHIPPING_CONFIRMATION_EMAIL_SENT",
    INVOICE_ADDED = "INVOICE_ADDED",
    INVOICE_REMOVED = "INVOICE_REMOVED",
    INVOICE_SENT = "INVOICE_SENT",
    FULFILLER_EMAIL_SENT = "FULFILLER_EMAIL_SENT",
    SHIPPING_ADDRESS_EDITED = "SHIPPING_ADDRESS_EDITED",
    EMAIL_EDITED = "EMAIL_EDITED",
    PICKUP_READY_EMAIL_SENT = "PICKUP_READY_EMAIL_SENT",
    CUSTOM_ACTIVITY = "CUSTOM_ACTIVITY",
    MERCHANT_COMMENT = "MERCHANT_COMMENT",
    ORDER_CREATED_FROM_EXCHANGE = "ORDER_CREATED_FROM_EXCHANGE",
    NEW_EXCHANGE_ORDER_CREATED = "NEW_EXCHANGE_ORDER_CREATED",
    ORDER_PARTIALLY_PAID = "ORDER_PARTIALLY_PAID",
    DRAFT_ORDER_CHANGES_APPLIED = "DRAFT_ORDER_CHANGES_APPLIED",
    SAVED_PAYMENT_METHOD = "SAVED_PAYMENT_METHOD",
    /** @documentationMaturity preview */
    PAYMENT_PENDING = "PAYMENT_PENDING",
    /** @documentationMaturity preview */
    PAYMENT_CANCELED = "PAYMENT_CANCELED",
    /** @documentationMaturity preview */
    PAYMENT_DECLINED = "PAYMENT_DECLINED",
    /** @documentationMaturity preview */
    ORDER_PENDING = "ORDER_PENDING",
    /** @documentationMaturity preview */
    ORDER_REJECTED = "ORDER_REJECTED"
}
export declare enum AttributionSource {
    UNSPECIFIED = "UNSPECIFIED",
    FACEBOOK_ADS = "FACEBOOK_ADS"
}
export interface CreatedBy extends CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
/** @oneof */
export interface CreatedByStringOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application. */
    appId?: string;
}
export interface ChannelInfo {
    /** Sales channel that submitted the order. */
    type?: ChannelType;
    /** Reference to an order ID from an external system. */
    externalOrderId?: string | null;
    /** URL to the order in the external system. */
    externalOrderUrl?: string | null;
}
export declare enum ChannelType {
    /** Unspecified sales channel. This value is not supported. */
    UNSPECIFIED = "UNSPECIFIED",
    /** A web client. */
    WEB = "WEB",
    /** [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395). */
    POS = "POS",
    /** [eBay shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop). */
    EBAY = "EBAY",
    /** [Amazon shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop). */
    AMAZON = "AMAZON",
    /** Other sales platform. */
    OTHER_PLATFORM = "OTHER_PLATFORM",
    /** [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview). */
    WIX_APP_STORE = "WIX_APP_STORE",
    /** Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings) */
    WIX_INVOICES = "WIX_INVOICES",
    /** Wix merchant backoffice. */
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    /** Wish sales channel. */
    WISH = "WISH",
    /** [ClassPass sales channel](https://support.wix.com/en/article/wix-bookings-letting-clients-book-your-services-with-classpass). */
    CLASS_PASS = "CLASS_PASS",
    /** Global-E sales channel. */
    GLOBAL_E = "GLOBAL_E",
    /** [Facebook shop](https://support.wix.com/en/article/wix-stores-changes-to-facebook-shops). */
    FACEBOOK = "FACEBOOK",
    /** [Etsy sales channel](https://support.wix.com/en/article/wix-stores-request-adding-etsy-as-a-sales-channel). */
    ETSY = "ETSY",
    /** [TikTok sales channel](https://support.wix.com/en/article/wix-stores-request-adding-tiktok-as-a-sales-channel). */
    TIKTOK = "TIKTOK",
    /** [Faire marketplace integration](https://support.wix.com/en/article/wix-stores-creating-a-faire-store-using-the-faire-integration-app). */
    FAIRE_COM = "FAIRE_COM"
}
export interface CustomField {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
export interface BalanceSummary {
    /**
     * Current amount left to pay.
     * @readonly
     */
    balance?: Balance;
    /**
     * Sum of all approved and successful payments.
     *
     * The value includes payments that have subsequently been fully or partially refunded.
     * @readonly
     */
    paid?: Price;
    /**
     * Sum of all successfully refunded payments.
     * @readonly
     */
    refunded?: Price;
    /**
     * Sum of all authorized payments.
     * @readonly
     */
    authorized?: Price;
    /**
     * Sum of all pending transactions.
     * @readonly
     */
    pending?: Price;
}
/**
 * Order balance. Reflects amount left to be paid on order and is calculated dynamically. Can be negative per balance definition.
 * `amount` field depends on order payment status:
 * + UNSPECIFIED, NOT_PAID: price_summary.total_price
 * + PARTIALLY_PAID : price_summary.total_price - pay_now.total_price
 * + PENDING, REFUNDED, PARTIALLY_REFUNDED, PAID : 0
 */
export interface Balance {
    /**
     * Balance amount.
     *
     * A negative `amount` represents the amount to be refunded. This can happen due to overcharging or the order being modified after a payment has been made.
     * @readonly
     */
    amount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
}
export interface AdditionalFee {
    /** Additional fee's unique code for future processing. */
    code?: string | null;
    /** Name of additional fee. */
    name?: string;
    /** Additional fee's price. */
    price?: Price;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** SPI implementer's `appId`. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: Price;
    /** Additional fee's price after tax. */
    priceAfterTax?: Price;
    /** Additional fee's id. */
    id?: string;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
}
export interface FulfillmentStatusesAggregate {
    /** Unique string values based on Fulfillment entities statuses */
    statuses?: string[] | null;
}
/**
 * Common object for tags.
 * Should be use as in this example:
 * message Foo {
 * string id = 1;
 * ...
 * Tags tags = 5
 * }
 *
 * example of taggable entity
 * {
 * id: "123"
 * tags: {
 * tags: {
 * tag_ids:["11","22"]
 * },
 * private_tags: {
 * tag_ids: ["33", "44"]
 * }
 * }
 * }
 */
export interface Tags {
    /** Tags that require an additional permission in order to access them, normally not given to site members or visitors. */
    privateTags?: TagList;
    /** Tags that are exposed to anyone who has access to the labeled entity itself, including site members and visitors. */
    tags?: TagList;
}
export interface TagList {
    /** List of tag IDs */
    tagIds?: string[];
}
export interface Location {
    /**
     * Location ID.
     * Learn more about the [Wix Locations API](https://dev.wix.com/docs/rest/business-management/locations/introduction).
     */
    id?: string;
    /**
     * Location name.
     * @readonly
     */
    name?: string;
}
export interface TriggerReindexOrderRequest {
    metasiteId?: string;
    orderId?: string;
}
export interface SnapshotMessage {
    id?: string;
    opType?: number;
}
/** Triggered when the payment status of an order is updated */
export interface PaymentStatusUpdated {
    /** The order that was updated */
    order?: Order;
    /** The previous status (before the update) */
    previousPaymentStatus?: PaymentStatus;
}
/** Triggered when the the order status changes to approved */
export interface OrderApproved {
    /** The order that was updated */
    order?: Order;
}
export interface OrdersExperiments {
    epCommitTax?: boolean;
    moveMerchantEmailToEp?: boolean;
    moveBuyerOrderConfirmationEmailToEp?: boolean;
    producedByEpBridge?: boolean;
    enableRewrittenSideEffects?: boolean;
}
export interface OrderRejectedEventOrderRejected {
    /** The order that was rejected */
    order?: Order;
}
/** Triggered when order items are marked as restocked */
export interface OrderItemsRestocked {
    /** The order which items were restocked */
    order?: Order;
    /** Restocked items and quantities */
    restockItems?: V1RestockItem[];
}
export interface V1RestockItem {
    /** ID of the line item being restocked. */
    lineItemId?: string;
    /** Line item quantity being restocked. */
    quantity?: number;
}
export interface GetMetasiteDataRequest {
    /** meta site Id for data to retrieve */
    metasiteId?: string;
}
export interface GetMetasiteDataResponse {
    /** meta site data */
    metasite?: MetaSite;
    /** is metasite added to new SDL population via population manager */
    isInNewPopulation?: boolean;
    /** metasite url */
    metasiteUrl?: string;
    /** owner data */
    userDataResponse?: UserDataResponse;
}
/**
 * Represents Meta Site.
 *
 * Meta Site is a legacy concept, it aggregates data from several domains. Generally, it contains and manages
 * relations between different entities related to the site (or, as a new concept, to the container).
 *
 * We prefer to pronounce it as 2 separate words, therefore we use terms "meta site" or "metaSite" or "meta_site" in code.
 */
export interface MetaSite {
    /**
     * Identifier of meta site.
     * @readonly
     */
    metaSiteId?: string;
    /**
     * Internal version of meta site. Monotonically increasing number.
     *
     * If passed within update request, it will be used for optimistic locking. In this case,
     * StaleStateException will be thrown if current version doesn't match.
     *
     * In old MetaSiteDTO -- revision.
     * @readonly
     */
    version?: string;
    /**
     * Identifier of account that owns this meta site.
     * @readonly
     */
    ownerId?: string;
    /**
     * Date and time when meta site was created.
     * @readonly
     */
    dateCreated?: Date | null;
    /**
     * Date and time when meta site was updated for the last time.
     * @readonly
     */
    dateUpdated?: Date | null;
    /**
     * All "applications" of this meta site.
     *
     * In old MetaSiteDTO -- embeddedServices.
     */
    apps?: App[];
    /** Namespace of meta site. */
    namespace?: Namespace;
    /**
     * Indicates whether https should be used for viewing a site.
     *
     * In old MetaSiteDTO -- flags.UseHttps.
     */
    useHttps?: boolean;
    defaultSeoData?: SeoData;
    /**
     * Information about HTML application.
     *
     * In old MetaSiteDTO -- appplications.find(_.applicationType == HtmlWeb).
     */
    htmlApp?: HtmlApplication;
    /** @deprecated */
    externalUriMappings?: ExternalUriMapping[];
    /** Indicates whether meta site was published. If true - site should be accessible for viewing. */
    published?: boolean;
    /**
     * The name of meta site.
     *
     * Matches this regular expression: [a-z0-9_\-]{4,20} (but for some legacy sites might be shorted/longer).
     */
    name?: string;
    /**
     * Indicates whether this site is managed by ADI editor
     *
     * Values:
     * None - not managed.
     * Some(false) - site was created via ADI editor, but later on user switched to regular editor.
     * Some(true) - site was created and still is managed by ADI editor.
     *
     * In old MetaSiteDTO: embeddedService[embeddedServiceType=Onboarding].attributes.isInUse.
     */
    adi?: boolean | null;
    /**
     * Indicates whether this meta site is template.
     *
     * In old MetaSiteDTO: documentType == Template.
     * @readonly
     */
    template?: boolean | null;
    /**
     * Identifier of a template (meta site) from which this site was created.
     *
     * If it's empty it either means that site wasn't created from a template OR it's very old, so we didn't store
     * it back then.
     *
     * For example, if "site" was created from "template", then "template"'s id will be in origin_template_id.
     * When "site" is cloned, clone will also have "template"'s id in origin_instance_id.
     * @readonly
     */
    originTemplateId?: string | null;
    /**
     * Indicates meta site blocked from publishing and added additional filtering in listing API (MSS). READ_ONLY.
     * @readonly
     */
    blocked?: boolean;
    /**
     * If true - default meta site routing (connected domains, free url, ML) is not used for this meta site.
     *
     * Meaning, that if `example.org` is connected to this meta site, `router-server` will return 404 for `example.org`
     * anyway.
     *
     * This flag is set for some sites that have custom mapping in Routes API / wix-pages-bo.
     */
    dontUseDefaultRouting?: boolean;
    /**
     * Indicates the site is used as critical asset and as such is protected. You would be only able to provision applications to this meta site. READ_ONLY.
     * @readonly
     */
    criticalAsset?: boolean;
    /**
     * Date and time when the account that owns this meta site was created.
     * @readonly
     */
    accountCreatedDate?: Date | null;
}
export interface App {
    /**
     * Identifier of application type (application definition id).
     *
     * Can be both UUID and non-UUID, for example: SiteMembers, Onboarding, CloudSiteExtension etc.
     */
    appDefId?: string;
    /**
     * Identifier of the instance (concrete application, installed on a site).
     *
     * Mostly UUID, but for some specific legacy cases might be something else.
     */
    instanceId?: string;
    /**
     * State of this app (see docs for state).
     * @readonly
     */
    state?: State;
    /**
     * Identifier of the originating application. For example, if this app was part of a template,
     * then an app will get instance_id of that app as origin instance id.
     *
     * If application was provisioned not from some template, it should be empty.
     *
     * Note, it could be == to instance_id (for old sites).
     */
    originInstanceId?: string;
}
/**
 * Represents the actual state of the application on site. Do not confuse with the State in the old MetaSiteDTO,
 * which has less values and doesn't have 1-to-1 correspondence with this one (this one is exact and correct!)
 */
export declare enum State {
    UNKNOWN = "UNKNOWN",
    /** App is installed on a site. */
    ENABLED = "ENABLED",
    /** App is removed from a site (but we preserve it just in case). */
    DISABLED = "DISABLED",
    /** App is in "demo" mode, meaning that it's in read-only mode (it's in a template OR not installed yet). */
    TEMPLATE = "TEMPLATE",
    /** App is not installed, there is a user intention for it only (user will see the pimpl in the editor). */
    PENDING = "PENDING"
}
export declare enum Namespace {
    UNKNOWN_NAMESPACE = "UNKNOWN_NAMESPACE",
    /** Default namespace for UGC sites. MetaSites with this namespace will be shown in a user's site list by default. */
    WIX = "WIX",
    /** ShoutOut stand alone product. These are siteless (no actual Wix site, no HtmlWeb). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    SHOUT_OUT = "SHOUT_OUT",
    /** MetaSites created by the Albums product, they appear as part of the Albums app. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    ALBUMS = "ALBUMS",
    /** Part of the WixStores migration flow, a user tries to migrate and gets this site to view and if the user likes it then stores removes this namespace and deletes the old site with the old stores. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    WIX_STORES_TEST_DRIVE = "WIX_STORES_TEST_DRIVE",
    /** Hotels standalone (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    HOTELS = "HOTELS",
    /** Clubs siteless MetaSites, a club without a wix website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    CLUBS = "CLUBS",
    /** A partially created ADI website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    ONBOARDING_DRAFT = "ONBOARDING_DRAFT",
    /** AppBuilder for AppStudio / shmite (c). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    DEV_SITE = "DEV_SITE",
    /** LogoMaker websites offered to the user after logo purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    LOGOS = "LOGOS",
    /** VideoMaker websites offered to the user after video purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    VIDEO_MAKER = "VIDEO_MAKER",
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    PARTNER_DASHBOARD = "PARTNER_DASHBOARD",
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    DEV_CENTER_COMPANY = "DEV_CENTER_COMPANY",
    /**
     * A draft created by HTML editor on open. Upon "first save" it will be moved to be of WIX domain.
     *
     * Meta site with this namespace will *not* be shown in a user's site list by default.
     */
    HTML_DRAFT = "HTML_DRAFT",
    /**
     * the user-journey for Fitness users who want to start from managing their business instead of designing their website.
     * Will be accessible from Site List and will not have a website app.
     * Once the user attaches a site, the site will become a regular wixsite.
     */
    SITELESS_BUSINESS = "SITELESS_BUSINESS",
    /** Belongs to "strategic products" company. Supports new product in the creator's economy space. */
    CREATOR_ECONOMY = "CREATOR_ECONOMY",
    /** It is to be used in the Business First efforts. */
    DASHBOARD_FIRST = "DASHBOARD_FIRST",
    /** Bookings business flow with no site. */
    ANYWHERE = "ANYWHERE",
    /** Namespace for Headless Backoffice with no editor */
    HEADLESS = "HEADLESS",
    /**
     * Namespace for master site that will exist in parent account that will be referenced by subaccounts
     * The site will be used for account level CSM feature for enterprise
     */
    ACCOUNT_MASTER_CMS = "ACCOUNT_MASTER_CMS",
    /** Rise.ai Siteless account management for Gift Cards and Store Credit. */
    RISE = "RISE",
    /**
     * As part of the branded app new funnel, users now can create a meta site that will be branded app first.
     * There's a blank site behind the scene but it's blank).
     * The Mobile company will be the owner of this namespace.
     */
    BRANDED_FIRST = "BRANDED_FIRST",
    /** Nownia.com Siteless account management for Ai Scheduling Assistant. */
    NOWNIA = "NOWNIA",
    /**
     * UGC Templates are templates that are created by users for personal use and to sale to other users.
     * The Partners company owns this namespace.
     */
    UGC_TEMPLATE = "UGC_TEMPLATE",
    /** Codux Headless Sites */
    CODUX = "CODUX",
    /** Bobb - AI Design Creator. */
    MEDIA_DESIGN_CREATOR = "MEDIA_DESIGN_CREATOR",
    /**
     * Shared Blog Site is a unique single site across Enterprise account,
     * This site will hold all Blog posts related to the Marketing product.
     */
    SHARED_BLOG_ENTERPRISE = "SHARED_BLOG_ENTERPRISE"
}
export interface SeoData {
    /** A title. */
    title?: string | null;
    /** Indicates whether the site should be indexable by bots. */
    indexable?: boolean;
    /** TDB. */
    suppressTrackingCookies?: boolean;
    /** TDB. */
    ogImage?: string | null;
    /** A list of meta tags. */
    metaTags?: MetaTag[];
    /** A canonical URL for a site. */
    canonicalUrl?: string | null;
}
export interface MetaTag {
    /** A name. */
    name?: string;
    /** A value. */
    value?: string;
    /** Indicates whether should be rendered as property. */
    property?: boolean;
}
/** Represents an HTML application (HTML site). */
export interface HtmlApplication {
    /** Legacy, don't use it if you can. */
    intId?: number;
    /** Identifier of the instance. */
    instanceId?: string;
    seoData?: SeoData;
    /** Language of this site. */
    languageCode?: string;
    /** File name for thumbnail. */
    thumbnail?: string | null;
    /** Indicates whether this site is managed by EditorX. */
    editorX?: boolean;
    /** Indicates whether this site is managed by Wix Studio. */
    studio?: boolean;
}
export interface ExternalUriMapping {
    /** Deprecated. */
    fromExternalUri?: string;
    /** Deprecated. */
    toWixUri?: string;
    /** Deprecated. */
    oldToWixUri?: string | null;
    /** Deprecated. */
    requireDomain?: boolean | null;
}
export interface UserDataResponse {
    userEmail?: string;
    /** owner name */
    userName?: string;
    /** owner status */
    userStatus?: string;
    /** owner language */
    userLanguage?: string;
}
export interface QueryOrdersForMetasiteRequest {
    /** meta site Id for EP orders to retrieve */
    metasiteId?: string;
    /** paginated internal orders query request */
    internalQueryOrdersRequest?: InternalQueryOrdersRequest;
}
export interface InternalQueryOrdersRequest {
    /** Query options. */
    query?: PlatformQuery;
}
export interface PlatformQuery extends PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /** Filter object. */
    filter?: Record<string, any> | null;
    /** Sorting options. For example, `[{"fieldName":"sortField1"},{"fieldName":"sortField2","direction":"DESC"}]`. */
    sort?: Sorting[];
}
/** @oneof */
export interface PlatformQueryPagingMethodOneOf {
    /** Pointer to page of results using offset. Cannot be used together with `cursorPaging`. */
    paging?: PlatformPaging;
    /** Cursor pointing to page of results. Cannot be used together with `paging`. `cursorPaging.cursor` can not be used together with `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    ASC = "ASC",
    DESC = "DESC"
}
export interface PlatformPaging {
    /** Number of items to load. */
    limit?: number | null;
    /** Number of items to skip in the current sort order. */
    offset?: number | null;
}
export interface CursorPaging {
    /** Maximum number of items to return in the results. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results.
     *
     * Pass the relevant cursor token from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface QueryOrdersForMetasiteResponse {
    /** found exisitng orders according to pagination and query provided. */
    orders?: Order[];
    /** Details on the paged set of results returned. */
    pagingMetadata?: PlatformPagingMetadata;
}
export interface PlatformPagingMetadata {
    /** The number of items returned in this response. */
    count?: number | null;
    /** The offset which was requested. Returned if offset paging was used. */
    offset?: number | null;
    /** The total number of items that match the query. Returned if offset paging was used. */
    total?: number | null;
    /** Cursors to navigate through result pages. Returned if cursor paging was used. */
    cursors?: Cursors;
}
export interface Cursors {
    /** Cursor string pointing to the next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to the previous page in the list of results. */
    prev?: string | null;
}
export interface GetOrderForMetasiteRequest {
    /** meta site Id for EP order to retrieve */
    metasiteId?: string;
    /** Order Id for EP order to retrieve */
    orderId?: string;
}
export interface GetOrderForMetasiteResponse {
    /** Existing EP order */
    order?: Order;
}
export interface ListOrderTransactionsForMetasiteRequest {
    /** meta site Id for EP order transactions to retrieve */
    metasiteId?: string;
    /** Order Id for EP order transactions to retrieve */
    orderId?: string;
}
export interface ListOrderTransactionsForMetasiteResponse {
    /** Order ID and its associated transactions. */
    orderTransactions?: OrderTransactions;
}
export interface OrderTransactions {
    /** Order ID. */
    orderId?: string;
    /** Record of payments made to the merchant. */
    payments?: Payment[];
    /** Record of refunds made to the buyer. */
    refunds?: Refund[];
}
export interface Payment extends PaymentPaymentDetailsOneOf, PaymentReceiptInfoOneOf {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails;
    /**
     * Payment ID.
     * @readonly
     */
    id?: string | null;
    /** Date and time the payment was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided. */
    createdDate?: Date | null;
    /**
     * Date and time the payment was last updated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * @readonly
     */
    updatedDate?: Date | null;
    /** Payment amount. */
    amount?: Price;
    /**
     * Whether refunds for this payment are disabled.
     * + `true`: This payment is not refundable.
     * + `false`: This payment may be refunded. However, this ultimately depends on the payment provider.
     */
    refundDisabled?: boolean;
}
/** @oneof */
export interface PaymentPaymentDetailsOneOf {
    /** Regular payment details. */
    regularPaymentDetails?: RegularPaymentDetails;
    /** Gift card payment details. */
    giftcardPaymentDetails?: GiftCardPaymentDetails;
}
/** @oneof */
export interface PaymentReceiptInfoOneOf {
}
export interface RegularPaymentDetails extends RegularPaymentDetailsPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails;
    /** Wix Payments order ID. */
    paymentOrderId?: string | null;
    /**
     * Payment gateway's transaction ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `offline_payment` is `false`.
     */
    gatewayTransactionId?: string | null;
    /**
     * Payment method. Non-exhaustive list of supported values:
     * + `CreditCard`, `Alipay`, `AstropayCash`, `AstropayDBT`, `AstropayMBT`, `Bitcoin`, `BitPay`, `Cash`, `ConvenienceStore`, `EPay`, `Fake`, `Giropay`, `IDeal`, `InPerson`, `Klarna`, `MercadoPago`, `Netpay`, `NordeaSolo`, `Offline`, `PagSeguro`, `PayEasy`, `PayPal`, `Paysafecard`, `Paysafecash`, `PointOfSale`, `Poli`, `Privat24`, `Przelewy24`, `RapidTransfer`, `Sepa`, `Skrill`, `Sofort`, `Trustly`, `Neteller`, `Unionpay`, `UniPay`, `Yandex`
     */
    paymentMethod?: string | null;
    /** Transaction ID in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for offline payments. */
    providerTransactionId?: string | null;
    /** Whether the payment was made offline. For example, when using cash or when marked as paid in the Business Manager. */
    offlinePayment?: boolean;
    /** Payment status. */
    status?: TransactionStatus;
    /** Whether there is a payment agreement that allows for future charges. */
    savedPaymentMethod?: boolean;
    /** Authorization details. */
    authorizationDetails?: AuthorizationDetails;
}
/** @oneof */
export interface RegularPaymentDetailsPaymentMethodDetailsOneOf {
    /** Whether regular card used */
    creditCardDetails?: CreditCardPaymentMethodDetails;
}
export declare enum TransactionStatus {
    UNDEFINED = "UNDEFINED",
    APPROVED = "APPROVED",
    PENDING = "PENDING",
    PENDING_MERCHANT = "PENDING_MERCHANT",
    CANCELED = "CANCELED",
    DECLINED = "DECLINED",
    REFUNDED = "REFUNDED",
    PARTIALLY_REFUNDED = "PARTIALLY_REFUNDED",
    AUTHORIZED = "AUTHORIZED",
    VOIDED = "VOIDED"
}
export interface CreditCardPaymentMethodDetails {
    /** The last 4 digits of the card number. */
    lastFourDigits?: string | null;
    /** Card issuer's brand. */
    brand?: string | null;
}
export interface AuthorizationDetails {
    /**
     * Whether the authorized payment is of a delayed capture.
     * @readonly
     */
    delayedCapture?: boolean;
    /** Date and time the payment was authorized in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    authorizedDate?: Date | null;
    /**
     * List of captures associated with payment
     * In case of failed it can be replaced with new one with PENDING or SUCCESS statuses
     */
    captures?: AuthorizationCapture[];
    /** Void associated with payment */
    void?: AuthorizationVoid;
    /** Scheduled action for this transaction */
    scheduledAction?: V1ScheduledAction;
}
export interface AuthorizationCapture {
    /**
     * Capture ID.
     * @readonly
     */
    id?: string | null;
    /** Status of this capture action */
    status?: AuthorizationCaptureStatus;
    /** Amount of this capture */
    amount?: Price;
    /** Date and time the capture was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    createdDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails;
}
export declare enum AuthorizationCaptureStatus {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Capture operation still in progress. */
    PENDING = "PENDING",
    /** Capture operation succeeded. */
    SUCCEEDED = "SUCCEEDED",
    /** Capture operation failed. */
    FAILED = "FAILED"
}
export interface AuthorizationActionFailureDetails {
    failureCode?: string;
}
export interface AuthorizationVoid {
    /** Status of this void action */
    status?: AuthorizationVoidStatus;
    /** Date and time the void was initiated in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. */
    voidedDate?: Date | null;
    /** In case of status is FAILED may contain failure details */
    failureDetails?: AuthorizationActionFailureDetails;
    /** Reason of void action */
    reason?: Reason;
}
export declare enum AuthorizationVoidStatus {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    /** Void operation still in progress. */
    PENDING = "PENDING",
    /** Void operation succeeded. */
    SUCCEEDED = "SUCCEEDED",
    /** Void operation failed. */
    FAILED = "FAILED"
}
/** Reason the authorization was voided. */
export declare enum Reason {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    /** Authorization was voided by user. */
    MANUAL = "MANUAL",
    /** Authorization passed execution date. */
    SCHEDULED = "SCHEDULED"
}
export interface V1ScheduledAction {
    /** Type of the action. */
    actionType?: ActionType;
    /** The date and time of the action. */
    executionDate?: Date | null;
}
export declare enum ActionType {
    UNKNOWN_ACTION_TYPE = "UNKNOWN_ACTION_TYPE",
    VOID = "VOID",
    CAPTURE = "CAPTURE"
}
export interface GiftCardPaymentDetails {
    /** Gift card payment ID. */
    giftCardPaymentId?: string;
    /** ID of the app that created the gift card. */
    appId?: string;
    /**
     * Whether the gift card is voided.
     * @readonly
     */
    voided?: boolean;
}
export interface MembershipPaymentDetails {
    /** Membership ID. */
    membershipId?: string;
    /** ID of the line item this membership applies to. */
    lineItemId?: string;
    /** Payment status. */
    status?: MembershipPaymentStatus;
    /** Membership name. */
    name?: MembershipName;
    /** The transaction ID in the membership system. Can be used to void the transaction. */
    externalTransactionId?: string | null;
    /**
     * Whether the membership is voided.
     * @readonly
     */
    voided?: boolean;
    /** ID of the application providing this payment option. */
    providerAppId?: string;
}
export declare enum MembershipPaymentStatus {
    /** Payment was charged. */
    CHARGED = "CHARGED",
    /** The attempt to charge the payment failed, for example, due to lack of credits. */
    CHARGE_FAILED = "CHARGE_FAILED"
}
export interface MembershipName {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
export interface WixReceiptInfo {
    /** Receipt ID */
    receiptId?: string;
    /** Display number of receipt */
    displayNumber?: string | null;
}
export interface ExternalReceiptInfo {
    /** External receipt ID */
    receiptId?: string | null;
    /** ID of the app providing the receipt */
    appId?: string | null;
    /** Display number of receipt */
    displayNumber?: string | null;
}
export interface Refund {
    /**
     * Refund ID.
     * @readonly
     */
    id?: string;
    /** List of transactions. */
    transactions?: RefundTransaction[];
    /** Refund business details. */
    details?: RefundDetails;
    /**
     * Date and time the refund was created in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format. Defaults to current time when not provided.
     * @readonly
     */
    createdDate?: Date | null;
}
export interface RefundTransaction {
    /** ID of the payment associated with this refund. */
    paymentId?: string;
    /** Refund amount. */
    amount?: Price;
    /** Refund status. */
    refundStatus?: RefundStatus;
    /** Optional details of current refund status. */
    refundStatusInfo?: RefundStatusInfo;
    /**
     * Payment gateway's refund ID. This ID can be used with the Wix Payments [Transactions API](https://dev.wix.com/docs/rest/api-reference/wix-payments/transactions/introduction).
     * This field is only returned when the value of `external_refund` is `false`.
     */
    gatewayRefundId?: string | null;
    /** ID of the refund in the payment provider's system. For example, at PayPal, Square, Stripe, etc. Not returned for external refunds. */
    providerRefundId?: string | null;
    /** Whether refund was made externally and manually on the payment provider's side. */
    externalRefund?: boolean;
}
/** Refund transaction status. */
export declare enum RefundStatus {
    /** Refund was initiated on payment provider side. PENDING status was assigned by provider. */
    PENDING = "PENDING",
    /** Refund transaction succeeded. */
    SUCCEEDED = "SUCCEEDED",
    /** Refund transaction failed. */
    FAILED = "FAILED",
    /** Refund request acknowledged, and will be executed soon. */
    SCHEDULED = "SCHEDULED",
    /** Refund was initiated on payment provider side. */
    STARTED = "STARTED"
}
export interface RefundStatusInfo {
}
/** Business model of a refund request */
export interface RefundDetails {
    /** Order line item IDs and quantities that were refunded. */
    items?: RefundItem[];
    /** Whether the shipping fee was also refunded. */
    shippingIncluded?: boolean;
    /** Reason for the refund, provided by customer (optional). */
    reason?: string | null;
}
export interface RefundItem {
    /** Line item ID the refunded line item. */
    lineItemId?: string;
    /** Line item quantity refunded. */
    quantity?: number;
}
export interface LineItemRefund {
}
export interface AdditionalFeeRefund {
}
export interface ShippingRefund {
}
export interface AggregatedRefundSummary {
}
export interface UpsertRefundRequest {
    /** Meta site ID. */
    metasiteId?: string;
    /** Order ID associated with refund. */
    orderId?: string;
    /** Refund to upsert. */
    refund?: Refund;
}
export interface UpsertRefundResponse {
    /** Updated order transactions. */
    orderTransactions?: OrderTransactions;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entityAsJson?: string;
    /** Indicates the event was triggered by a restore-from-trashbin operation for a previously deleted entity */
    restoreInfo?: RestoreInfo;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntityAsJson?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntityAsJson?: string | null;
}
export interface ActionEvent {
    bodyAsJson?: string;
}
export interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
export interface UpdateInternalDocumentsEvent extends UpdateInternalDocumentsEventOperationOneOf {
    /** insert/update documents */
    update?: InternalDocumentUpdateOperation;
    /** delete by document ids */
    deleteByIds?: DeleteByIdsOperation;
    /** delete documents matching filter */
    deleteByFilter?: DeleteByFilterOperation;
    /** update internal documents matching filter */
    updateByFilter?: InternalDocumentUpdateByFilterOperation;
    /** update only existing documents */
    updateExisting?: InternalUpdateExistingOperation;
    /** insert/update documents with versioning */
    versionedUpdate?: VersionedDocumentUpdateOperation;
    /** delete by document ids with versioning */
    versionedDeleteByIds?: VersionedDeleteByIdsOperation;
    /** type of the documents */
    documentType?: string;
    /** language of the documents (mandatory) */
    language?: string | null;
    /**
     * one or more search documents
     * @deprecated
     */
    addDocuments?: InternalDocument[];
    /**
     * one or more ids of indexed documents to be removed. Removal will happen before addition (if both provided)
     * @deprecated
     */
    removeDocumentIds?: string[];
    /** id to pass to processing notification */
    correlationId?: string | null;
    /** when event was created / issued */
    issuedAt?: Date | null;
}
/** @oneof */
export interface UpdateInternalDocumentsEventOperationOneOf {
    /** insert/update documents */
    update?: InternalDocumentUpdateOperation;
    /** delete by document ids */
    deleteByIds?: DeleteByIdsOperation;
    /** delete documents matching filter */
    deleteByFilter?: DeleteByFilterOperation;
    /** update internal documents matching filter */
    updateByFilter?: InternalDocumentUpdateByFilterOperation;
    /** update only existing documents */
    updateExisting?: InternalUpdateExistingOperation;
    /** insert/update documents with versioning */
    versionedUpdate?: VersionedDocumentUpdateOperation;
    /** delete by document ids with versioning */
    versionedDeleteByIds?: VersionedDeleteByIdsOperation;
}
export interface InternalDocument {
    /** document with mandatory fields (id) and with fields specific to the type of the document */
    document?: Record<string, any> | null;
}
export interface InternalDocumentUpdateOperation {
    /** documents to index or update */
    documents?: InternalDocument[];
}
export interface DeleteByIdsOperation {
    /** ids of the documents to delete */
    documentIds?: string[];
}
export interface DeleteByFilterOperation {
    /** documents matching this filter wil be deleted. only filterable documents defined in document_type can be used for filtering */
    filter?: Record<string, any> | null;
}
export interface InternalDocumentUpdateByFilterOperation {
    /** documents matching this filter will be updated */
    filter?: Record<string, any> | null;
    /** partial document to apply */
    document?: InternalDocument;
}
export interface InternalUpdateExistingOperation {
    /** documents to update */
    documents?: InternalDocument[];
}
export interface VersionedDocumentUpdateOperation {
    /** documents to create or overwrite */
    documents?: InternalDocument[];
    /** versioning mode to use instead of default */
    versioningMode?: VersioningMode;
}
export declare enum VersioningMode {
    /** use default versioning mode agreed with search team */
    DEFAULT = "DEFAULT",
    /** execute only if version is greater than existing */
    GREATER_THAN = "GREATER_THAN",
    /** execute only if version is greater or equal to existing */
    GREATER_OR_EQUAL = "GREATER_OR_EQUAL"
}
export interface VersionedDeleteByIdsOperation {
    /** ids with version of the documents to delete */
    documentIds?: VersionedDocumentId[];
}
export interface VersionedDocumentId {
    /** document id */
    documentId?: string;
    /** document version */
    version?: string;
    /** versioning mode to use instead of default */
    versioningMode?: VersioningMode;
}
export interface TriggerReindexRequest {
    metasiteId?: string;
    orderIds?: string[];
}
export interface TriggerReindexResponse {
}
export interface Empty {
}
export interface BatchOfTriggerReindexOrderRequest {
    requests?: TriggerReindexOrderRequest[];
}
export interface SendBuyerConfirmationEmailRequest {
    orderId?: string;
}
export interface SendBuyerConfirmationEmailResponse {
}
export interface SendBuyerPaymentsReceivedEmailRequest {
    orderId?: string;
}
export interface SendBuyerPaymentsReceivedEmailResponse {
}
export interface SendBuyerPickupConfirmationEmailRequest {
    orderId?: string;
}
export interface SendBuyerPickupConfirmationEmailResponse {
}
export interface BulkSendBuyerPickupConfirmationEmailsRequest {
    /** IDs of orders to send pickup emails for. */
    orderIds?: string[];
}
export interface BulkSendBuyerPickupConfirmationEmailsResponse {
}
export interface SendBuyerShippingConfirmationEmailRequest {
    orderId?: string;
}
export interface SendBuyerShippingConfirmationEmailResponse {
}
export interface BulkSendBuyerShippingConfirmationEmailsRequest {
    /** IDs of orders to send pickup emails for. */
    orderIds?: string[];
}
export interface BulkSendBuyerShippingConfirmationEmailsResponse {
}
export interface SendMerchantOrderReceivedNotificationRequest {
    orderId?: string;
}
export interface SendMerchantOrderReceivedNotificationResponse {
}
export interface SendCancelRefundEmailRequest {
    /** The ID of order that is canceled/refunded */
    orderId?: string;
    /** Personal note added to the email (optional) */
    customMessage?: string | null;
    /** Refund amount */
    refundAmount?: Price;
    /** Refund ID. (Optional) */
    refundId?: string | null;
}
export interface SendCancelRefundEmailResponse {
}
export interface SendRefundEmailRequest {
    /** The ID of order that is refunded */
    orderId?: string;
    /** Refund ID */
    refundId?: string;
    /** Personal note added to the email (optional) */
    customMessage?: string | null;
}
export interface SendRefundEmailResponse {
}
export interface SendMerchantOrderReceivedPushRequest {
    orderId?: string;
}
export interface SendMerchantOrderReceivedPushResponse {
}
export interface PreviewEmailByTypeRequest {
    emailType?: PreviewEmailType;
}
export declare enum PreviewEmailType {
    ORDER_PLACED = "ORDER_PLACED",
    DOWNLOAD_LINKS = "DOWNLOAD_LINKS",
    ORDER_SHIPPED = "ORDER_SHIPPED",
    ORDER_READY_FOR_PICKUP = "ORDER_READY_FOR_PICKUP"
}
export interface PreviewEmailByTypeResponse {
    emailPreview?: string;
}
export interface PreviewRefundEmailRequest {
    orderId?: string;
    /** Refund amount */
    refundAmount?: Price;
    /** Refund business details */
    details?: RefundDetails;
    /** Personal note added to the email (optional) */
    customMessage?: string | null;
    /** Refund ID. (Optional) */
    refundId?: string | null;
}
export interface PreviewRefundEmailResponse {
    emailPreview?: string;
}
export interface PreviewCancelEmailRequest {
    orderId?: string;
    /** Personal note added to the email (optional) */
    customMessage?: string | null;
}
export interface PreviewCancelEmailResponse {
    emailPreview?: string;
}
export interface PreviewCancelRefundEmailRequest {
    orderId?: string;
    /** Personal note added to the email (optional) */
    customMessage?: string | null;
    /** Refund amount */
    refundAmount?: Price;
    /** Refund ID. (Optional) */
    refundId?: string | null;
}
export interface PreviewCancelRefundEmailResponse {
    emailPreview?: string;
}
export interface PreviewBuyerPaymentsReceivedEmailRequest {
}
export interface PreviewBuyerPaymentsReceivedEmailResponse {
    emailPreview?: string;
}
export interface PreviewBuyerConfirmationEmailRequest {
}
export interface PreviewBuyerConfirmationEmailResponse {
    emailPreview?: string;
}
export interface PreviewBuyerPickupConfirmationEmailRequest {
}
export interface PreviewBuyerPickupConfirmationEmailResponse {
    emailPreview?: string;
}
export interface PreviewShippingConfirmationEmailRequest {
}
export interface PreviewShippingConfirmationEmailResponse {
    emailPreview?: string;
}
export interface PreviewResendDownloadLinksEmailRequest {
}
export interface PreviewResendDownloadLinksEmailResponse {
    emailPreview?: string;
}
export interface PreparePaymentCollectionRequest {
    /** Ecom order ID. */
    ecomOrderId: string;
    /** Amount to collect */
    amount: Price;
    /**
     * Optional parameter. When present, payment collection will be performed using given payment gateway order.
     * Existing payment gateway order will be updated with a new amount.
     * When parameter is absent, new payment gateway order will be created and used for payment collection.
     */
    paymentGatewayOrderId?: string | null;
    /**
     * Whether to delay capture of the payment.
     * Default: false
     * @deprecated Whether to delay capture of the payment.
     * Default: false
     * @replacedBy delayed_capture_settings.scheduled_action
     * @targetRemovalDate 2024-09-30
     */
    delayedCapture?: boolean;
    /** Delayed capture payment settings */
    delayedCaptureSettings?: DelayedCaptureSettings;
}
export interface RedirectUrls {
    /** URL to redirect buyer in case of approved (successful) transaction */
    successUrl?: string | null;
    /** URL to redirect buyer in case of buyer canceled the transaction */
    cancelUrl?: string | null;
    /** URL to redirect buyer in case of failed/rejected transaction */
    errorUrl?: string | null;
    /** URL to redirect buyer in case of pending transaction (that might take some time to process) */
    pendingUrl?: string | null;
}
export interface DelayedCaptureSettings {
    /** Specifies the automatic action (void/capture) for authorized transaction after the specified duration */
    scheduledAction?: ScheduledAction;
    /** Delay duration before execution. Optional - if not set, providers default period will be used */
    delayDuration?: Duration;
}
export declare enum ScheduledAction {
    UNSPECIFIED = "UNSPECIFIED",
    /** Whether payment will be auto-voided when duration passes */
    VOID = "VOID",
    /** Whether payment will be auto-captured when duration passes */
    CAPTURE = "CAPTURE"
}
export interface Duration {
    /** Amount of units. For example, 30 MINUTES, 1 HOURS, 7 DAYS, etc */
    count?: number;
    /** Duration unit: MINUTES, HOURS and DAYS */
    unit?: DurationUnit;
}
export declare enum DurationUnit {
    UNKNOWN_DURATION_UNIT = "UNKNOWN_DURATION_UNIT",
    MINUTES = "MINUTES",
    HOURS = "HOURS",
    DAYS = "DAYS"
}
export interface PreparePaymentCollectionResponse {
    /** Payment gateway order id which is associated with given payment */
    paymentGatewayOrderId?: string;
}
export interface GetPaymentCollectabilityStatusRequest {
    /** Ecom order ID. */
    ecomOrderId: string;
}
export interface GetPaymentCollectabilityStatusResponse {
    /** Payment collectability status */
    status?: PaymentCollectabilityStatus;
    /** Collectable order amount */
    amount?: Price;
}
export declare enum PaymentCollectabilityStatus {
    UNKNOWN = "UNKNOWN",
    COLLECTABLE = "COLLECTABLE",
    NONCOLLECTABLE_ORDER_IS_CANCELLED = "NONCOLLECTABLE_ORDER_IS_CANCELLED",
    NONCOLLECTABLE_ORDER_IS_PAID = "NONCOLLECTABLE_ORDER_IS_PAID",
    NONCOLLECTABLE_MISSING_PAYMENT_METHOD = "NONCOLLECTABLE_MISSING_PAYMENT_METHOD",
    NONCOLLECTABLE_ORDER_IS_PENDING = "NONCOLLECTABLE_ORDER_IS_PENDING",
    NONCOLLECTABLE_ORDER_IS_REJECTED = "NONCOLLECTABLE_ORDER_IS_REJECTED"
}
export interface RecordManuallyCollectedPaymentRequest {
    /** Order ID. */
    orderId?: string;
    /** Amount to be recorded as approved manual payment for given order */
    amount?: Price;
}
export interface RecordManuallyCollectedPaymentResponse {
}
export interface MarkOrderAsPaidRequest {
    /** Ecom order ID. */
    ecomOrderId?: string;
}
export interface MarkOrderAsPaidResponse {
    /** Updated order. */
    order?: Order;
}
export interface BulkMarkOrdersAsPaidRequest {
    /** IDs of orders to mark as paid. */
    ecomOrderIds?: string[];
}
export interface BulkMarkOrdersAsPaidResponse {
    /**
     * Items updated by the bulk action.
     * The Order entity within the results optimistically changes its payment status to paid, however this process is async.
     */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkOrderResult {
    /** Item metadata. */
    itemMetadata?: ItemMetadata;
    /**
     * Updated order.
     *
     * Returned when `returnFullEntity = true`.
     */
    item?: Order;
}
export interface ItemMetadata {
    /** Item ID. Should always be available, unless it's impossible (for example, when failing to create an item). */
    id?: string | null;
    /** Index of the item within the request array. Allows for correlation between request and response items. */
    originalIndex?: number;
    /** Whether the requested action was successful for this item. When `false`, the `error` field is populated. */
    success?: boolean;
    /** Details about the error in case of failure. */
    error?: ApplicationError;
}
export interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
export interface BulkActionMetadata {
    /** Number of items that were successfully processed. */
    totalSuccesses?: number;
    /** Number of items that couldn't be processed. */
    totalFailures?: number;
    /** Number of failures without details because detailed failure threshold was exceeded. */
    undetailedFailures?: number;
}
export interface GetRefundabilityStatusRequest {
    /** Order ID. */
    ecomOrderId?: string;
}
export interface GetRefundabilityStatusResponse {
    /** Refundability details. */
    refundabilities?: Refundability[];
    /**
     * Whether the order supports refunding per item.
     * @deprecated
     */
    refundablePerItem?: boolean;
}
export interface Refundability extends RefundabilityAdditionalRefundabilityInfoOneOf {
    /** Reason why payment is not refundable. */
    nonRefundableReason?: NonRefundableReason;
    /** Reason why payment is only refundable manually. */
    manuallyRefundableReason?: ManuallyRefundableReason;
    /** Payment ID. */
    paymentId?: string;
    /** Payment refundability status. */
    refundabilityStatus?: RefundableStatus;
    /** Link to payment provider dashboard. */
    providerLink?: string | null;
}
/** @oneof */
export interface RefundabilityAdditionalRefundabilityInfoOneOf {
    /** Reason why payment is not refundable. */
    nonRefundableReason?: NonRefundableReason;
    /** Reason why payment is only refundable manually. */
    manuallyRefundableReason?: ManuallyRefundableReason;
}
export declare enum RefundableStatus {
    NOT_REFUNDABLE = "NOT_REFUNDABLE",
    MANUAL = "MANUAL",
    REFUNDABLE = "REFUNDABLE"
}
export declare enum NonRefundableReason {
    NONE = "NONE",
    ALREADY_REFUNDED = "ALREADY_REFUNDED",
    PROVIDER_IS_DOWN = "PROVIDER_IS_DOWN",
    INTERNAL_ERROR = "INTERNAL_ERROR",
    NOT_PAID = "NOT_PAID",
    ACCESS_DENIED = "ACCESS_DENIED",
    ZERO_PRICE = "ZERO_PRICE",
    DISABLED_BY_PROVIDER = "DISABLED_BY_PROVIDER",
    PENDING_REFUND = "PENDING_REFUND",
    FORBIDDEN = "FORBIDDEN",
    TRANSACTION_NOT_FOUND = "TRANSACTION_NOT_FOUND",
    ORDER_IS_PENDING = "ORDER_IS_PENDING",
    ORDER_IS_REJECTED = "ORDER_IS_REJECTED"
}
export declare enum ManuallyRefundableReason {
    EXPIRED = "EXPIRED",
    NOT_SUPPORTED = "NOT_SUPPORTED",
    OFFLINE = "OFFLINE",
    REQUIRES_CARD_READER = "REQUIRES_CARD_READER"
}
export interface CreatePaymentGatewayOrderRequest {
    /** Ecom order ID. */
    ecomOrderId?: string;
    /** Information about the user who initiated the payment. */
    chargedBy?: ChargedBy;
}
export interface ChargedBy {
    /** ID - id of the user who initiated the payment */
    id?: string;
    /** Full name - name of the user who initiated the payment */
    fullName?: string | null;
}
export interface CreatePaymentGatewayOrderResponse {
    /** ID of the order created in the payment gateway */
    paymentGatewayOrderId?: string;
}
export interface ChargeMembershipsRequest {
    /** Order ID. */
    ecomOrderId?: string;
    /**
     * The member id. Do not attempt to get it from the request context, since in some cases the caller is not a member
     * but a user which is using the membership on behalf of the a member
     */
    memberId?: string;
    /** List of items to be paid by memberships */
    membershipCharges?: MembershipChargeItem[];
}
export interface MembershipChargeItem {
    /** The id of used membership */
    membershipId?: string;
    /** ID of the application providing this payment option */
    appId?: string;
    /** The name of used membership */
    membershipName?: MembershipName;
    /** Additional data about this membership */
    membershipAdditionalData?: Record<string, any> | null;
    /** Catalog and item reference info. */
    catalogReference?: CatalogReference;
    /** Properties of the service. When relevant, contains information such as date and number of participants. */
    serviceProperties?: ServiceProperties;
    /**
     * Usually would be the same as catalogReference.catalogItemId
     * For cases when these are not the same, this field would return the actual id of the item in the catalog
     * For example, for Wix bookings, catalogReference.catalogItemId is the booking id, and this value is being set to be the service id
     */
    rootCatalogItemId?: string | null;
    /** line item id of Checkout/Order line item */
    lineItemId?: string;
}
export interface ServiceProperties {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
export interface ChargeMembershipsResponse {
}
export interface TriggerRefundRequest {
    /** The order this refund related to */
    ecomOrderId?: string;
    /** Refund operations information */
    payments?: PaymentRefund[];
    /** Business model of a refund */
    details?: RefundDetails;
    /** Side effect details related to refund */
    sideEffects?: RefundSideEffects;
}
export interface PaymentRefund {
    /** Specific payment within the order to refund */
    paymentId?: string;
    /** Refund amount. Not relevant for membership and gift card refunds. */
    amount?: Price;
    /**
     * Whether refund is made externally and manually (on the payment provider's side)
     * When false (default), the payment gateway will be called in order to make an actual refund, and then the payment will be marked as refunded.
     * When true, the payment will only be *marked* as refunded, and no actual refund will be performed.
     */
    externalRefund?: boolean;
}
export interface RefundSideEffects {
    /** Inventory restock details as part of this refund. */
    restockInfo?: RestockInfo;
    /** Whether to send a refund confirmation email to the customer. */
    sendOrderRefundedEmail?: boolean;
    /** Custom message added to the refund confirmation email. */
    customMessage?: string | null;
}
export interface RestockInfo {
    /** Restock type. */
    type?: RestockType;
    /** Restocked line items and quantities. Only relevant for `{"type": "SOME_ITEMS"}`. */
    items?: RestockItem[];
}
export declare enum RestockType {
    NO_ITEMS = "NO_ITEMS",
    ALL_ITEMS = "ALL_ITEMS",
    SOME_ITEMS = "SOME_ITEMS"
}
export interface RestockItem {
    /** ID of the line item being restocked. */
    lineItemId?: string;
    /** Line item quantity being restocked. */
    quantity?: number;
}
export interface TriggerRefundResponse {
    /** All order's transactions after the refunds were added */
    orderTransactions?: OrderTransactions;
    /** Created refund ID */
    refundId?: string | null;
    /** Payment ID's that the refund execution had failed for */
    failedPaymentIds?: ItemMetadata[];
}
export interface CalculateRefundRequest {
    /** Order ID */
    ecomOrderId?: string;
    /** Refunded line items and quantity */
    refundItems?: CalculateRefundItemRequest[];
    /** Should include shipping in refund calculation */
    refundShipping?: boolean;
}
export interface CalculateRefundItemRequest {
    /** ID of the line item being refunded */
    id?: string;
    /** How much of that line item is being refunded */
    quantity?: number;
}
export interface CalculateRefundResponse {
    /** Total refundable amount */
    total?: Price;
    /** Tax cost of the order */
    tax?: Price;
    /** Discount given for this order */
    discount?: Price;
    /** Total cost of the order (without tax) */
    subtotal?: Price;
    /** Total shipping cost for order */
    shipping?: Price;
    /** Previous refund given on that order */
    previouslyRefundedAmount?: Price;
    /** The refundable items of that order */
    items?: CalculateRefundItemResponse[];
}
export interface CalculateRefundItemResponse {
    /** Line item ID */
    id?: string;
    /** Refundable amount for requested quantity of items (price of requested quantity of items without tax and discount) */
    price?: Price;
}
export interface VoidAuthorizedPaymentsRequest {
    /** Wix eCommerce order ID */
    ecomOrderId: string;
    /** Payment IDs */
    paymentIds: string[];
}
export interface VoidAuthorizedPaymentsResponse {
    /** All order's transactions after the void was triggered */
    orderTransactions?: OrderTransactions;
}
export interface CaptureAuthorizedPaymentsRequest {
    /** Wix eCommerce order ID */
    ecomOrderId: string;
    /** Capture payments information */
    payments: PaymentCapture[];
}
export interface PaymentCapture {
    /** Payment ID */
    paymentId?: string | null;
    /**
     * Capture amount.
     * If not provided - full authorized amount will be captured.
     */
    amount?: Price;
}
export interface CaptureAuthorizedPaymentsResponse {
    /** All order's transactions after the capture was triggered */
    orderTransactions?: OrderTransactions;
}
export interface ChargeSavedPaymentMethodRequest {
    /** Ecom Order ID. */
    ecomOrderId?: string;
    /** Amount to be charged */
    amount?: Price;
}
export interface ChargeSavedPaymentMethodResponse {
    /** Payment gateway's order ID (e.g Wix Payments) */
    paymentGatewayOrderId?: string;
}
export interface DiffmatokyPayload {
    left?: string;
    right?: string;
    compareChannel?: string;
    entityId?: string;
    errorInformation?: ErrorInformation;
    tags?: string[];
}
export interface ErrorInformation {
    stackTrace?: string;
}
export interface ContinueSideEffectsFlowInLegacyData {
    storeId?: string;
    orderId?: string;
    ordersExperiments?: OrdersExperiments;
}
export interface IndexingMessage {
    id?: string;
    opType?: number;
    requiredVersions?: string[];
}
export interface GetOrderRequest {
    /** ID of the order to retrieve. */
    id: string;
}
export interface GetOrderResponse {
    /** The requested order. */
    order?: Order;
}
export interface InternalQueryOrdersResponse {
    /** List of orders. */
    orders?: Order[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata;
}
export interface QueryOrderRequest {
    /** Query options. */
    query?: PlatformQuery;
}
export interface QueryOrderResponse {
    /** List of orders. */
    orders?: Order[];
    /** Details on the paged set of results returned. */
    metadata?: PlatformPagingMetadata;
}
export interface SearchOrdersRequest {
    /** Search options. */
    search?: CursorSearch;
}
export interface CursorSearch extends CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
    /**
     * Filter object.
     *
     * For example, the following `filter` object will only return orders with payment statuses of paid and/or partially paid:
     *
     * `"filter": {"paymentStatus": {"$in": ["PAID", "PARTIALLY_PAID"]}}`
     *
     * Learn more about the [filter format](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-filter-section).
     */
    filter?: Record<string, any> | null;
    /**
     * Array of sort objects that specify the order in which results should be sorted.
     *
     * For example, the following `sort` array will sort by `createdDate` in descending order:
     *
     * `"sort": [{"fieldName": "createdDate", "order":"DESC"}]`.
     *
     * Learn more about the [sort format](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#the-sort-section).
     */
    sort?: Sorting[];
}
/** @oneof */
export interface CursorSearchPagingMethodOneOf {
    /**
     * Cursor paging options.
     * Learn more about [cursor paging](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language#cursor-paging).
     */
    cursorPaging?: CursorPaging;
}
export interface SearchOrdersResponse {
    /** List of orders. */
    orders?: Order[];
    /** Details on the paged set of results returned. */
    metadata?: CursorPagingMetadata;
}
export interface CursorPagingMetadata {
    /** Number of items returned in current page. */
    count?: number | null;
    /** Cursor strings that point to the next page, previous page, or both. */
    cursors?: Cursors;
    /**
     * Whether there are more pages to retrieve following the current page.
     *
     * + `true`: Another page of results can be retrieved.
     * + `false`: This is the last page.
     */
    hasNext?: boolean | null;
}
export interface CreateOrderRequest {
    /** Order info. */
    order: Order;
    /** Determine order lifecycle */
    settings?: OrderCreationSettings;
}
export interface OrderCreationSettings {
    /**
     * Condition for the order to be approved.
     * Default: `DEFAULT`
     */
    orderApprovalStrategy?: OrderApprovalStrategy;
    /** Notification settings to be applied on order creation */
    notifications?: OrderCreateNotifications;
}
export declare enum OrderApprovalStrategy {
    /** Order is automatically approved when `order.priceSummary.total = 0`, **or** after receiving payment. */
    DEFAULT = "DEFAULT",
    /** Order is automatically approved **only** after receiving payment. */
    PAYMENT_RECEIVED = "PAYMENT_RECEIVED",
    /** Order is automatically approved when payment method is saved for it. */
    PAYMENT_METHOD_SAVED = "PAYMENT_METHOD_SAVED"
}
export interface OrderCreateNotifications {
    /**
     * Whether to send notification to the buyer.
     *
     * Default: `true`
     */
    sendNotificationToBuyer?: boolean | null;
    /**
     * Whether to send notifications to the business.
     *
     * Default: `true`
     */
    sendNotificationsToBusiness?: boolean | null;
}
export interface CreateOrderResponse {
    /** Newly created order. */
    order?: Order;
}
export interface UpdateOrderRequest {
    /** Order to be updated. */
    order: Order;
}
export interface UpdateOrderResponse {
    /** Newly created order. */
    order?: Order;
}
export interface BulkUpdateOrdersRequest {
    /** Orders to update. */
    orders: MaskedOrder[];
    /**
     * Whether to return the full order entities.
     *
     * Default: `false`
     */
    returnEntity?: boolean;
}
export interface MaskedOrder {
    /** Order to be updated. */
    order?: Order;
}
export interface BulkUpdateOrdersResponse {
    /** Bulk action results. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface CommitDeltasRequest {
    /** Order id to be updated */
    id?: string;
    /**
     * Draft order Id representing this change.
     * Use this ID to get this specific draft content. call .../v1/draft-orders/{draft_order_id}/get
     */
    draftOrderId?: string;
    /** Draft order changes to be applied */
    changes?: DraftOrderDiffs;
    /** Side-effects to happen after order is updated */
    commitSettings?: DraftOrderCommitSettings;
    /** Reason for edit, given by user (optional). */
    reason?: string | null;
}
export interface DraftOrderDiffs extends DraftOrderDiffsShippingUpdateInfoOneOf, DraftOrderDiffsBuyerUpdateInfoOneOf, DraftOrderDiffsBillingUpdateInfoOneOf, DraftOrderDiffsRecipientUpdateInfoOneOf {
    /** Shipping info and selected shipping option details. */
    changedShippingInfo?: V1ShippingInformation;
    /** Remove existing shipping info. */
    shippingInfoRemoved?: boolean;
    /** Added/updated/removed order line items. */
    lineItems?: V1LineItemDelta[];
    /** Added/updated/removed discounts. */
    appliedDiscounts?: AppliedDiscountDelta[];
    /** Added/updated/removed additional fee. */
    additionalFees?: AdditionalFeeDelta[];
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Updated Tax summary. overwrites existing tax summary.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Updated Tax summary. overwrites existing tax summary.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxSummary?: TaxSummary;
    /**
     * Updated order price summary. overwrites existing price summary.
     * balance will be updated automatically.
     */
    priceSummary?: PriceSummary;
}
/** @oneof */
export interface DraftOrderDiffsShippingUpdateInfoOneOf {
    /** Shipping info and selected shipping option details. */
    changedShippingInfo?: V1ShippingInformation;
    /** Remove existing shipping info. */
    shippingInfoRemoved?: boolean;
}
/** @oneof */
export interface DraftOrderDiffsBuyerUpdateInfoOneOf {
}
/** @oneof */
export interface DraftOrderDiffsBillingUpdateInfoOneOf {
}
/** @oneof */
export interface DraftOrderDiffsRecipientUpdateInfoOneOf {
}
export interface V1LineItemDelta extends V1LineItemDeltaDeltaOneOf {
    /** The line item was added. */
    lineItemAdded?: boolean;
    /** The line item was modified. */
    changedDetails?: ItemChangedDetails;
    /** The line item was added. */
    lineItemRemoved?: boolean;
    /** Line item ID. */
    lineItemId?: string;
    lineItem?: OrderLineItemChangedDetails;
}
/** @oneof */
export interface V1LineItemDeltaDeltaOneOf {
    /** The line item was added. */
    lineItemAdded?: boolean;
    /** The line item was modified. */
    changedDetails?: ItemChangedDetails;
    /** The line item was added. */
    lineItemRemoved?: boolean;
}
export interface OrderLineItemChangedDetails {
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     */
    productName?: ProductName;
    /**
     * References to the line item's origin catalog.
     * This field may be empty in the case of a custom line item.
     */
    catalogReference?: CatalogReference;
    /** Line item quantity. */
    quantity?: number;
    /** Total discount for this line item's entire quantity. */
    totalDiscount?: Price;
    /** Line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine[];
    /** Line item image. */
    image?: Image;
    /** Physical properties of the item. When relevant, contains information such as SKU and item weight. */
    physicalProperties?: PhysicalProperties;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /**
     * Fulfiller ID. Field is empty when the line item is self-fulfilled.
     * To get fulfillment information, pass this order's ID to [List Fulfillments For Single Order](https://bo.wix.com/wix-docs/rest/ecommerce/order-fulfillments/list-fulfillments-for-single-order).
     */
    fulfillerId?: string | null;
    /** Line item price after line item discounts for display purposes. */
    price?: Price;
    /** Line item price before line item discounts for display purposes. Defaults to `price` when not provided. */
    priceBeforeDiscounts?: Price;
    /** Total price after all discounts and tax. */
    totalPriceAfterTax?: Price;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_OFFLINE` - The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     */
    paymentOption?: DeltaPaymentOptionType;
    /**
     * Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @deprecated Deprecated. Use `taxInfo` instead.
     * This field will be removed on September 30, 2024.
     * Tax details for this line item.
     * @replacedBy tax_info
     * @targetRemovalDate 2024-09-30
     */
    taxDetails?: ItemTaxFullDetails;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /** Total price **after** catalog-defined discount and line item discounts. */
    lineItemPrice?: Price;
    /** Total price after all discounts excluding tax. */
    totalPriceBeforeTax?: Price;
    /** Subscription info. */
    subscriptionInfo?: SubscriptionInfo;
}
/** Type of selected payment option for catalog item */
export declare enum DeltaPaymentOptionType {
    /** Irrelevant */
    UNKNOWN_PAYMENT_OPTION = "UNKNOWN_PAYMENT_OPTION",
    /** The entire payment for the given item will happen after checkout. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /**
     * Payment for this item can only be done using a membership and must be manually redeemed in the dashboard by the site owner.
     * Note: when this option is used, the price will be 0.
     */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
export interface ItemChangedDetails {
    /** The quantity before the change. */
    quantityBeforeChange?: number | null;
    /** The price before the change. */
    priceBeforeChange?: Price;
    /** The price description before the change */
    priceDescriptionBeforeChange?: PriceDescription;
}
export interface AppliedDiscountDelta extends AppliedDiscountDeltaDeltaOneOf {
    editedDiscount?: AppliedDiscount;
    discountRemoved?: boolean;
    /** Discount id. */
    discountId?: string;
}
/** @oneof */
export interface AppliedDiscountDeltaDeltaOneOf {
    editedDiscount?: AppliedDiscount;
    discountRemoved?: boolean;
}
export interface AdditionalFeeDelta extends AdditionalFeeDeltaDeltaOneOf {
    editedAdditionalFee?: AdditionalFee;
    additionalFeeRemoved?: boolean;
    /** Additional fee id. */
    additionalFeeId?: string;
}
/** @oneof */
export interface AdditionalFeeDeltaDeltaOneOf {
    editedAdditionalFee?: AdditionalFee;
    additionalFeeRemoved?: boolean;
}
export interface DraftOrderCommitSettings {
    /** If false, do not send notifications to buyer. Default is true. */
    sendNotificationsToBuyer?: boolean | null;
    /** If false, do not send notifications to business. Default is true. */
    sendNotificationsToBusiness?: boolean | null;
    /** If false, do not add activities to the order. Default is true. */
    addActivitiesToOrder?: boolean | null;
    /** If false, do not send mails to custom fulfillers in case of a change of shippable items fulfilled by custom fulfillers. Default is true. */
    sendNotificationsToCustomFulfillers?: boolean | null;
    /** Inventory changes to be applied. Either to restock, or decrease. */
    inventoryUpdates?: InventoryUpdateDetails[];
}
export interface InventoryUpdateDetails {
    /** Action to be applied - decrease or restock */
    actionType?: InventoryAction;
    /** Order line item id */
    lineItemId?: string;
    /** The amount to be increased or restocked */
    quantityChange?: number;
}
export declare enum InventoryAction {
    /** Restock inventory */
    RESTOCK = "RESTOCK",
    /** Decrease inventory. Without failing on negative inventory. */
    DECREASE = "DECREASE"
}
export interface CommitDeltasResponse {
    /** Order after deltas are applied */
    order?: Order;
}
/** Triggered when order is edited by draftOrders */
export interface OrderDeltasCommitted {
    /** The order after committed changes. */
    order?: Order;
    /** Draft order Id representing this change. */
    draftOrderId?: string;
    /** Applied changes. */
    changes?: CommittedDiffs;
    /** Side-effects requested to happen as a result of this edit. */
    commitSettings?: DraftOrderCommitSettings;
    /**
     * Date and time when order deltas were committed.
     * @readonly
     */
    commitDate?: Date | null;
}
export interface CommittedDiffs extends CommittedDiffsShippingUpdateInfoOneOf {
    /** Shipping info and selected shipping option details. */
    changedShippingInfo?: V1ShippingInformation;
    /** Remove existing shipping info. */
    shippingInfoRemoved?: boolean;
    /** Added/updated/removed order line items. */
    lineItems?: LineItemDelta[];
    /** Added/updated/removed discounts. */
    appliedDiscounts?: AppliedDiscountDelta[];
    /** Added/updated/removed additional fee. */
    additionalFees?: AdditionalFeeDelta[];
}
/** @oneof */
export interface CommittedDiffsShippingUpdateInfoOneOf {
    /** Shipping info and selected shipping option details. */
    changedShippingInfo?: V1ShippingInformation;
    /** Remove existing shipping info. */
    shippingInfoRemoved?: boolean;
}
export interface LineItemDelta extends LineItemDeltaDeltaOneOf {
    lineItemAdded?: boolean;
    changedDetails?: ItemChangedDetails;
    lineItemRemoved?: OrderLineItemChangedDetails;
    /** Line item ID. */
    lineItemId?: string;
}
/** @oneof */
export interface LineItemDeltaDeltaOneOf {
    lineItemAdded?: boolean;
    changedDetails?: ItemChangedDetails;
    lineItemRemoved?: OrderLineItemChangedDetails;
}
export interface ArchiveOrderRequest {
    /** Order ID. */
    id?: string;
}
export interface ArchiveOrderResponse {
    /** Archived order. */
    order?: Order;
}
export interface BulkArchiveOrdersRequest {
    /** IDs of orders to archive. */
    ids?: string[];
    /** Whether to return the full updated order entities in the response. */
    returnFullEntity?: boolean;
}
export interface BulkArchiveOrdersResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkArchiveOrdersByFilterRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */
    filter?: Record<string, any> | null;
}
export interface BulkArchiveOrdersByFilterResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface UnArchiveOrderRequest {
    /** Order ID. */
    id?: string;
}
export interface UnArchiveOrderResponse {
    /** Unarchived order. */
    order?: Order;
}
export interface BulkUnArchiveOrdersRequest {
    /** IDs or orders to unarchive. */
    ids?: string[];
    /** Whether to return the full updated order entities in the response. */
    returnFullEntity?: boolean;
}
export interface BulkUnArchiveOrdersResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkUnArchiveOrdersByFilterRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */
    filter?: Record<string, any> | null;
}
export interface BulkUnArchiveOrdersByFilterResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface UpdateBuyerInfoRequest {
    /**
     * Order ID.
     * @readonly
     */
    id?: string;
    /** Buyer info. */
    buyerInfo?: BuyerInfoUpdate;
}
export interface BuyerInfoUpdate {
    /** Contact ID. */
    contactId?: string | null;
    /** Email associated with the buyer. */
    email?: string | null;
}
export interface UpdateBuyerInfoResponse {
    /** Updated order. */
    order?: Order;
}
export interface UpdateBuyerEmailRequest {
    /** @readonly */
    id?: string;
    email?: string | null;
}
export interface UpdateBuyerEmailResponse {
    order?: Order;
}
export interface UpdateOrderShippingAddressRequest {
    /** Order ID. */
    id?: string;
    /** Shipping address and contact details to be updated. */
    shippingAddress?: AddressWithContact;
}
export interface UpdateOrderShippingAddressResponse {
    /** Updated order. */
    order?: Order;
}
export interface UpdateBillingContactDetailsRequest {
    /**
     * Order ID.
     * @readonly
     */
    id?: string;
    /** Contact details. */
    addressContactDetails?: FullAddressContactDetails;
}
export interface UpdateBillingContactDetailsResponse {
    /** Updated order. */
    order?: Order;
}
export interface UpdateOrderLineItemRequest {
    /** Order ID */
    id?: string;
    /** Order line item to update */
    lineItem?: OrderLineItem;
}
export interface UpdateOrderLineItemResponse {
    /** Updated order data */
    order?: Order;
}
export interface UpdateOrderLineItemsRequest {
    /** Order ID */
    orderId?: string;
    /** Order line items to update */
    lineItems?: MaskedOrderLineItem[];
}
export interface MaskedOrderLineItem {
    /** Order line item to update */
    lineItem?: OrderLineItem;
}
export interface UpdateOrderLineItemsResponse {
    /** Updated order data */
    order?: Order;
}
export interface AddInternalActivityRequest {
    /** Order ID. */
    id?: string;
    /** Activity info. */
    activity?: InternalActivity;
}
export interface InternalActivity extends InternalActivityContentOneOf {
    /** Order refunded. */
    orderRefunded?: OrderRefunded;
    /** Order placed. */
    orderPlaced?: OrderPlaced;
    /** Order paid. Either by the store owner (for offline orders), or when an online transaction was confirmed. */
    orderPaid?: OrderPaid;
    /** Order shipping status set as fulfilled. */
    orderFulfilled?: OrderFulfilled;
    /** Order shipping status set as not fulfilled. */
    orderNotFulfilled?: OrderNotFulfilled;
    /** Order canceled. */
    orderCanceled?: OrderCanceled;
    /** Download link was sent (relevant for orders with digital line items). */
    downloadLinkSent?: DownloadLinkSent;
    /** Shipping tracking number added to order. */
    trackingNumberAdded?: TrackingNumberAdded;
    /** Shipping tracking number was edited. */
    trackingNumberEdited?: TrackingNumberEdited;
    /** Shipping tracking link added to order. */
    trackingLinkAdded?: TrackingLinkAdded;
    /** An email confirmation of order shipment was sent. */
    shippingConfirmationEmailSent?: ShippingConfirmationEmailSent;
    /** Invoice was added to order. */
    invoiceAdded?: InvoiceAdded;
    /** Invoice sent to customer via email. */
    invoiceSent?: InvoiceSent;
    /** Email sent to fulfiller. */
    fulfillerEmailSent?: FulfillerEmailSent;
    /** Shipping address was updated. */
    shippingAddressEdited?: ShippingAddressEdited;
    /** Order email was updated. */
    emailEdited?: EmailEdited;
    /** Email notification for pickup sent. */
    pickupReadyEmailSent?: PickupReadyEmailSent;
    /** Order created as a result of items exchange. */
    orderCreatedFromExchange?: OrderCreatedFromExchange;
    /** New exchange order created. */
    newExchangeOrderCreated?: NewExchangeOrderCreated;
    /** Order partially paid. During the checkout for orders with deposit items. */
    orderPartiallyPaid?: OrderPartiallyPaid;
    /** Draft order changes applied */
    draftOrderChangesApplied?: DraftOrderChangesApplied;
    /** Payment method is saved for order */
    savedPaymentMethod?: SavedPaymentMethod;
    /** Details of a pending payment */
    paymentPending?: PaymentPending;
    /** Details of a canceled payment */
    paymentCanceled?: PaymentCanceled;
    /** Details of a declined payment */
    paymentDeclined?: PaymentDeclined;
    /** Order pending */
    orderPending?: OrderPending;
    /** Order rejected */
    orderRejected?: OrderRejected;
    /**
     * Internal activity ID.
     * @readonly
     */
    id?: string | null;
    /**
     * Internal activity author's email.
     * @readonly
     */
    authorEmail?: string | null;
    /**
     * Internal activity creation date and time.
     * @readonly
     */
    createdDate?: Date | null;
}
/** @oneof */
export interface InternalActivityContentOneOf {
    /** Order refunded. */
    orderRefunded?: OrderRefunded;
    /** Order placed. */
    orderPlaced?: OrderPlaced;
    /** Order paid. Either by the store owner (for offline orders), or when an online transaction was confirmed. */
    orderPaid?: OrderPaid;
    /** Order shipping status set as fulfilled. */
    orderFulfilled?: OrderFulfilled;
    /** Order shipping status set as not fulfilled. */
    orderNotFulfilled?: OrderNotFulfilled;
    /** Order canceled. */
    orderCanceled?: OrderCanceled;
    /** Download link was sent (relevant for orders with digital line items). */
    downloadLinkSent?: DownloadLinkSent;
    /** Shipping tracking number added to order. */
    trackingNumberAdded?: TrackingNumberAdded;
    /** Shipping tracking number was edited. */
    trackingNumberEdited?: TrackingNumberEdited;
    /** Shipping tracking link added to order. */
    trackingLinkAdded?: TrackingLinkAdded;
    /** An email confirmation of order shipment was sent. */
    shippingConfirmationEmailSent?: ShippingConfirmationEmailSent;
    /** Invoice was added to order. */
    invoiceAdded?: InvoiceAdded;
    /** Invoice sent to customer via email. */
    invoiceSent?: InvoiceSent;
    /** Email sent to fulfiller. */
    fulfillerEmailSent?: FulfillerEmailSent;
    /** Shipping address was updated. */
    shippingAddressEdited?: ShippingAddressEdited;
    /** Order email was updated. */
    emailEdited?: EmailEdited;
    /** Email notification for pickup sent. */
    pickupReadyEmailSent?: PickupReadyEmailSent;
    /** Order created as a result of items exchange. */
    orderCreatedFromExchange?: OrderCreatedFromExchange;
    /** New exchange order created. */
    newExchangeOrderCreated?: NewExchangeOrderCreated;
    /** Order partially paid. During the checkout for orders with deposit items. */
    orderPartiallyPaid?: OrderPartiallyPaid;
    /** Draft order changes applied */
    draftOrderChangesApplied?: DraftOrderChangesApplied;
    /** Payment method is saved for order */
    savedPaymentMethod?: SavedPaymentMethod;
    /** Details of a pending payment */
    paymentPending?: PaymentPending;
    /** Details of a canceled payment */
    paymentCanceled?: PaymentCanceled;
    /** Details of a declined payment */
    paymentDeclined?: PaymentDeclined;
    /** Order pending */
    orderPending?: OrderPending;
    /** Order rejected */
    orderRejected?: OrderRejected;
}
/** Order placed */
export interface OrderPlaced {
}
/** Order marked as paid, either by the store owner (for offline orders), or when an online transaction was confirmed */
export interface OrderPaid {
}
/** Order shipping status set as fulfilled */
export interface OrderFulfilled {
}
/** Order shipping status set as not fulfilled */
export interface OrderNotFulfilled {
}
/** Order canceled */
export interface OrderCanceled {
}
/** A download link was sent (relevant for orders with digital line items) */
export interface DownloadLinkSent {
}
/** Shipping tracking number was set */
export interface TrackingNumberAdded {
}
/** Shipping tracking number was edited */
export interface TrackingNumberEdited {
}
/** Shipping tracking link was set */
export interface TrackingLinkAdded {
}
/** An email confirmation of order shipment was sent */
export interface ShippingConfirmationEmailSent {
}
/** Invoice was set in the order */
export interface InvoiceAdded {
}
/** Invoice sent to customer via email */
export interface InvoiceSent {
}
/** Email was sent to fulfiller */
export interface FulfillerEmailSent {
}
/** Shipping address was updated */
export interface ShippingAddressEdited {
}
/** Order email was updated */
export interface EmailEdited {
}
/** An email notification for pickup was sent */
export interface PickupReadyEmailSent {
}
/** Order marked as partially paid when an online transaction was confirmed with partial minimal required amount of total sum */
export interface OrderPartiallyPaid {
}
/** Order reject */
export interface OrderPending {
}
/** Order reject */
export interface OrderRejected {
}
export interface AddInternalActivityResponse {
    /** Updated order. */
    order?: Order;
    /**
     * ID of the added internal activity.
     * Use this ID to either [update](https://bo.wix.com/wix-docs/rest/ecommerce/orders/update-activity) or [delete](https://bo.wix.com/wix-docs/rest/ecommerce/orders/delete-activity) the activity.
     */
    activityId?: string;
}
export interface AddActivityRequest {
    /** Order ID. */
    id?: string;
    /** Activity info. */
    activity?: PublicActivity;
}
export interface PublicActivity extends PublicActivityContentOneOf {
    /** Custom activity details. */
    customActivity?: CustomActivity;
    /** Merchant commment. */
    merchantComment?: MerchantComment;
}
/** @oneof */
export interface PublicActivityContentOneOf {
    /** Custom activity details. */
    customActivity?: CustomActivity;
    /** Merchant commment. */
    merchantComment?: MerchantComment;
}
export interface AddActivityResponse {
    /** Updated order. */
    order?: Order;
    /**
     * ID of the added activity.
     * Use this ID to either [update](https://bo.wix.com/wix-docs/rest/ecommerce/orders/update-activity) or [delete](https://bo.wix.com/wix-docs/rest/ecommerce/orders/delete-activity) the activity.
     */
    activityId?: string;
}
export interface AddActivitiesRequest {
    /** Order ID. */
    orderId?: string;
    /** Activities to add. */
    activities?: PublicActivity[];
}
export interface AddActivitiesResponse {
    /** Updated order. */
    order?: Order;
    /**
     * IDs of the added activities.
     * Use this IDs to either [update](https://bo.wix.com/wix-docs/rest/ecommerce/orders/update-activities) or [delete](https://bo.wix.com/wix-docs/rest/ecommerce/orders/delete-activities) the activities.
     */
    activityIds?: string[];
}
export interface UpdateActivityRequest {
    /** Order ID. */
    id?: string;
    /** ID of the activity to update. */
    activityId?: string;
    /** Activity info. */
    activity?: PublicActivity;
}
export interface UpdateActivityResponse {
    /** Updated order. */
    order?: Order;
}
export interface DeleteActivityRequest {
    /** Order ID. */
    id?: string;
    /** ID of the activity to delete. */
    activityId?: string;
}
export interface DeleteActivityResponse {
    /** Updated order. */
    order?: Order;
}
export interface UpdateLineItemsDescriptionLinesRequest {
    /** Order ID. */
    id?: string;
    /** Line items. */
    lineItems?: LineItemUpdate[];
}
export interface LineItemUpdate {
    /** Line item ID. */
    lineItemId?: string;
    /**
     * Description lines' info.
     * If description line already exists for this name, it will be replaced.
     */
    descriptionLines?: DescriptionLine[];
}
export interface UpdateLineItemsDescriptionLinesResponse {
    /** Updated order. */
    order?: Order;
}
export interface MarkOrderAsSeenByHumanRequest {
    /** Order ID. */
    id?: string;
}
export interface MarkOrderAsSeenByHumanResponse {
    /** Updated order. */
    order?: Order;
}
export interface CancelOrderRequest {
    /** Order ID. */
    id: string;
    /** Whether to send an order canceled email to the buyer. */
    sendOrderCanceledEmail?: boolean;
    /** Custom note to be added to the email (optional). */
    customMessage?: string | null;
    /** Whether to restock all items in the order. This will only apply to products in the Wix Stores inventory. */
    restockAllItems?: boolean;
}
export interface CancelOrderResponse {
    /** Canceled order. */
    order?: Order;
}
export interface OrderCanceledEventOrderCanceled {
    /** The order that was cancelled */
    order?: Order;
    /** Should restock all items on that order */
    restockAllItems?: boolean;
    /** Should send a confirmation mail to the customer */
    sendOrderCanceledEmail?: boolean;
    /** Personal note added to the email */
    customMessage?: string | null;
}
export interface UpdateOrderStatusRequest {
    /** Order ID. */
    orderId?: string;
    /** New order status. */
    status?: OrderStatus;
}
export interface UpdateOrderStatusResponse {
    /** Updated order. */
    order?: Order;
}
export interface MarkAsFulfilledRequest {
    /** Order ID. */
    id?: string;
}
export interface MarkAsFulfilledResponse {
    /** Updated order. */
    order?: Order;
}
/** Triggered when the fulfillment status of an order is updated */
export interface FulfillmentStatusUpdated {
    /** The order that was updated */
    order?: Order;
    /** The previous status (before the update) */
    previousFulfillmentStatus?: FulfillmentStatus;
    /** the new status (after the update) */
    newFulfillmentStatus?: FulfillmentStatus;
    /** the action that caused this update */
    action?: string;
}
export interface BulkMarkAsFulfilledRequest {
    /** IDs of orders to be marked as fulfilled. */
    ids?: string[];
    /** Whether to return the full updated order entities in the response. */
    returnFullEntity?: boolean;
}
export interface BulkMarkAsFulfilledResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkMarkAsFulfilledByFilterRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */
    filter?: Record<string, any> | null;
}
export interface BulkMarkAsFulfilledByFilterResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface MarkAsUnfulfilledRequest {
    /** Order ID. */
    id?: string;
}
export interface MarkAsUnfulfilledResponse {
    /** Updated order. */
    order?: Order;
}
export interface BulkMarkAsUnfulfilledRequest {
    /** IDs of orders to be marked as not fulfilled. */
    ids?: string[];
    /** Whether to return the full updated order entities in the response. */
    returnFullEntity?: boolean;
}
export interface BulkMarkAsUnfulfilledResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkMarkAsUnfulfilledByFilterRequest {
    /** Filter object. Learn more about supported filters [here](https://bo.wix.com/wix-docs/rest/ecommerce/orders/filter-and-sort). */
    filter?: Record<string, any> | null;
}
export interface BulkMarkAsUnfulfilledByFilterResponse {
    /** Items updated by bulk action. */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkSetBusinessLocationRequest {
    /** IDs of orders to update location for. */
    orderIds?: string[];
    /** Business location. */
    businessLocation?: Location;
}
export interface BulkSetBusinessLocationResponse {
    /** Bulk action results. */
    results?: BulkSetBusinessLocationResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkSetBusinessLocationResult {
    itemMetadata?: ItemMetadata;
}
export interface V1MarkOrderAsPaidRequest {
    /** Order ID. */
    id?: string;
}
export interface V1MarkOrderAsPaidResponse {
    /** Updated order. */
    order?: Order;
}
export interface V1BulkMarkOrdersAsPaidRequest {
    /** IDs of orders to mark as paid. */
    ids?: string[];
}
export interface V1BulkMarkOrdersAsPaidResponse {
    /**
     * Items updated by the bulk action.
     * The Order entity within the results optimistically changes its payment status to paid, however this process is async.
     */
    results?: BulkOrderResult[];
    /** Bulk action metadata. */
    bulkActionMetadata?: BulkActionMetadata;
}
export interface V1CreatePaymentGatewayOrderRequest {
    /** eCom Order ID */
    ecomOrderId?: string;
}
export interface V1CreatePaymentGatewayOrderResponse {
    /** ID of the order created in the payment gateway */
    paymentGatewayOrderId?: string;
}
export interface GetShipmentsRequest {
    id?: string;
}
export interface GetShipmentsResponse {
    shipmentIds?: string[];
}
export interface AggregateOrdersRequest {
    /** Filter applied to original data */
    filter?: Record<string, any> | null;
    /** This is an object defining aggregation itself */
    aggregation?: Record<string, any> | null;
    /**
     * Optional custom separator string that can be used to override default separator value '|'
     * for hierarchical responses of multifaceted aggregation requests like:
     * '{"aggregation": {"example_request_key": {"$count" : ["deliveryMethod", "shippingRegion"]}}}'
     * with example response for default '|' separator like:
     * '{"aggregates" :{"example_request_key": {"(Mail|Region 1)": 5, "(Pickup|Region 2)": 10}}}'
     */
    hierarchySeparatorOverride?: string | null;
}
export interface AggregateOrdersResponse {
    aggregates?: Record<string, any> | null;
}
export interface DecrementItemsQuantityRequest {
    /** Order ID */
    id?: string;
    /** Which items to decrement, and how much to decrement from each one */
    decrementData?: DecrementData[];
}
export interface DecrementData {
    /** ID of the line item being decremented. */
    lineItemId?: string;
    /** Line item quantity being decremented. */
    decrementBy?: number;
    /** Whether to restock the line item (triggers inventory update). */
    restock?: boolean;
}
export interface DecrementItemsQuantityResponse {
    /** Updated order data */
    order?: Order;
}
export interface BulkUpdateOrderTagsRequest {
    /** IDs of orders to update tags for. */
    orderIds: string[];
    /** Tags to be added to orders */
    assignTags?: Tags;
    /** Tags to be removed from orders */
    unassignTags?: Tags;
}
export interface BulkUpdateOrderTagsResponse {
    results?: BulkUpdateOrderTagsResult[];
    bulkActionMetadata?: BulkActionMetadata;
}
export interface BulkUpdateOrderTagsResult {
    itemMetadata?: ItemMetadata;
}
export interface Task {
    key?: TaskKey;
    executeAt?: Date | null;
    payload?: string | null;
}
export interface TaskKey {
    appId?: string;
    instanceId?: string;
    subjectId?: string | null;
}
export interface TaskAction extends TaskActionActionOneOf {
    complete?: Complete;
    cancel?: Cancel;
    reschedule?: Reschedule;
}
/** @oneof */
export interface TaskActionActionOneOf {
    complete?: Complete;
    cancel?: Cancel;
    reschedule?: Reschedule;
}
export interface Complete {
}
export interface Cancel {
}
export interface Reschedule {
    executeAt?: Date | null;
    payload?: string | null;
}
export interface InvoiceSentEvent {
    id?: IdAndVersion;
    /** @readonly */
    data?: InvoiceFields;
    /** @readonly */
    status?: InvoiceStatus;
}
export interface IdAndVersion {
    id?: string | null;
    version?: number | null;
}
export interface InvoiceFields {
    /** The invoice number allocated the invoice by the server. The number is limited to at most 11 digits. */
    number?: string | null;
    /** The invoice 3-letter currency code in [ISO-4217 alphabetic](https://www.iso.org/iso-4217-currency-codes.html) format. */
    currencyCode?: string | null;
    /** The invoice customer. The customer must be a contact of the site, with an email. */
    customer?: Customer;
    /**
     * Invoice dates: issue date and due date are mandatory and provided when the invoice is created.
     * Last seen date is the optional date when the invoice was last seen be UoU.
     */
    dates?: InvoiceDates;
    /**
     * Line items containing the details of the products or services relevant to the invoice, with their name, prices,
     * and quantity. There must be at least one line item on the invoice.
     */
    lineItems?: LineItems;
    /**
     * Locale of the invoice, containing the language.
     * This field is not mandatory but is used for display purposes, to determine the appearance of numbers and dates
     * on the invoice.
     */
    locale?: Locale;
    /**
     * The totals on the invoice.
     * The totals.subtotal, totals.total and totals.taxed_amount are calculated by the server based on the line items.
     * Alternatively, these fields can be provided in the invoice creation request, in this case, these values are fixed.
     * The totals contain fees and a discount, that apply to the invoice.
     */
    totals?: TotalPrice;
    /** An optional discount on the invoice. */
    discount?: Discount;
    /** The taxes of the invoice. */
    taxes?: CalculatedTaxes;
    /** The payments on the invoice. The invoice has status paid if its payments cover the invoice total. */
    payments?: Payments;
    /** Invoice metadata */
    metaData?: MetaData;
    /**
     * Not used
     * @deprecated
     */
    creationAdditional_BIInformation?: string | null;
    /**
     * The balance and amount paid on the invoice.
     * This read-only field is calculated based on the invoice totals and payments.
     * @readonly
     */
    dynamicTotals?: InvoiceDynamicPriceTotals;
    /** The invoice title */
    title?: string | null;
    /** Invoice custom fields */
    customFields?: CustomFieldValue[];
    /**
     * Not used
     * @deprecated
     */
    designTemplateId?: string | null;
    /**
     * Not used
     * @deprecated
     */
    createOrder?: boolean | null;
    /** The optional deposit of the invoice */
    deposit?: Deposit;
    /** Associated checkout for this invoice */
    ecomCheckoutId?: string | null;
}
export interface Customer {
    contactId?: string | null;
    name?: string | null;
    email?: Email;
    address?: QuotesAddress;
    phone?: Phone;
    company?: Company;
    firstName?: string | null;
    lastName?: string | null;
    billingAddress?: CommonAddress;
    shippingAddress?: CommonAddress;
}
export interface Email {
    address?: string;
}
export interface QuotesAddress {
    street?: string | null;
    city?: string | null;
    zip?: string | null;
    state?: string | null;
    country?: string | null;
    /** @readonly */
    description?: AddressDescription;
}
export interface AddressDescription {
    content?: string;
    placement?: Placement;
}
export declare enum Placement {
    Unknown = "Unknown",
    Replace = "Replace",
    Before = "Before",
    After = "After"
}
export interface Phone {
    number?: string;
}
export interface Company {
    name?: string;
    id?: string | null;
}
/** Physical address */
export interface CommonAddress extends CommonAddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    /** Main address line, usually street and number as free text. */
    addressLine?: string | null;
    /** Country code. */
    country?: string | null;
    /** Subdivision shorthand. Usually, a short code (2 or 3 letters) that represents a state, region, prefecture, or province. e.g. NY */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** Free text providing more detailed address info. Usually contains Apt, Suite, and Floor. */
    addressLine2?: string | null;
}
/** @oneof */
export interface CommonAddressStreetOneOf {
    /** Street name and number. */
    streetAddress?: StreetAddress;
    /** Main address line, usually street and number as free text. */
    addressLine?: string | null;
}
export interface Subdivision {
    /** Short subdivision code. */
    code?: string;
    /** Subdivision full name. */
    name?: string;
}
export declare enum SubdivisionType {
    UNKNOWN_SUBDIVISION_TYPE = "UNKNOWN_SUBDIVISION_TYPE",
    /** State */
    ADMINISTRATIVE_AREA_LEVEL_1 = "ADMINISTRATIVE_AREA_LEVEL_1",
    /** County */
    ADMINISTRATIVE_AREA_LEVEL_2 = "ADMINISTRATIVE_AREA_LEVEL_2",
    /** City/town */
    ADMINISTRATIVE_AREA_LEVEL_3 = "ADMINISTRATIVE_AREA_LEVEL_3",
    /** Neighborhood/quarter */
    ADMINISTRATIVE_AREA_LEVEL_4 = "ADMINISTRATIVE_AREA_LEVEL_4",
    /** Street/block */
    ADMINISTRATIVE_AREA_LEVEL_5 = "ADMINISTRATIVE_AREA_LEVEL_5",
    /** ADMINISTRATIVE_AREA_LEVEL_0. Indicates the national political entity, and is typically the highest order type returned by the Geocoder. */
    COUNTRY = "COUNTRY"
}
/** Subdivision Concordance values */
export interface StandardDetails {
    /** subdivision iso-3166-2 code according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). e.g. US-NY, GB-SCT, NO-30 */
    iso31662?: string | null;
}
export interface InvoiceDates {
    /** use UTC midnight date to set the issue date according to the site time zone */
    issueDate?: Date | null;
    /** use UTC midnight date to set the due date according to the site time zone */
    dueDate?: Date | null;
    /** <a href="http://joda-time.sourceforge.net/timezones.html">Valid time zones</a> */
    timeZoneCode?: string | null;
    /**
     * ignored in request use in response to get the site time zone
     * @readonly
     */
    lastSeenDate?: Date | null;
}
export interface LineItems {
    lineItems?: LineItem[];
}
export interface LineItem {
    id?: string;
    name?: string;
    description?: string | null;
    price?: BigDecimalWrapper;
    taxedTotal?: BigDecimalWrapper;
    quantity?: BigDecimalWrapper;
    taxes?: LineItemTax[];
    /** The source of the line item */
    source?: Source;
    /** The line-item level metadata. */
    metadata?: LineItemMetaData;
}
export interface BigDecimalWrapper {
    serializedValue?: number;
}
export interface LineItemTax {
    name?: string;
    rate?: BigDecimalWrapper;
    code?: string | null;
}
export interface Source {
    /**
     * Source app or service ID.
     * @readonly
     */
    sourceId?: string;
    /**
     * App or service type.
     * @readonly
     */
    sourceType?: SourceType;
}
export declare enum SourceType {
    UNKNOWN_SOURCE_TYPE = "UNKNOWN_SOURCE_TYPE",
    WIX_APP = "WIX_APP",
    EXTERNAL = "EXTERNAL",
    ADMIN = "ADMIN",
    OTHER = "OTHER"
}
export interface LineItemMetaData {
    metadata?: Record<string, string>;
}
export interface Locale {
    /** ISO 639 alpha-2 or alpha-3 language code, or a language subtag */
    language?: string;
    /** An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code. */
    country?: string | null;
    invariant?: string | null;
}
export interface TotalPrice {
    /** the subtotal of the line items without the tax reduction */
    subtotal?: BigDecimalWrapper;
    /** the total price taking into account the itemized fees and the taxes */
    total?: BigDecimalWrapper;
    fees?: ItemizedFee[];
    discountAmount?: BigDecimalWrapper;
    taxedAmount?: BigDecimalWrapper;
}
export interface ItemizedFee {
    name?: string;
    price?: BigDecimalWrapper;
}
export interface Discount extends DiscountOneDiscountTypeOneOf {
    /** Discount as percentage value. */
    percentage?: BigDecimalWrapper;
}
/** @oneof */
export interface DiscountOneDiscountTypeOneOf {
    /** Discount as percentage value. */
    percentage?: BigDecimalWrapper;
}
export interface CalculatedTaxes {
    /** consider calculated or not - cannot enforce set */
    taxes?: CalculatedTax[];
}
export interface CalculatedTax {
    name?: string;
    rate?: BigDecimalWrapper;
    /** the costs on which the taxes are applied */
    taxable?: BigDecimalWrapper;
    /** the taxes as a result of the */
    taxed?: BigDecimalWrapper;
    code?: string | null;
}
export interface Payments {
    payments?: InvoicesPayment[];
}
export interface InvoicesPayment {
    /** document */
    id?: string;
    type?: string;
    amount?: BigDecimalWrapper;
    date?: Date | null;
    /**
     * The orderId of the order in cashier associated with the payment.
     * This field is populated for external payments that are charged by invoices via AddPayment endpoint.
     */
    orderId?: string | null;
    /**
     * The transactionId corresponding to the orderId of the payment which are returned by cashier.
     * This field is populated for external payments that are charged by invoices via AddPayment endpoint as well.
     */
    transactionId?: string | null;
}
export interface MetaData {
    notes?: string | null;
    legalTerms?: string | null;
    sourceUrl?: string | null;
    sourceProperties?: Record<string, string>;
    source?: string | null;
    sourceRefId?: string | null;
    /** Optional indicator whether to allow editing of the invoice by other applications other than the source. Default is true. */
    allowEditByOthers?: boolean | null;
}
export interface InvoiceDynamicPriceTotals {
    paidAmount?: BigDecimalWrapper;
    balance?: BigDecimalWrapper;
}
/**
 * A custom field value is used to add additional data to a financial document or to a financial document template.
 * The custom field value may be based on a custom field definition.
 */
export interface CustomFieldValue {
    /**
     * The unique id of the custom field value
     * @readonly
     */
    id?: string | null;
    /** The display name of the custom field value */
    displayName?: string;
    /** The optional namespace of the custom field value. This field may be used to indicate intended usage or source. */
    namespace?: string | null;
    /** The group of the custom field indicates its intended placement in the financial document */
    group?: CustomFieldGroup;
    /** The value of the custom field */
    value?: Value;
    /** The optional key of the custom field definition on which the custom field value is based */
    originCustomFieldKey?: string | null;
}
export declare enum CustomFieldGroup {
    UNKNOWN_CUSTOM_FIELD_GROUP = "UNKNOWN_CUSTOM_FIELD_GROUP",
    BUSINESS_DETAILS = "BUSINESS_DETAILS",
    CUSTOMER_DETAILS = "CUSTOMER_DETAILS",
    DOCUMENT = "DOCUMENT",
    FOOTER = "FOOTER",
    OTHER = "OTHER"
}
export interface Value {
    value?: string;
    valueType?: ValueType;
}
export declare enum ValueType {
    UNKNOWN_VALUE_TYPE = "UNKNOWN_VALUE_TYPE",
    STRING = "STRING",
    DATE = "DATE",
    BOOLEAN = "BOOLEAN",
    NUMBER = "NUMBER"
}
export interface Deposit {
    /** The flat amount of the deposit. The flat amount of the deposit must be less than the invoice total. */
    flatAmount?: string;
    /**
     * The read-only percentage value of the deposit.
     * It is computed according to the flat_amount and the invoice total and is rounded to 2 digits precision.
     * @readonly
     */
    percentage?: string;
    /** The type of the deposit. The default is FLAT. */
    type?: DepositType;
}
export declare enum DepositType {
    UNKNOWN = "UNKNOWN",
    FLAT = "FLAT",
    PERCENTAGE = "PERCENTAGE"
}
/**
 * InvoiceStatus allowed transitions based on current status:
 * Draft -> Deleted, Paid, Partially Paid, Sent
 * Sent -> Draft, Deleted, Void, Paid, Partially Paid, Processing, (Overdue)
 * Processing -> PartiallyPaid, Paid, Sent
 * Paid -> Void
 * PartiallyPaid -> Void, (PartialAndOverdue)
 * Void -> Deleted
 * Deleted
 */
export declare enum InvoiceStatus {
    Draft = "Draft",
    Sent = "Sent",
    Processing = "Processing",
    Paid = "Paid",
    Overdue = "Overdue",
    Void = "Void",
    Deleted = "Deleted",
    PartiallyPaid = "PartiallyPaid",
    PartialAndOverdue = "PartialAndOverdue"
}
export interface TriggerSideEffectsFromLegacyData {
    storeId?: string;
    orderId?: string;
    ordersExperiments?: OrdersExperiments;
}
export interface PreparePaymentCollectionResponseNonNullableFields {
    paymentGatewayOrderId: string;
}
interface PriceNonNullableFields {
    amount: string;
    formattedAmount: string;
}
export interface GetPaymentCollectabilityStatusResponseNonNullableFields {
    status: PaymentCollectabilityStatus;
    amount?: PriceNonNullableFields;
    authorizationSupported: boolean;
}
interface AuthorizationActionFailureDetailsNonNullableFields {
    failureCode: string;
}
interface AuthorizationCaptureNonNullableFields {
    status: AuthorizationCaptureStatus;
    amount?: PriceNonNullableFields;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields;
}
interface AuthorizationVoidNonNullableFields {
    status: AuthorizationVoidStatus;
    failureDetails?: AuthorizationActionFailureDetailsNonNullableFields;
    reason: Reason;
}
interface V1ScheduledActionNonNullableFields {
    actionType: ActionType;
}
interface AuthorizationDetailsNonNullableFields {
    delayedCapture: boolean;
    captures: AuthorizationCaptureNonNullableFields[];
    void?: AuthorizationVoidNonNullableFields;
    scheduledAction?: V1ScheduledActionNonNullableFields;
}
interface RegularPaymentDetailsNonNullableFields {
    offlinePayment: boolean;
    status: TransactionStatus;
    savedPaymentMethod: boolean;
    authorizationDetails?: AuthorizationDetailsNonNullableFields;
}
interface GiftCardPaymentDetailsNonNullableFields {
    giftCardPaymentId: string;
    giftCardId: string;
    appId: string;
    voided: boolean;
}
interface MembershipNameNonNullableFields {
    original: string;
}
interface MembershipPaymentDetailsNonNullableFields {
    membershipId: string;
    lineItemId: string;
    status: MembershipPaymentStatus;
    name?: MembershipNameNonNullableFields;
    voided: boolean;
    providerAppId: string;
}
interface WixReceiptInfoNonNullableFields {
    receiptId: string;
}
interface PaymentNonNullableFields {
    regularPaymentDetails?: RegularPaymentDetailsNonNullableFields;
    giftcardPaymentDetails?: GiftCardPaymentDetailsNonNullableFields;
    membershipPaymentDetails?: MembershipPaymentDetailsNonNullableFields;
    wixReceipt?: WixReceiptInfoNonNullableFields;
    amount?: PriceNonNullableFields;
    refundDisabled: boolean;
    supportReceiptGeneration: boolean;
}
interface RefundTransactionNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields;
    refundStatus: RefundStatus;
    externalRefund: boolean;
}
interface RefundItemNonNullableFields {
    lineItemId: string;
    quantity: number;
}
interface LineItemRefundNonNullableFields {
    lineItemId: string;
    quantity: number;
}
interface AdditionalFeeRefundNonNullableFields {
    additionalFeeId: string;
    amount?: PriceNonNullableFields;
}
interface ShippingRefundNonNullableFields {
    amount?: PriceNonNullableFields;
}
interface RefundDetailsNonNullableFields {
    items: RefundItemNonNullableFields[];
    shippingIncluded: boolean;
    lineItems: LineItemRefundNonNullableFields[];
    additionalFees: AdditionalFeeRefundNonNullableFields[];
    shipping?: ShippingRefundNonNullableFields;
}
interface AggregatedRefundSummaryNonNullableFields {
    requestedRefund?: PriceNonNullableFields;
    pendingRefund?: PriceNonNullableFields;
    refunded?: PriceNonNullableFields;
    failedRefundAmount?: PriceNonNullableFields;
    pending: boolean;
}
interface RefundNonNullableFields {
    id: string;
    transactions: RefundTransactionNonNullableFields[];
    details?: RefundDetailsNonNullableFields;
    summary?: AggregatedRefundSummaryNonNullableFields;
}
interface OrderTransactionsNonNullableFields {
    orderId: string;
    payments: PaymentNonNullableFields[];
    refunds: RefundNonNullableFields[];
}
export interface VoidAuthorizedPaymentsResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields;
}
export interface CaptureAuthorizedPaymentsResponseNonNullableFields {
    orderTransactions?: OrderTransactionsNonNullableFields;
}
interface ProductNameNonNullableFields {
    original: string;
}
interface CatalogReferenceNonNullableFields {
    catalogItemId: string;
    appId: string;
}
interface PlainTextValueNonNullableFields {
    original: string;
}
interface ColorNonNullableFields {
    original: string;
}
interface DescriptionLineNameNonNullableFields {
    original: string;
}
interface DescriptionLineNonNullableFields {
    plainText?: PlainTextValueNonNullableFields;
    colorInfo?: ColorNonNullableFields;
    plainTextValue?: PlainTextValueNonNullableFields;
    color: string;
    name?: DescriptionLineNameNonNullableFields;
    lineType: DescriptionLineType;
}
interface FocalPointNonNullableFields {
    x: number;
    y: number;
}
interface ImageNonNullableFields {
    id: string;
    url: string;
    height: number;
    width: number;
    focalPoint?: FocalPointNonNullableFields;
}
interface PhysicalPropertiesNonNullableFields {
    shippable: boolean;
}
interface ItemTypeNonNullableFields {
    preset: ItemTypeItemType;
    custom: string;
}
interface ItemTaxFullDetailsNonNullableFields {
    taxableAmount?: PriceNonNullableFields;
    taxRate: string;
    totalTax?: PriceNonNullableFields;
}
interface LineItemTaxBreakdownNonNullableFields {
    taxAmount?: PriceNonNullableFields;
    jurisdictionType: JurisdictionType;
    nonTaxableAmount?: PriceNonNullableFields;
    taxableAmount?: PriceNonNullableFields;
}
interface LineItemTaxInfoNonNullableFields {
    taxAmount?: PriceNonNullableFields;
    taxableAmount?: PriceNonNullableFields;
    taxIncludedInPrice: boolean;
    taxBreakdown: LineItemTaxBreakdownNonNullableFields[];
}
interface DigitalFileNonNullableFields {
    fileId: string;
}
interface FreeTrialPeriodNonNullableFields {
    frequency: SubscriptionFrequency;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields {
    frequency: SubscriptionFrequency;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields;
}
interface SubscriptionInfoNonNullableFields {
    cycleNumber: number;
    subscriptionOptionTitle: string;
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
}
interface PriceDescriptionNonNullableFields {
    original: string;
}
interface LocationAndQuantityNonNullableFields {
    id: string;
    quantity: number;
}
interface TaxableAddressNonNullableFields {
    addressType: TaxableAddressType;
}
interface OrderLineItemNonNullableFields {
    id: string;
    productName?: ProductNameNonNullableFields;
    catalogReference?: CatalogReferenceNonNullableFields;
    quantity: number;
    totalDiscount?: PriceNonNullableFields;
    descriptionLines: DescriptionLineNonNullableFields[];
    image?: ImageNonNullableFields;
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    itemType?: ItemTypeNonNullableFields;
    price?: PriceNonNullableFields;
    priceBeforeDiscounts?: PriceNonNullableFields;
    totalPriceBeforeTax?: PriceNonNullableFields;
    totalPriceAfterTax?: PriceNonNullableFields;
    paymentOption: PaymentOptionType;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    taxInfo?: LineItemTaxInfoNonNullableFields;
    digitalFile?: DigitalFileNonNullableFields;
    subscriptionInfo?: SubscriptionInfoNonNullableFields;
    priceDescription?: PriceDescriptionNonNullableFields;
    depositAmount?: PriceNonNullableFields;
    locations: LocationAndQuantityNonNullableFields[];
    lineItemPrice?: PriceNonNullableFields;
    taxableAddress?: TaxableAddressNonNullableFields;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
}
interface BuyerInfoNonNullableFields {
    visitorId: string;
    memberId: string;
}
interface PriceSummaryNonNullableFields {
    subtotal?: PriceNonNullableFields;
    shipping?: PriceNonNullableFields;
    tax?: PriceNonNullableFields;
    discount?: PriceNonNullableFields;
    totalPrice?: PriceNonNullableFields;
    total?: PriceNonNullableFields;
    totalWithGiftCard?: PriceNonNullableFields;
    totalWithoutGiftCard?: PriceNonNullableFields;
    totalAdditionalFees?: PriceNonNullableFields;
}
interface StreetAddressNonNullableFields {
    number: string;
    name: string;
    apt: string;
}
interface AddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields;
}
interface VatIdNonNullableFields {
    id: string;
    type: VatType;
}
interface FullAddressContactDetailsNonNullableFields {
    vatId?: VatIdNonNullableFields;
}
interface AddressWithContactNonNullableFields {
    address?: AddressNonNullableFields;
    contactDetails?: FullAddressContactDetailsNonNullableFields;
}
interface PickupAddressNonNullableFields {
    streetAddress?: StreetAddressNonNullableFields;
}
interface PickupDetailsNonNullableFields {
    address?: PickupAddressNonNullableFields;
    pickupMethod: PickupMethod;
}
interface DeliveryLogisticsNonNullableFields {
    shippingDestination?: AddressWithContactNonNullableFields;
    pickupDetails?: PickupDetailsNonNullableFields;
}
interface ShippingPriceNonNullableFields {
    price?: PriceNonNullableFields;
    totalPriceBeforeTax?: PriceNonNullableFields;
    totalPriceAfterTax?: PriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    discount?: PriceNonNullableFields;
}
interface V1ShippingInformationNonNullableFields {
    title: string;
    logistics?: DeliveryLogisticsNonNullableFields;
    cost?: ShippingPriceNonNullableFields;
}
interface TaxSummaryNonNullableFields {
    totalTax?: PriceNonNullableFields;
}
interface OrderTaxBreakdownNonNullableFields {
    taxName: string;
    taxType: string;
    jurisdiction: string;
    jurisdictionType: JurisdictionType;
    rate: string;
    aggregatedTaxAmount?: PriceNonNullableFields;
    aggregatedTaxableAmount?: PriceNonNullableFields;
}
interface OrderTaxInfoNonNullableFields {
    totalTax?: PriceNonNullableFields;
    taxBreakdown: OrderTaxBreakdownNonNullableFields[];
}
interface CouponNonNullableFields {
    id: string;
    code: string;
    name: string;
    amount?: PriceNonNullableFields;
}
interface MerchantDiscountNonNullableFields {
    discountReason: DiscountReason;
    amount?: PriceNonNullableFields;
}
interface DiscountRuleNameNonNullableFields {
    original: string;
}
interface DiscountRuleNonNullableFields {
    id: string;
    name?: DiscountRuleNameNonNullableFields;
    amount?: PriceNonNullableFields;
}
interface LineItemDiscountNonNullableFields {
    id: string;
    totalDiscount?: PriceNonNullableFields;
}
interface AppliedDiscountNonNullableFields {
    coupon?: CouponNonNullableFields;
    merchantDiscount?: MerchantDiscountNonNullableFields;
    discountRule?: DiscountRuleNonNullableFields;
    discountType: DiscountType;
    lineItemIds: string[];
    lineItemDiscounts: LineItemDiscountNonNullableFields[];
}
interface CustomActivityNonNullableFields {
    appId: string;
    type: string;
}
interface MerchantCommentNonNullableFields {
    message: string;
}
interface OrderRefundedNonNullableFields {
    manual: boolean;
    amount?: PriceNonNullableFields;
    reason: string;
}
interface OrderCreatedFromExchangeNonNullableFields {
    originalOrderId: string;
}
interface LineItemExchangeDataNonNullableFields {
    lineItemId: string;
    quantity: number;
}
interface NewExchangeOrderCreatedNonNullableFields {
    exchangeOrderId: string;
    lineItems: LineItemExchangeDataNonNullableFields[];
}
interface LineItemQuantityChangeNonNullableFields {
    originalQuantity: number;
    newQuantity: number;
    diff: number;
    deltaType: LineItemQuantityChangeType;
}
interface LineItemPriceChangeNonNullableFields {
    originalPrice?: PriceNonNullableFields;
    newPrice?: PriceNonNullableFields;
}
interface LineItemChangesNonNullableFields {
    id: string;
    name?: ProductNameNonNullableFields;
    quantity?: LineItemQuantityChangeNonNullableFields;
    price?: LineItemPriceChangeNonNullableFields;
}
interface ManagedLineItemNonNullableFields {
    id: string;
    name?: ProductNameNonNullableFields;
    quantity: number;
}
interface TranslatedValueNonNullableFields {
    original: string;
}
interface LineItemAmountNonNullableFields {
    id: string;
    name?: ProductNameNonNullableFields;
    amount?: PriceNonNullableFields;
}
interface ManagedDiscountNonNullableFields {
    id: string;
    name?: TranslatedValueNonNullableFields;
    affectedLineItems: LineItemAmountNonNullableFields[];
    totalAmount?: PriceNonNullableFields;
}
interface ManagedAdditionalFeeNonNullableFields {
    id: string;
    name?: TranslatedValueNonNullableFields;
    affectedLineItems: LineItemAmountNonNullableFields[];
    totalAmount?: PriceNonNullableFields;
}
interface TotalPriceChangeNonNullableFields {
    originalTotal?: PriceNonNullableFields;
    newTotal?: PriceNonNullableFields;
}
interface ShippingInformationNonNullableFields {
    total?: PriceNonNullableFields;
    shippingTitle: string;
}
interface ShippingInformationChangeNonNullableFields {
    originalShippingInfo?: ShippingInformationNonNullableFields;
    newShippingInfo?: ShippingInformationNonNullableFields;
}
interface OrderChangeNonNullableFields {
    lineItemChanged?: LineItemChangesNonNullableFields;
    lineItemAdded?: ManagedLineItemNonNullableFields;
    lineItemRemoved?: ManagedLineItemNonNullableFields;
    discountAdded?: ManagedDiscountNonNullableFields;
    discountRemoved?: ManagedDiscountNonNullableFields;
    additionalFeeAdded?: ManagedAdditionalFeeNonNullableFields;
    additionalFeeRemoved?: ManagedAdditionalFeeNonNullableFields;
    totalPriceChanged?: TotalPriceChangeNonNullableFields;
    shippingInformationChanged?: ShippingInformationChangeNonNullableFields;
}
interface DraftOrderChangesAppliedNonNullableFields {
    draftOrderId: string;
    changes: OrderChangeNonNullableFields[];
}
interface SavedPaymentMethodNonNullableFields {
    name: string;
}
interface AuthorizedPaymentCreatedNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields;
}
interface AuthorizedPaymentCapturedNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields;
}
interface AuthorizedPaymentVoidedNonNullableFields {
    paymentId: string;
    amount?: PriceNonNullableFields;
}
interface RegularPaymentRefundNonNullableFields {
    amount?: PriceNonNullableFields;
}
interface GiftCardPaymentRefundNonNullableFields {
    amount?: PriceNonNullableFields;
}
interface RefundedPaymentNonNullableFields {
    regular?: RegularPaymentRefundNonNullableFields;
    giftCard?: GiftCardPaymentRefundNonNullableFields;
    paymentId: string;
    externalRefund: boolean;
}
interface RefundInitiatedNonNullableFields {
    refundId: string;
    amount?: PriceNonNullableFields;
    payments: RefundedPaymentNonNullableFields[];
}
interface PaymentRefundedNonNullableFields {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields;
}
interface PaymentRefundFailedNonNullableFields {
    refundId: string;
    payment?: RefundedPaymentNonNullableFields;
}
interface RefundedAsStoreCreditNonNullableFields {
    amount?: PriceNonNullableFields;
}
interface RegularPaymentNonNullableFields {
    amount?: PriceNonNullableFields;
}
interface PaymentPendingNonNullableFields {
    regular?: RegularPaymentNonNullableFields;
    paymentId: string;
}
interface PaymentCanceledNonNullableFields {
    regular?: RegularPaymentNonNullableFields;
    paymentId: string;
}
interface PaymentDeclinedNonNullableFields {
    regular?: RegularPaymentNonNullableFields;
    paymentId: string;
}
interface WixReceiptNonNullableFields {
    receiptId: string;
}
interface ReceiptCreatedNonNullableFields {
    wixReceipt?: WixReceiptNonNullableFields;
    paymentId: string;
}
interface ReceiptSentNonNullableFields {
    wixReceipt?: WixReceiptNonNullableFields;
    paymentId: string;
}
interface ActivityNonNullableFields {
    customActivity?: CustomActivityNonNullableFields;
    merchantComment?: MerchantCommentNonNullableFields;
    orderRefunded?: OrderRefundedNonNullableFields;
    orderCreatedFromExchange?: OrderCreatedFromExchangeNonNullableFields;
    newExchangeOrderCreated?: NewExchangeOrderCreatedNonNullableFields;
    draftOrderChangesApplied?: DraftOrderChangesAppliedNonNullableFields;
    savedPaymentMethod?: SavedPaymentMethodNonNullableFields;
    authorizedPaymentCreated?: AuthorizedPaymentCreatedNonNullableFields;
    authorizedPaymentCaptured?: AuthorizedPaymentCapturedNonNullableFields;
    authorizedPaymentVoided?: AuthorizedPaymentVoidedNonNullableFields;
    refundInitiated?: RefundInitiatedNonNullableFields;
    paymentRefunded?: PaymentRefundedNonNullableFields;
    paymentRefundFailed?: PaymentRefundFailedNonNullableFields;
    refundedAsStoreCredit?: RefundedAsStoreCreditNonNullableFields;
    paymentPending?: PaymentPendingNonNullableFields;
    paymentCanceled?: PaymentCanceledNonNullableFields;
    paymentDeclined?: PaymentDeclinedNonNullableFields;
    receiptCreated?: ReceiptCreatedNonNullableFields;
    receiptSent?: ReceiptSentNonNullableFields;
    type: ActivityType;
}
interface CreatedByNonNullableFields {
    userId: string;
    memberId: string;
    visitorId: string;
    appId: string;
}
interface ChannelInfoNonNullableFields {
    type: ChannelType;
}
interface CustomFieldNonNullableFields {
    title: string;
}
interface BalanceNonNullableFields {
    amount: string;
    formattedAmount: string;
}
interface BalanceSummaryNonNullableFields {
    balance?: BalanceNonNullableFields;
    paid?: PriceNonNullableFields;
    refunded?: PriceNonNullableFields;
    authorized?: PriceNonNullableFields;
    pendingRefund?: PriceNonNullableFields;
    pending?: PriceNonNullableFields;
}
interface AdditionalFeeNonNullableFields {
    name: string;
    price?: PriceNonNullableFields;
    taxDetails?: ItemTaxFullDetailsNonNullableFields;
    priceBeforeTax?: PriceNonNullableFields;
    priceAfterTax?: PriceNonNullableFields;
    id: string;
    lineItemIds: string[];
}
interface TagListNonNullableFields {
    tagIds: string[];
}
interface TagsNonNullableFields {
    privateTags?: TagListNonNullableFields;
    tags?: TagListNonNullableFields;
}
interface LocationNonNullableFields {
    id: string;
    name: string;
}
interface OrderNonNullableFields {
    number: string;
    lineItems: OrderLineItemNonNullableFields[];
    buyerInfo?: BuyerInfoNonNullableFields;
    paymentStatus: PaymentStatus;
    fulfillmentStatus: FulfillmentStatus;
    weightUnit: WeightUnit;
    taxIncludedInPrices: boolean;
    priceSummary?: PriceSummaryNonNullableFields;
    billingInfo?: AddressWithContactNonNullableFields;
    shippingInfo?: V1ShippingInformationNonNullableFields;
    status: OrderStatus;
    taxSummary?: TaxSummaryNonNullableFields;
    taxInfo?: OrderTaxInfoNonNullableFields;
    appliedDiscounts: AppliedDiscountNonNullableFields[];
    activities: ActivityNonNullableFields[];
    attributionSource: AttributionSource;
    createdBy?: CreatedByNonNullableFields;
    channelInfo?: ChannelInfoNonNullableFields;
    customFields: CustomFieldNonNullableFields[];
    isInternalOrderCreate: boolean;
    payNow?: PriceSummaryNonNullableFields;
    balanceSummary?: BalanceSummaryNonNullableFields;
    additionalFees: AdditionalFeeNonNullableFields[];
    recipientInfo?: AddressWithContactNonNullableFields;
    tags?: TagsNonNullableFields;
    businessLocation?: LocationNonNullableFields;
    payAfterFreeTrial?: PriceSummaryNonNullableFields;
}
export interface GetOrderResponseNonNullableFields {
    order?: OrderNonNullableFields;
}
export interface SearchOrdersResponseNonNullableFields {
    orders: OrderNonNullableFields[];
}
export interface CreateOrderResponseNonNullableFields {
    order?: OrderNonNullableFields;
}
export interface UpdateOrderResponseNonNullableFields {
    order?: OrderNonNullableFields;
}
interface ApplicationErrorNonNullableFields {
    code: string;
    description: string;
}
interface ItemMetadataNonNullableFields {
    originalIndex: number;
    success: boolean;
    error?: ApplicationErrorNonNullableFields;
}
interface BulkOrderResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
    item?: OrderNonNullableFields;
}
interface BulkActionMetadataNonNullableFields {
    totalSuccesses: number;
    totalFailures: number;
    undetailedFailures: number;
}
export interface BulkUpdateOrdersResponseNonNullableFields {
    results: BulkOrderResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
export interface CancelOrderResponseNonNullableFields {
    order?: OrderNonNullableFields;
}
interface BulkUpdateOrderTagsResultNonNullableFields {
    itemMetadata?: ItemMetadataNonNullableFields;
}
export interface BulkUpdateOrderTagsResponseNonNullableFields {
    results: BulkUpdateOrderTagsResultNonNullableFields[];
    bulkActionMetadata?: BulkActionMetadataNonNullableFields;
}
export {};
