import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1Order from './ecom-v1-order-orders.http.js';
// @ts-ignore
import { transformSDKAddressToRESTAddress } from '@wix/sdk-runtime/transformations/address';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformSDKImageToRESTImage } from '@wix/sdk-runtime/transformations/image';
import { transformRESTImageToSDKImage } from '@wix/sdk-runtime/transformations/image';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var DescriptionLineType;
(function (DescriptionLineType) {
    /** Unrecognized type. */
    DescriptionLineType["UNRECOGNISED"] = "UNRECOGNISED";
    /** Plain text type. */
    DescriptionLineType["PLAIN_TEXT"] = "PLAIN_TEXT";
    /** Color type. */
    DescriptionLineType["COLOR"] = "COLOR";
})(DescriptionLineType || (DescriptionLineType = {}));
export var ItemTypeItemType;
(function (ItemTypeItemType) {
    ItemTypeItemType["UNRECOGNISED"] = "UNRECOGNISED";
    ItemTypeItemType["PHYSICAL"] = "PHYSICAL";
    ItemTypeItemType["DIGITAL"] = "DIGITAL";
    ItemTypeItemType["GIFT_CARD"] = "GIFT_CARD";
    ItemTypeItemType["SERVICE"] = "SERVICE";
})(ItemTypeItemType || (ItemTypeItemType = {}));
/** Type of selected payment option for catalog item */
export var PaymentOptionType;
(function (PaymentOptionType) {
    /** The entire payment for this item happens as part of the checkout. */
    PaymentOptionType["FULL_PAYMENT_ONLINE"] = "FULL_PAYMENT_ONLINE";
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    PaymentOptionType["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    PaymentOptionType["MEMBERSHIP"] = "MEMBERSHIP";
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    PaymentOptionType["DEPOSIT_ONLINE"] = "DEPOSIT_ONLINE";
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    PaymentOptionType["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
})(PaymentOptionType || (PaymentOptionType = {}));
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
export var JurisdictionType;
(function (JurisdictionType) {
    JurisdictionType["UNDEFINED"] = "UNDEFINED";
    JurisdictionType["COUNTRY"] = "COUNTRY";
    JurisdictionType["STATE"] = "STATE";
    JurisdictionType["COUNTY"] = "COUNTY";
    JurisdictionType["CITY"] = "CITY";
    JurisdictionType["SPECIAL"] = "SPECIAL";
})(JurisdictionType || (JurisdictionType = {}));
/** Frequency unit of recurring payment */
export var SubscriptionFrequency;
(function (SubscriptionFrequency) {
    SubscriptionFrequency["UNDEFINED"] = "UNDEFINED";
    SubscriptionFrequency["DAY"] = "DAY";
    SubscriptionFrequency["WEEK"] = "WEEK";
    SubscriptionFrequency["MONTH"] = "MONTH";
    SubscriptionFrequency["YEAR"] = "YEAR";
})(SubscriptionFrequency || (SubscriptionFrequency = {}));
export var TaxableAddressType;
(function (TaxableAddressType) {
    TaxableAddressType["UNKNOWN_TAXABLE_ADDRESS"] = "UNKNOWN_TAXABLE_ADDRESS";
    TaxableAddressType["BUSINESS"] = "BUSINESS";
    TaxableAddressType["BILLING"] = "BILLING";
    TaxableAddressType["SHIPPING"] = "SHIPPING";
})(TaxableAddressType || (TaxableAddressType = {}));
export var PaymentStatus;
(function (PaymentStatus) {
    PaymentStatus["UNSPECIFIED"] = "UNSPECIFIED";
    /**
     * `NOT_PAID` can apply to an order made online, but not yet paid. In such cases `order.status` will be `INITIALIZED`.
     * This status also applies when an offline order needs to be manually marked as paid. In such cases `order.status` will be `APPROVED`.
     */
    PaymentStatus["NOT_PAID"] = "NOT_PAID";
    /** All required payments associated with this order are paid. */
    PaymentStatus["PAID"] = "PAID";
    /** Order partially refunded, but the refunded amount is less than the order's total price. See `order.balanceSummary` for more details. */
    PaymentStatus["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
    /** Order fully refunded. Refund amount equals total price. See `order.balanceSummary` for more details. */
    PaymentStatus["FULLY_REFUNDED"] = "FULLY_REFUNDED";
    /**
     * All payments pending.
     *
     * This can happen with two-step payments, when a payment requires manual review, or when a payment is in progress and will be concluded shortly.
     * Learn more about [pending orders](https://support.wix.com/en/article/pending-orders).
     */
    PaymentStatus["PENDING"] = "PENDING";
    /** At least one payment received and approved, but it covers less than the order's total price. See `order.balanceSummary` for more details. */
    PaymentStatus["PARTIALLY_PAID"] = "PARTIALLY_PAID";
    /**
     * Payment received, but not yet confirmed by the payment provider.
     *
     * In most cases, when a payment provider is holding payment it's because setup hasn't been successfully completed by the merchant/site owner.
     * To solve this, the merchant/site owner should log in to the payment provider's dashboard and make sure their account is set up correctly, or contact their support for further assistance.
     * @documentationMaturity preview
     */
    PaymentStatus["PENDING_MERCHANT"] = "PENDING_MERCHANT";
    /**
     * One or more payments canceled.
     * @documentationMaturity preview
     */
    PaymentStatus["CANCELED"] = "CANCELED";
    /**
     * One or more payments declined.
     * @documentationMaturity preview
     */
    PaymentStatus["DECLINED"] = "DECLINED";
})(PaymentStatus || (PaymentStatus = {}));
export var FulfillmentStatus;
(function (FulfillmentStatus) {
    /** None of the order items are fulfilled or the order was manually marked as unfulfilled. */
    FulfillmentStatus["NOT_FULFILLED"] = "NOT_FULFILLED";
    /**
     * All of the order items are fulfilled or the order was manually marked as fulfilled.
     * Orders without shipping info are fulfilled automatically.
     */
    FulfillmentStatus["FULFILLED"] = "FULFILLED";
    /** Some, but not all, of the order items are fulfilled. */
    FulfillmentStatus["PARTIALLY_FULFILLED"] = "PARTIALLY_FULFILLED";
})(FulfillmentStatus || (FulfillmentStatus = {}));
export var WeightUnit;
(function (WeightUnit) {
    /** Weight unit can't be classified, due to an error */
    WeightUnit["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
    /** Kilograms */
    WeightUnit["KG"] = "KG";
    /** Pounds */
    WeightUnit["LB"] = "LB";
})(WeightUnit || (WeightUnit = {}));
/** tax info types */
export var VatType;
(function (VatType) {
    VatType["UNSPECIFIED"] = "UNSPECIFIED";
    /** CPF - for individual tax payers. */
    VatType["CPF"] = "CPF";
    /** CNPJ - for corporations */
    VatType["CNPJ"] = "CNPJ";
})(VatType || (VatType = {}));
export var PickupMethod;
(function (PickupMethod) {
    PickupMethod["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
    PickupMethod["STORE_PICKUP"] = "STORE_PICKUP";
    PickupMethod["PICKUP_POINT"] = "PICKUP_POINT";
})(PickupMethod || (PickupMethod = {}));
export var OrderStatus;
(function (OrderStatus) {
    /** Order created, but not yet approved or canceled. */
    OrderStatus["INITIALIZED"] = "INITIALIZED";
    /**
     * Order approved.
     *
     * This happens when either an online payment is received **or** when `order.priceSummary.total = 0` (a zero-total order).
     * Offline orders (cash payment) are automatically approved.
     */
    OrderStatus["APPROVED"] = "APPROVED";
    /** Order canceled by the user. */
    OrderStatus["CANCELED"] = "CANCELED";
    /**
     * Order pending.
     * @documentationMaturity preview
     */
    OrderStatus["PENDING"] = "PENDING";
    /**
     * Order rejected.
     *
     * This happens when pending payments fail.
     * @documentationMaturity preview
     */
    OrderStatus["REJECTED"] = "REJECTED";
})(OrderStatus || (OrderStatus = {}));
export var DiscountType;
(function (DiscountType) {
    DiscountType["GLOBAL"] = "GLOBAL";
    DiscountType["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
    DiscountType["SHIPPING"] = "SHIPPING";
})(DiscountType || (DiscountType = {}));
export var DiscountReason;
(function (DiscountReason) {
    DiscountReason["UNSPECIFIED"] = "UNSPECIFIED";
    DiscountReason["EXCHANGED_ITEMS"] = "EXCHANGED_ITEMS";
})(DiscountReason || (DiscountReason = {}));
export var LineItemQuantityChangeType;
(function (LineItemQuantityChangeType) {
    /** Quantity increased. */
    LineItemQuantityChangeType["QUANTITY_INCREASED"] = "QUANTITY_INCREASED";
    /** Quantity decreased. */
    LineItemQuantityChangeType["QUANTITY_DECREASED"] = "QUANTITY_DECREASED";
})(LineItemQuantityChangeType || (LineItemQuantityChangeType = {}));
export var ActivityType;
(function (ActivityType) {
    ActivityType["ORDER_REFUNDED"] = "ORDER_REFUNDED";
    ActivityType["ORDER_PLACED"] = "ORDER_PLACED";
    ActivityType["ORDER_PAID"] = "ORDER_PAID";
    ActivityType["ORDER_FULFILLED"] = "ORDER_FULFILLED";
    ActivityType["ORDER_NOT_FULFILLED"] = "ORDER_NOT_FULFILLED";
    ActivityType["ORDER_CANCELED"] = "ORDER_CANCELED";
    ActivityType["DOWNLOAD_LINK_SENT"] = "DOWNLOAD_LINK_SENT";
    ActivityType["TRACKING_NUMBER_ADDED"] = "TRACKING_NUMBER_ADDED";
    ActivityType["TRACKING_NUMBER_EDITED"] = "TRACKING_NUMBER_EDITED";
    ActivityType["TRACKING_LINK_ADDED"] = "TRACKING_LINK_ADDED";
    ActivityType["SHIPPING_CONFIRMATION_EMAIL_SENT"] = "SHIPPING_CONFIRMATION_EMAIL_SENT";
    ActivityType["INVOICE_ADDED"] = "INVOICE_ADDED";
    ActivityType["INVOICE_REMOVED"] = "INVOICE_REMOVED";
    ActivityType["INVOICE_SENT"] = "INVOICE_SENT";
    ActivityType["FULFILLER_EMAIL_SENT"] = "FULFILLER_EMAIL_SENT";
    ActivityType["SHIPPING_ADDRESS_EDITED"] = "SHIPPING_ADDRESS_EDITED";
    ActivityType["EMAIL_EDITED"] = "EMAIL_EDITED";
    ActivityType["PICKUP_READY_EMAIL_SENT"] = "PICKUP_READY_EMAIL_SENT";
    ActivityType["CUSTOM_ACTIVITY"] = "CUSTOM_ACTIVITY";
    ActivityType["MERCHANT_COMMENT"] = "MERCHANT_COMMENT";
    ActivityType["ORDER_CREATED_FROM_EXCHANGE"] = "ORDER_CREATED_FROM_EXCHANGE";
    ActivityType["NEW_EXCHANGE_ORDER_CREATED"] = "NEW_EXCHANGE_ORDER_CREATED";
    ActivityType["ORDER_PARTIALLY_PAID"] = "ORDER_PARTIALLY_PAID";
    ActivityType["DRAFT_ORDER_CHANGES_APPLIED"] = "DRAFT_ORDER_CHANGES_APPLIED";
    ActivityType["SAVED_PAYMENT_METHOD"] = "SAVED_PAYMENT_METHOD";
    /** @documentationMaturity preview */
    ActivityType["PAYMENT_PENDING"] = "PAYMENT_PENDING";
    /** @documentationMaturity preview */
    ActivityType["PAYMENT_CANCELED"] = "PAYMENT_CANCELED";
    /** @documentationMaturity preview */
    ActivityType["PAYMENT_DECLINED"] = "PAYMENT_DECLINED";
    /** @documentationMaturity preview */
    ActivityType["ORDER_PENDING"] = "ORDER_PENDING";
    /** @documentationMaturity preview */
    ActivityType["ORDER_REJECTED"] = "ORDER_REJECTED";
})(ActivityType || (ActivityType = {}));
export var AttributionSource;
(function (AttributionSource) {
    AttributionSource["UNSPECIFIED"] = "UNSPECIFIED";
    AttributionSource["FACEBOOK_ADS"] = "FACEBOOK_ADS";
})(AttributionSource || (AttributionSource = {}));
export var ChannelType;
(function (ChannelType) {
    /** Unspecified sales channel. This value is not supported. */
    ChannelType["UNSPECIFIED"] = "UNSPECIFIED";
    /** A web client. */
    ChannelType["WEB"] = "WEB";
    /** [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395). */
    ChannelType["POS"] = "POS";
    /** [eBay shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop). */
    ChannelType["EBAY"] = "EBAY";
    /** [Amazon shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop). */
    ChannelType["AMAZON"] = "AMAZON";
    /** Other sales platform. */
    ChannelType["OTHER_PLATFORM"] = "OTHER_PLATFORM";
    /** [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview). */
    ChannelType["WIX_APP_STORE"] = "WIX_APP_STORE";
    /** Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings) */
    ChannelType["WIX_INVOICES"] = "WIX_INVOICES";
    /** Wix merchant backoffice. */
    ChannelType["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
    /** Wish sales channel. */
    ChannelType["WISH"] = "WISH";
    /** [ClassPass sales channel](https://support.wix.com/en/article/wix-bookings-letting-clients-book-your-services-with-classpass). */
    ChannelType["CLASS_PASS"] = "CLASS_PASS";
    /** Global-E sales channel. */
    ChannelType["GLOBAL_E"] = "GLOBAL_E";
    /** [Facebook shop](https://support.wix.com/en/article/wix-stores-changes-to-facebook-shops). */
    ChannelType["FACEBOOK"] = "FACEBOOK";
    /** [Etsy sales channel](https://support.wix.com/en/article/wix-stores-request-adding-etsy-as-a-sales-channel). */
    ChannelType["ETSY"] = "ETSY";
    /** [TikTok sales channel](https://support.wix.com/en/article/wix-stores-request-adding-tiktok-as-a-sales-channel). */
    ChannelType["TIKTOK"] = "TIKTOK";
    /** [Faire marketplace integration](https://support.wix.com/en/article/wix-stores-creating-a-faire-store-using-the-faire-integration-app). */
    ChannelType["FAIRE_COM"] = "FAIRE_COM";
})(ChannelType || (ChannelType = {}));
/**
 * Represents the actual state of the application on site. Do not confuse with the State in the old MetaSiteDTO,
 * which has less values and doesn't have 1-to-1 correspondence with this one (this one is exact and correct!)
 */
export var State;
(function (State) {
    State["UNKNOWN"] = "UNKNOWN";
    /** App is installed on a site. */
    State["ENABLED"] = "ENABLED";
    /** App is removed from a site (but we preserve it just in case). */
    State["DISABLED"] = "DISABLED";
    /** App is in "demo" mode, meaning that it's in read-only mode (it's in a template OR not installed yet). */
    State["TEMPLATE"] = "TEMPLATE";
    /** App is not installed, there is a user intention for it only (user will see the pimpl in the editor). */
    State["PENDING"] = "PENDING";
})(State || (State = {}));
export var Namespace;
(function (Namespace) {
    Namespace["UNKNOWN_NAMESPACE"] = "UNKNOWN_NAMESPACE";
    /** Default namespace for UGC sites. MetaSites with this namespace will be shown in a user's site list by default. */
    Namespace["WIX"] = "WIX";
    /** ShoutOut stand alone product. These are siteless (no actual Wix site, no HtmlWeb). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["SHOUT_OUT"] = "SHOUT_OUT";
    /** MetaSites created by the Albums product, they appear as part of the Albums app. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["ALBUMS"] = "ALBUMS";
    /** Part of the WixStores migration flow, a user tries to migrate and gets this site to view and if the user likes it then stores removes this namespace and deletes the old site with the old stores. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["WIX_STORES_TEST_DRIVE"] = "WIX_STORES_TEST_DRIVE";
    /** Hotels standalone (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["HOTELS"] = "HOTELS";
    /** Clubs siteless MetaSites, a club without a wix website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["CLUBS"] = "CLUBS";
    /** A partially created ADI website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["ONBOARDING_DRAFT"] = "ONBOARDING_DRAFT";
    /** AppBuilder for AppStudio / shmite (c). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["DEV_SITE"] = "DEV_SITE";
    /** LogoMaker websites offered to the user after logo purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["LOGOS"] = "LOGOS";
    /** VideoMaker websites offered to the user after video purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["VIDEO_MAKER"] = "VIDEO_MAKER";
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["PARTNER_DASHBOARD"] = "PARTNER_DASHBOARD";
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["DEV_CENTER_COMPANY"] = "DEV_CENTER_COMPANY";
    /**
     * A draft created by HTML editor on open. Upon "first save" it will be moved to be of WIX domain.
     *
     * Meta site with this namespace will *not* be shown in a user's site list by default.
     */
    Namespace["HTML_DRAFT"] = "HTML_DRAFT";
    /**
     * the user-journey for Fitness users who want to start from managing their business instead of designing their website.
     * Will be accessible from Site List and will not have a website app.
     * Once the user attaches a site, the site will become a regular wixsite.
     */
    Namespace["SITELESS_BUSINESS"] = "SITELESS_BUSINESS";
    /** Belongs to "strategic products" company. Supports new product in the creator's economy space. */
    Namespace["CREATOR_ECONOMY"] = "CREATOR_ECONOMY";
    /** It is to be used in the Business First efforts. */
    Namespace["DASHBOARD_FIRST"] = "DASHBOARD_FIRST";
    /** Bookings business flow with no site. */
    Namespace["ANYWHERE"] = "ANYWHERE";
    /** Namespace for Headless Backoffice with no editor */
    Namespace["HEADLESS"] = "HEADLESS";
    /**
     * Namespace for master site that will exist in parent account that will be referenced by subaccounts
     * The site will be used for account level CSM feature for enterprise
     */
    Namespace["ACCOUNT_MASTER_CMS"] = "ACCOUNT_MASTER_CMS";
    /** Rise.ai Siteless account management for Gift Cards and Store Credit. */
    Namespace["RISE"] = "RISE";
    /**
     * As part of the branded app new funnel, users now can create a meta site that will be branded app first.
     * There's a blank site behind the scene but it's blank).
     * The Mobile company will be the owner of this namespace.
     */
    Namespace["BRANDED_FIRST"] = "BRANDED_FIRST";
    /** Nownia.com Siteless account management for Ai Scheduling Assistant. */
    Namespace["NOWNIA"] = "NOWNIA";
    /**
     * UGC Templates are templates that are created by users for personal use and to sale to other users.
     * The Partners company owns this namespace.
     */
    Namespace["UGC_TEMPLATE"] = "UGC_TEMPLATE";
    /** Codux Headless Sites */
    Namespace["CODUX"] = "CODUX";
    /** Bobb - AI Design Creator. */
    Namespace["MEDIA_DESIGN_CREATOR"] = "MEDIA_DESIGN_CREATOR";
    /**
     * Shared Blog Site is a unique single site across Enterprise account,
     * This site will hold all Blog posts related to the Marketing product.
     */
    Namespace["SHARED_BLOG_ENTERPRISE"] = "SHARED_BLOG_ENTERPRISE";
})(Namespace || (Namespace = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var TransactionStatus;
(function (TransactionStatus) {
    TransactionStatus["UNDEFINED"] = "UNDEFINED";
    TransactionStatus["APPROVED"] = "APPROVED";
    TransactionStatus["PENDING"] = "PENDING";
    TransactionStatus["PENDING_MERCHANT"] = "PENDING_MERCHANT";
    TransactionStatus["CANCELED"] = "CANCELED";
    TransactionStatus["DECLINED"] = "DECLINED";
    TransactionStatus["REFUNDED"] = "REFUNDED";
    TransactionStatus["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
    TransactionStatus["AUTHORIZED"] = "AUTHORIZED";
    TransactionStatus["VOIDED"] = "VOIDED";
})(TransactionStatus || (TransactionStatus = {}));
export var AuthorizationCaptureStatus;
(function (AuthorizationCaptureStatus) {
    AuthorizationCaptureStatus["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    /** Capture operation still in progress. */
    AuthorizationCaptureStatus["PENDING"] = "PENDING";
    /** Capture operation succeeded. */
    AuthorizationCaptureStatus["SUCCEEDED"] = "SUCCEEDED";
    /** Capture operation failed. */
    AuthorizationCaptureStatus["FAILED"] = "FAILED";
})(AuthorizationCaptureStatus || (AuthorizationCaptureStatus = {}));
export var AuthorizationVoidStatus;
(function (AuthorizationVoidStatus) {
    AuthorizationVoidStatus["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    /** Void operation still in progress. */
    AuthorizationVoidStatus["PENDING"] = "PENDING";
    /** Void operation succeeded. */
    AuthorizationVoidStatus["SUCCEEDED"] = "SUCCEEDED";
    /** Void operation failed. */
    AuthorizationVoidStatus["FAILED"] = "FAILED";
})(AuthorizationVoidStatus || (AuthorizationVoidStatus = {}));
/** Reason the authorization was voided. */
export var Reason;
(function (Reason) {
    Reason["UNKNOWN_REASON"] = "UNKNOWN_REASON";
    /** Authorization was voided by user. */
    Reason["MANUAL"] = "MANUAL";
    /** Authorization passed execution date. */
    Reason["SCHEDULED"] = "SCHEDULED";
})(Reason || (Reason = {}));
export var ActionType;
(function (ActionType) {
    ActionType["UNKNOWN_ACTION_TYPE"] = "UNKNOWN_ACTION_TYPE";
    ActionType["VOID"] = "VOID";
    ActionType["CAPTURE"] = "CAPTURE";
})(ActionType || (ActionType = {}));
export var MembershipPaymentStatus;
(function (MembershipPaymentStatus) {
    /** Payment was charged. */
    MembershipPaymentStatus["CHARGED"] = "CHARGED";
    /** The attempt to charge the payment failed, for example, due to lack of credits. */
    MembershipPaymentStatus["CHARGE_FAILED"] = "CHARGE_FAILED";
})(MembershipPaymentStatus || (MembershipPaymentStatus = {}));
/** Refund transaction status. */
export var RefundStatus;
(function (RefundStatus) {
    /** Refund was initiated on payment provider side. PENDING status was assigned by provider. */
    RefundStatus["PENDING"] = "PENDING";
    /** Refund transaction succeeded. */
    RefundStatus["SUCCEEDED"] = "SUCCEEDED";
    /** Refund transaction failed. */
    RefundStatus["FAILED"] = "FAILED";
    /** Refund request acknowledged, and will be executed soon. */
    RefundStatus["SCHEDULED"] = "SCHEDULED";
    /** Refund was initiated on payment provider side. */
    RefundStatus["STARTED"] = "STARTED";
})(RefundStatus || (RefundStatus = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
export var VersioningMode;
(function (VersioningMode) {
    /** use default versioning mode agreed with search team */
    VersioningMode["DEFAULT"] = "DEFAULT";
    /** execute only if version is greater than existing */
    VersioningMode["GREATER_THAN"] = "GREATER_THAN";
    /** execute only if version is greater or equal to existing */
    VersioningMode["GREATER_OR_EQUAL"] = "GREATER_OR_EQUAL";
})(VersioningMode || (VersioningMode = {}));
export var PreviewEmailType;
(function (PreviewEmailType) {
    PreviewEmailType["ORDER_PLACED"] = "ORDER_PLACED";
    PreviewEmailType["DOWNLOAD_LINKS"] = "DOWNLOAD_LINKS";
    PreviewEmailType["ORDER_SHIPPED"] = "ORDER_SHIPPED";
    PreviewEmailType["ORDER_READY_FOR_PICKUP"] = "ORDER_READY_FOR_PICKUP";
})(PreviewEmailType || (PreviewEmailType = {}));
export var ScheduledAction;
(function (ScheduledAction) {
    ScheduledAction["UNSPECIFIED"] = "UNSPECIFIED";
    /** Whether payment will be auto-voided when duration passes */
    ScheduledAction["VOID"] = "VOID";
    /** Whether payment will be auto-captured when duration passes */
    ScheduledAction["CAPTURE"] = "CAPTURE";
})(ScheduledAction || (ScheduledAction = {}));
export var DurationUnit;
(function (DurationUnit) {
    DurationUnit["UNKNOWN_DURATION_UNIT"] = "UNKNOWN_DURATION_UNIT";
    DurationUnit["MINUTES"] = "MINUTES";
    DurationUnit["HOURS"] = "HOURS";
    DurationUnit["DAYS"] = "DAYS";
})(DurationUnit || (DurationUnit = {}));
export var PaymentCollectabilityStatus;
(function (PaymentCollectabilityStatus) {
    PaymentCollectabilityStatus["UNKNOWN"] = "UNKNOWN";
    PaymentCollectabilityStatus["COLLECTABLE"] = "COLLECTABLE";
    PaymentCollectabilityStatus["NONCOLLECTABLE_ORDER_IS_CANCELLED"] = "NONCOLLECTABLE_ORDER_IS_CANCELLED";
    PaymentCollectabilityStatus["NONCOLLECTABLE_ORDER_IS_PAID"] = "NONCOLLECTABLE_ORDER_IS_PAID";
    PaymentCollectabilityStatus["NONCOLLECTABLE_MISSING_PAYMENT_METHOD"] = "NONCOLLECTABLE_MISSING_PAYMENT_METHOD";
    PaymentCollectabilityStatus["NONCOLLECTABLE_ORDER_IS_PENDING"] = "NONCOLLECTABLE_ORDER_IS_PENDING";
    PaymentCollectabilityStatus["NONCOLLECTABLE_ORDER_IS_REJECTED"] = "NONCOLLECTABLE_ORDER_IS_REJECTED";
})(PaymentCollectabilityStatus || (PaymentCollectabilityStatus = {}));
export var RefundableStatus;
(function (RefundableStatus) {
    RefundableStatus["NOT_REFUNDABLE"] = "NOT_REFUNDABLE";
    RefundableStatus["MANUAL"] = "MANUAL";
    RefundableStatus["REFUNDABLE"] = "REFUNDABLE";
})(RefundableStatus || (RefundableStatus = {}));
export var NonRefundableReason;
(function (NonRefundableReason) {
    NonRefundableReason["NONE"] = "NONE";
    NonRefundableReason["ALREADY_REFUNDED"] = "ALREADY_REFUNDED";
    NonRefundableReason["PROVIDER_IS_DOWN"] = "PROVIDER_IS_DOWN";
    NonRefundableReason["INTERNAL_ERROR"] = "INTERNAL_ERROR";
    NonRefundableReason["NOT_PAID"] = "NOT_PAID";
    NonRefundableReason["ACCESS_DENIED"] = "ACCESS_DENIED";
    NonRefundableReason["ZERO_PRICE"] = "ZERO_PRICE";
    NonRefundableReason["DISABLED_BY_PROVIDER"] = "DISABLED_BY_PROVIDER";
    NonRefundableReason["PENDING_REFUND"] = "PENDING_REFUND";
    NonRefundableReason["FORBIDDEN"] = "FORBIDDEN";
    NonRefundableReason["TRANSACTION_NOT_FOUND"] = "TRANSACTION_NOT_FOUND";
    NonRefundableReason["ORDER_IS_PENDING"] = "ORDER_IS_PENDING";
    NonRefundableReason["ORDER_IS_REJECTED"] = "ORDER_IS_REJECTED";
})(NonRefundableReason || (NonRefundableReason = {}));
export var ManuallyRefundableReason;
(function (ManuallyRefundableReason) {
    ManuallyRefundableReason["EXPIRED"] = "EXPIRED";
    ManuallyRefundableReason["NOT_SUPPORTED"] = "NOT_SUPPORTED";
    ManuallyRefundableReason["OFFLINE"] = "OFFLINE";
    ManuallyRefundableReason["REQUIRES_CARD_READER"] = "REQUIRES_CARD_READER";
})(ManuallyRefundableReason || (ManuallyRefundableReason = {}));
export var RestockType;
(function (RestockType) {
    RestockType["NO_ITEMS"] = "NO_ITEMS";
    RestockType["ALL_ITEMS"] = "ALL_ITEMS";
    RestockType["SOME_ITEMS"] = "SOME_ITEMS";
})(RestockType || (RestockType = {}));
export var OrderApprovalStrategy;
(function (OrderApprovalStrategy) {
    /** Order is automatically approved when `order.priceSummary.total = 0`, **or** after receiving payment. */
    OrderApprovalStrategy["DEFAULT"] = "DEFAULT";
    /** Order is automatically approved **only** after receiving payment. */
    OrderApprovalStrategy["PAYMENT_RECEIVED"] = "PAYMENT_RECEIVED";
    /** Order is automatically approved when payment method is saved for it. */
    OrderApprovalStrategy["PAYMENT_METHOD_SAVED"] = "PAYMENT_METHOD_SAVED";
})(OrderApprovalStrategy || (OrderApprovalStrategy = {}));
/** Type of selected payment option for catalog item */
export var DeltaPaymentOptionType;
(function (DeltaPaymentOptionType) {
    /** Irrelevant */
    DeltaPaymentOptionType["UNKNOWN_PAYMENT_OPTION"] = "UNKNOWN_PAYMENT_OPTION";
    /** The entire payment for the given item will happen after checkout. */
    DeltaPaymentOptionType["FULL_PAYMENT_OFFLINE"] = "FULL_PAYMENT_OFFLINE";
    /**
     * Payment for this item can only be done using a membership and must be manually redeemed in the dashboard by the site owner.
     * Note: when this option is used, the price will be 0.
     */
    DeltaPaymentOptionType["MEMBERSHIP_OFFLINE"] = "MEMBERSHIP_OFFLINE";
})(DeltaPaymentOptionType || (DeltaPaymentOptionType = {}));
export var InventoryAction;
(function (InventoryAction) {
    /** Restock inventory */
    InventoryAction["RESTOCK"] = "RESTOCK";
    /** Decrease inventory. Without failing on negative inventory. */
    InventoryAction["DECREASE"] = "DECREASE";
})(InventoryAction || (InventoryAction = {}));
export var Placement;
(function (Placement) {
    Placement["Unknown"] = "Unknown";
    Placement["Replace"] = "Replace";
    Placement["Before"] = "Before";
    Placement["After"] = "After";
})(Placement || (Placement = {}));
export var SubdivisionType;
(function (SubdivisionType) {
    SubdivisionType["UNKNOWN_SUBDIVISION_TYPE"] = "UNKNOWN_SUBDIVISION_TYPE";
    /** State */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_1"] = "ADMINISTRATIVE_AREA_LEVEL_1";
    /** County */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_2"] = "ADMINISTRATIVE_AREA_LEVEL_2";
    /** City/town */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_3"] = "ADMINISTRATIVE_AREA_LEVEL_3";
    /** Neighborhood/quarter */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_4"] = "ADMINISTRATIVE_AREA_LEVEL_4";
    /** Street/block */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_5"] = "ADMINISTRATIVE_AREA_LEVEL_5";
    /** ADMINISTRATIVE_AREA_LEVEL_0. Indicates the national political entity, and is typically the highest order type returned by the Geocoder. */
    SubdivisionType["COUNTRY"] = "COUNTRY";
})(SubdivisionType || (SubdivisionType = {}));
export var SourceType;
(function (SourceType) {
    SourceType["UNKNOWN_SOURCE_TYPE"] = "UNKNOWN_SOURCE_TYPE";
    SourceType["WIX_APP"] = "WIX_APP";
    SourceType["EXTERNAL"] = "EXTERNAL";
    SourceType["ADMIN"] = "ADMIN";
    SourceType["OTHER"] = "OTHER";
})(SourceType || (SourceType = {}));
export var CustomFieldGroup;
(function (CustomFieldGroup) {
    CustomFieldGroup["UNKNOWN_CUSTOM_FIELD_GROUP"] = "UNKNOWN_CUSTOM_FIELD_GROUP";
    CustomFieldGroup["BUSINESS_DETAILS"] = "BUSINESS_DETAILS";
    CustomFieldGroup["CUSTOMER_DETAILS"] = "CUSTOMER_DETAILS";
    CustomFieldGroup["DOCUMENT"] = "DOCUMENT";
    CustomFieldGroup["FOOTER"] = "FOOTER";
    CustomFieldGroup["OTHER"] = "OTHER";
})(CustomFieldGroup || (CustomFieldGroup = {}));
export var ValueType;
(function (ValueType) {
    ValueType["UNKNOWN_VALUE_TYPE"] = "UNKNOWN_VALUE_TYPE";
    ValueType["STRING"] = "STRING";
    ValueType["DATE"] = "DATE";
    ValueType["BOOLEAN"] = "BOOLEAN";
    ValueType["NUMBER"] = "NUMBER";
})(ValueType || (ValueType = {}));
export var DepositType;
(function (DepositType) {
    DepositType["UNKNOWN"] = "UNKNOWN";
    DepositType["FLAT"] = "FLAT";
    DepositType["PERCENTAGE"] = "PERCENTAGE";
})(DepositType || (DepositType = {}));
/**
 * InvoiceStatus allowed transitions based on current status:
 * Draft -> Deleted, Paid, Partially Paid, Sent
 * Sent -> Draft, Deleted, Void, Paid, Partially Paid, Processing, (Overdue)
 * Processing -> PartiallyPaid, Paid, Sent
 * Paid -> Void
 * PartiallyPaid -> Void, (PartialAndOverdue)
 * Void -> Deleted
 * Deleted
 */
export var InvoiceStatus;
(function (InvoiceStatus) {
    InvoiceStatus["Draft"] = "Draft";
    InvoiceStatus["Sent"] = "Sent";
    InvoiceStatus["Processing"] = "Processing";
    InvoiceStatus["Paid"] = "Paid";
    InvoiceStatus["Overdue"] = "Overdue";
    InvoiceStatus["Void"] = "Void";
    InvoiceStatus["Deleted"] = "Deleted";
    InvoiceStatus["PartiallyPaid"] = "PartiallyPaid";
    InvoiceStatus["PartialAndOverdue"] = "PartialAndOverdue";
})(InvoiceStatus || (InvoiceStatus = {}));
/**
 * Prepares payment collection for given ecom order. This is the first of 2-step process of payment collection.
 * Here we ensure that payment collection is possible for given order and store and prepare payment gateway order for future charge.
 * 2nd step is an actual charge of prepared payment gateway order. This could be done either
 * via Wix-Cashier's API (https://bo.wix.com/wix-docs/rest/wix-cashier/pay/charge/charge-for-order)
 * or using Cashier Payments Widget (https://github.com/wix-private/cashier-client/tree/master/packages/cashier-payments-widget)
 * @param ecomOrderId - Ecom order ID.
 * @param amount - Amount to collect
 * @public
 * @documentationMaturity preview
 * @requiredField amount
 * @requiredField ecomOrderId
 * @permissionId ECOM.COLLECT_PAYMENTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.PreparePaymentCollection
 */
export async function preparePaymentCollection(ecomOrderId, amount, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        ecomOrderId: ecomOrderId,
        amount: amount,
        paymentGatewayOrderId: options?.paymentGatewayOrderId,
        delayedCapture: options?.delayedCapture,
        delayedCaptureSettings: options?.delayedCaptureSettings,
    });
    const reqOpts = ambassadorWixEcomV1Order.preparePaymentCollection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                ecomOrderId: '$[0]',
                amount: '$[1]',
                paymentGatewayOrderId: '$[2].paymentGatewayOrderId',
                delayedCapture: '$[2].delayedCapture',
                delayedCaptureSettings: '$[2].delayedCaptureSettings',
            },
            singleArgumentUnchanged: false,
        }, ['ecomOrderId', 'amount', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Provides payment collectability status for given order. If payment collection is possible
 * response will contain collectable amount for given ecom order. If not - response will contain
 * reason why payment collection is not possible.
 * @param ecomOrderId - Ecom order ID.
 * @public
 * @documentationMaturity preview
 * @requiredField ecomOrderId
 * @permissionId ECOM.COLLECT_PAYMENTS
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.GetPaymentCollectabilityStatus
 */
export async function getPaymentCollectabilityStatus(ecomOrderId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        ecomOrderId: ecomOrderId,
    });
    const reqOpts = ambassadorWixEcomV1Order.getPaymentCollectabilityStatus(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { ecomOrderId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['ecomOrderId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Void authorized payments
 * Transaction statuses for related payments will be updated in async way
 * @param ecomOrderId - Wix eCommerce order ID
 * @param paymentIds - Payment IDs
 * @public
 * @documentationMaturity preview
 * @requiredField ecomOrderId
 * @requiredField paymentIds
 * @permissionId ECOM.ORDER_VOID_AUTHORIZED_PAYMENT
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.VoidAuthorizedPayments
 */
export async function voidAuthorizedPayments(ecomOrderId, paymentIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        ecomOrderId: ecomOrderId,
        paymentIds: paymentIds,
    });
    const reqOpts = ambassadorWixEcomV1Order.voidAuthorizedPayments(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { ecomOrderId: '$[0]', paymentIds: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['ecomOrderId', 'paymentIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Capture authorized payments
 * Transaction statuses for related payments will be updated in async way
 * @param ecomOrderId - Wix eCommerce order ID
 * @param payments - Capture payments information
 * @public
 * @documentationMaturity preview
 * @requiredField ecomOrderId
 * @requiredField payments
 * @requiredField payments.paymentId
 * @permissionId ECOM.ORDER_CAPTURE_AUTHORIZED_PAYMENT
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.CaptureAuthorizedPayments
 */
export async function captureAuthorizedPayments(ecomOrderId, payments) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        ecomOrderId: ecomOrderId,
        payments: payments,
    });
    const reqOpts = ambassadorWixEcomV1Order.captureAuthorizedPayments(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { ecomOrderId: '$[0]', payments: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['ecomOrderId', 'payments']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves an order.
 *
 *
 * The `getOrder()` function returns a Promise that resolves when the specified order is retrieved.
 *
 * To retrieve an order's payment and refund details, including amounts, payment methods, and payment statuses, pass the order ID to [`listTransactionsForSingleOrder( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/listtransactionsforsingleorder).
 * @param _id - ID of the order to retrieve.
 * @public
 * @requiredField _id
 * @permissionId ECOM.READ_ORDERS
 * @permissionId ECOM.ORDER_READ_ALL_EXTENDED_FIELDS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns Fulfilled - The requested order.
 * @fqn com.wix.ecom.orders.v1.Orders.GetOrder
 */
export async function getOrder(_id) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ id: _id });
    const reqOpts = ambassadorWixEcomV1Order.getOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'order.lineItems.image' }],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'order.billingInfo.address' },
                    {
                        path: 'order.shippingInfo.logistics.shippingDestination.address',
                    },
                    { path: 'order.shippingInfo.logistics.pickupDetails.address' },
                    { path: 'order.recipientInfo.address' },
                ],
            },
        ]))?.order;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { id: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of orders, given the provided paging, filtering, and sorting.
 *
 *
 * Search Orders runs with these defaults, which you can override:
 *
 * - `createdDate` is sorted in `DESC` order
 * - `cursorPaging.limit` is `100`
 * - `filter: {"status": {"$ne": "INITIALIZED"}}` - other order statuses can be queried, but orders with `status: "INITIALIZED"` are never returned
 *
 * For field support for filters and sorting, see [Orders: Supported Filters and Sorting](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/supported-filters-and-sorting).
 *
 * To learn about working with _Search_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language), and
 * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 * @public
 * @permissionId ECOM.READ_ORDERS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.v1.Orders.SearchOrders
 */
export async function searchOrders(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        search: options?.search,
    });
    const reqOpts = ambassadorWixEcomV1Order.searchOrders(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'orders.lineItems.image' }],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'orders.billingInfo.address' },
                    {
                        path: 'orders.shippingInfo.logistics.shippingDestination.address',
                    },
                    { path: 'orders.shippingInfo.logistics.pickupDetails.address' },
                    { path: 'orders.recipientInfo.address' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { search: '$[0].search' },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates an order.
 *
 *
 * The `createOrder()` function returns a Promise that resolves when the order is created.
 *
 * > **Notes:**
 * > + If an item is digital - `lineItems[i].itemType.preset: DIGITAL` - then `lineItems[i].digitalFile` must be provided.
 * > + If `lineItems[i].id` is passed, it must be either a valid GUID, or empty.
 * @param order - Order info.
 * @public
 * @requiredField order
 * @requiredField order.billingInfo.contactDetails
 * @requiredField order.billingInfo.contactDetails.firstName
 * @requiredField order.channelInfo
 * @requiredField order.lineItems
 * @requiredField order.lineItems.catalogReference.appId
 * @requiredField order.lineItems.catalogReference.catalogItemId
 * @requiredField order.lineItems.itemType
 * @requiredField order.lineItems.price
 * @requiredField order.lineItems.productName
 * @requiredField order.lineItems.productName.original
 * @requiredField order.lineItems.quantity
 * @requiredField order.lineItems.subscriptionInfo.subscriptionSettings.interval
 * @requiredField order.priceSummary
 * @permissionId ECOM.CREATE_ORDERS
 * @permissionId ECOM.ORDER_WRITE_ALL_EXTENDED_FIELDS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns Newly created order.
 * @fqn com.wix.ecom.orders.v1.Orders.CreateOrder
 */
export async function createOrder(order, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        order: order,
        settings: options?.settings,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'order.lineItems.image' }],
        },
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [
                { path: 'order.billingInfo.address' },
                { path: 'order.shippingInfo.logistics.shippingDestination.address' },
                { path: 'order.shippingInfo.logistics.pickupDetails.address' },
                { path: 'order.recipientInfo.address' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1Order.createOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'order.lineItems.image' }],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'order.billingInfo.address' },
                    {
                        path: 'order.shippingInfo.logistics.shippingDestination.address',
                    },
                    { path: 'order.shippingInfo.logistics.pickupDetails.address' },
                    { path: 'order.recipientInfo.address' },
                ],
            },
        ]))?.order;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { order: '$[0]', settings: '$[1].settings' },
            singleArgumentUnchanged: false,
        }, ['order', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates an order.
 *
 *
 * The `updateOrder()` function returns a Promise that resolves when the specified order's information is updated.
 *
 * Currently, the following fields can be updated:
 * + `order.buyerInfo.email`
 * + `order.buyerLanguage`
 * + `order.weightUnit`
 * + `order.billingInfo.address`
 * + `order.billingInfo.contactDetails`
 * + `order.archived`
 * + `order.attributionSource`
 * + `order.seenByAHuman`
 * + `order.recipientInfo.address`
 * + `order.recipientInfo.contactDetails`
 * + `order.shippingInfo.logistics.shippingDestination.address`
 * + `order.shippingInfo.logistics.shippingDestination.contactDetails`
 *
 * To update a field's value, include the new value in the `order` object in the method parameters.
 * To remove a field's value, pass `null`.
 *
 * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.
 *
 * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).
 * @param _id - Order ID.
 * @public
 * @requiredField _id
 * @requiredField order
 * @permissionId ECOM.MODIFY_ORDERS
 * @permissionId ECOM.ORDER_WRITE_ALL_EXTENDED_FIELDS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns Newly created order.
 * @fqn com.wix.ecom.orders.v1.Orders.UpdateOrder
 */
export async function updateOrder(_id, order) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({ order: { ...order, id: _id } }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'order.lineItems.image' }],
        },
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [
                { path: 'order.billingInfo.address' },
                { path: 'order.shippingInfo.logistics.shippingDestination.address' },
                { path: 'order.shippingInfo.logistics.pickupDetails.address' },
                { path: 'order.recipientInfo.address' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1Order.updateOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'order.lineItems.image' }],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'order.billingInfo.address' },
                    {
                        path: 'order.shippingInfo.logistics.shippingDestination.address',
                    },
                    { path: 'order.shippingInfo.logistics.pickupDetails.address' },
                    { path: 'order.recipientInfo.address' },
                ],
            },
        ]))?.order;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { order: '$[1]' },
            explicitPathsToArguments: { 'order.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'order']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates up to 100 orders.
 *
 *
 * The `bulkUpdateOrders()` function returns a Promise that resolves when the specified orders' information is updated.
 *
 * Currently, the following fields can be updated:
 * + `order.buyerInfo.email`
 * + `order.buyerLanguage`
 * + `order.weightUnit`
 * + `order.billingInfo.address`
 * + `order.billingInfo.contactDetails`
 * + `order.archived`
 * + `order.attributionSource`
 * + `order.seenByAHuman`
 * + `order.recipientInfo.address`
 * + `order.recipientInfo.contactDetails`
 * + `order.shippingInfo.logistics.shippingDestination.address`
 * + `order.shippingInfo.logistics.shippingDestination.contactDetails`
 *
 * To update a field's value, include the new value in the `orders.order` object in the method parameters.
 * To remove a field's value, pass `null`.
 *
 * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.
 *
 * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).
 * @param orders - Orders to update.
 * @public
 * @requiredField orders
 * @requiredField orders.order
 * @requiredField orders.order._id
 * @permissionId ECOM.MODIFY_ORDERS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.v1.Orders.BulkUpdateOrders
 */
export async function bulkUpdateOrders(orders, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        orders: orders,
        returnEntity: options?.returnEntity,
    }), [
        {
            transformFn: transformSDKImageToRESTImage,
            paths: [{ path: 'orders.order.lineItems.image' }],
        },
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [
                { path: 'orders.order.billingInfo.address' },
                {
                    path: 'orders.order.shippingInfo.logistics.shippingDestination.address',
                },
                { path: 'orders.order.shippingInfo.logistics.pickupDetails.address' },
                { path: 'orders.order.recipientInfo.address' },
            ],
        },
    ]);
    const reqOpts = ambassadorWixEcomV1Order.bulkUpdateOrders(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'results.item.lineItems.image' }],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'results.item.billingInfo.address' },
                    {
                        path: 'results.item.shippingInfo.logistics.shippingDestination.address',
                    },
                    {
                        path: 'results.item.shippingInfo.logistics.pickupDetails.address',
                    },
                    { path: 'results.item.recipientInfo.address' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                orders: '$[0]',
                returnEntity: '$[1].returnEntity',
            },
            singleArgumentUnchanged: false,
        }, ['orders', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Cancels an order.
 *
 *
 * The `cancelOrder()` function returns a Promise that resolves when the specified order is canceled and the `order.status` field changes to `CANCELED`.
 * @param _id - Order ID.
 * @public
 * @requiredField _id
 * @permissionId ECOM.MODIFY_ORDERS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.v1.Orders.CancelOrder
 */
export async function cancelOrder(_id, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        id: _id,
        sendOrderCanceledEmail: options?.sendOrderCanceledEmail,
        customMessage: options?.customMessage,
        restockAllItems: options?.restockAllItems,
    });
    const reqOpts = ambassadorWixEcomV1Order.cancelOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTImageToSDKImage,
                paths: [{ path: 'order.lineItems.image' }],
            },
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'order.billingInfo.address' },
                    {
                        path: 'order.shippingInfo.logistics.shippingDestination.address',
                    },
                    { path: 'order.shippingInfo.logistics.pickupDetails.address' },
                    { path: 'order.recipientInfo.address' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                id: '$[0]',
                sendOrderCanceledEmail: '$[1].sendOrderCanceledEmail',
                customMessage: '$[1].customMessage',
                restockAllItems: '$[1].restockAllItems',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Synchronously update tags on multiple orders, by list of order ids
 * A tag that appears both in the list of assign and unassign tags, will be assigned
 * @param orderIds - IDs of orders to update tags for.
 * @public
 * @documentationMaturity preview
 * @requiredField orderIds
 * @permissionId ECOM.MODIFY_ORDERS
 * @permissionId ECOM.ORDER_MODIFY_PRIVATE_TAGS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.v1.Orders.BulkUpdateOrderTags
 */
export async function bulkUpdateOrderTags(orderIds, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        orderIds: orderIds,
        assignTags: options?.assignTags,
        unassignTags: options?.unassignTags,
    });
    const reqOpts = ambassadorWixEcomV1Order.bulkUpdateOrderTags(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                orderIds: '$[0]',
                assignTags: '$[1].assignTags',
                unassignTags: '$[1].unassignTags',
            },
            singleArgumentUnchanged: false,
        }, ['orderIds', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-order-orders.universal.js.map