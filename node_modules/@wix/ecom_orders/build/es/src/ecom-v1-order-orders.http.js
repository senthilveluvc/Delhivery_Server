import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';
import { transformSDKFloatToRESTFloat } from '@wix/sdk-runtime/transformations/float';
import { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';
import { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformSDKFieldMaskToRESTFieldMask } from '@wix/sdk-runtime/transformations/field-mask';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { resolveUrl } from '@wix/sdk-runtime/rest-modules';
function resolveComWixEcomOrdersV1OrdersUrl(opts) {
    const domainToMappings = {
        _: [
            {
                srcPath: '/_api/ecom-orders',
                destPath: '',
            },
            {
                srcPath: '/_api/orders',
                destPath: '',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/_api/ecom-orders',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/ecom/v1/bulk/orders',
                destPath: '/v1/bulk/orders',
            },
            {
                srcPath: '/ecom/v1/orders',
                destPath: '/v1/orders',
            },
        ],
    };
    return resolveUrl(Object.assign(opts, { domainToMappings }));
}
function resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl(opts) {
    const domainToMappings = {
        'api._api_base_domain_': [
            {
                srcPath: '/payments-collector',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/ecom/v1/payments-collector',
                destPath: '/v1/payments-collector',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/ecom/v1/payments-collector',
                destPath: '/v1/payments-collector',
            },
            {
                srcPath: '/_api/v1/payments-collector',
                destPath: '/v1/payments-collector',
            },
            {
                srcPath: '/v1/payments-collector',
                destPath: '/v1/payments-collector',
            },
            {
                srcPath: '/_api/payments-collector',
                destPath: '/v1/payments-collector',
            },
        ],
    };
    return resolveUrl(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/ecom_orders';
/**
 * Prepares payment collection for given ecom order. This is the first of 2-step process of payment collection.
 * Here we ensure that payment collection is possible for given order and store and prepare payment gateway order for future charge.
 * 2nd step is an actual charge of prepared payment gateway order. This could be done either
 * via Wix-Cashier's API (https://bo.wix.com/wix-docs/rest/wix-cashier/pay/charge/charge-for-order)
 * or using Cashier Payments Widget (https://github.com/wix-private/cashier-client/tree/master/packages/cashier-payments-widget)
 */
export function preparePaymentCollection(payload) {
    function __preparePaymentCollection({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.PreparePaymentCollection',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
                protoPath: '/v1/payments-collector/orders/{ecomOrderId}/prepare-payment-collection',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __preparePaymentCollection;
}
/**
 * Provides payment collectability status for given order. If payment collection is possible
 * response will contain collectable amount for given ecom order. If not - response will contain
 * reason why payment collection is not possible.
 */
export function getPaymentCollectabilityStatus(payload) {
    function __getPaymentCollectabilityStatus({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order',
            method: 'GET',
            methodFqn: 'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.GetPaymentCollectabilityStatus',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
                protoPath: '/v1/payments-collector/orders/{ecomOrderId}/payment-collectability-status',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
        };
        return metadata;
    }
    return __getPaymentCollectabilityStatus;
}
/**
 * Void authorized payments
 * Transaction statuses for related payments will be updated in async way
 */
export function voidAuthorizedPayments(payload) {
    function __voidAuthorizedPayments({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.VoidAuthorizedPayments',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
                protoPath: '/v1/payments-collector/orders/{ecomOrderId}/void-authorized-payments',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'orderTransactions.payments.createdDate' },
                        { path: 'orderTransactions.payments.updatedDate' },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                        },
                        { path: 'orderTransactions.refunds.createdDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __voidAuthorizedPayments;
}
/**
 * Capture authorized payments
 * Transaction statuses for related payments will be updated in async way
 */
export function captureAuthorizedPayments(payload) {
    function __captureAuthorizedPayments({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.payments_collector.v1.PaymentsCollector.CaptureAuthorizedPayments',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersPaymentsCollectorV1PaymentsCollectorUrl({
                protoPath: '/v1/payments-collector/orders/{ecomOrderId}/capture-authorized-payments',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'orderTransactions.payments.createdDate' },
                        { path: 'orderTransactions.payments.updatedDate' },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.authorizedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.captures.createdDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.void.voidedDate',
                        },
                        {
                            path: 'orderTransactions.payments.regularPaymentDetails.authorizationDetails.scheduledAction.executionDate',
                        },
                        { path: 'orderTransactions.refunds.createdDate' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __captureAuthorizedPayments;
}
/**
 * Retrieves an order.
 *
 *
 * The `getOrder()` function returns a Promise that resolves when the specified order is retrieved.
 *
 * To retrieve an order's payment and refund details, including amounts, payment methods, and payment statuses, pass the order ID to [`listTransactionsForSingleOrder( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/listtransactionsforsingleorder).
 */
export function getOrder(payload) {
    function __getOrder({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order',
            method: 'GET',
            methodFqn: 'com.wix.ecom.orders.v1.Orders.GetOrder',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersV1OrdersUrl({
                protoPath: '/v1/orders/{id}',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'order.createdDate' },
                        { path: 'order.updatedDate' },
                        { path: 'order.purchasedDate' },
                        { path: 'order.lineItems.image.urlExpirationDate' },
                        { path: 'order.lineItems.digitalFile.expirationDate' },
                        {
                            path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'order.shippingInfo.logistics.deliverByDate' },
                        { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },
                        { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },
                        { path: 'order.activities.createdDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'order.lineItems.image.focalPoint.x' },
                        { path: 'order.lineItems.image.focalPoint.y' },
                        { path: 'order.lineItems.physicalProperties.weight' },
                        { path: 'order.billingInfo.address.geocode.latitude' },
                        { path: 'order.billingInfo.address.geocode.longitude' },
                        {
                            path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'order.recipientInfo.address.geocode.latitude' },
                        { path: 'order.recipientInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getOrder;
}
/**
 * Retrieves a list of orders, given the provided paging, filtering, and sorting.
 *
 *
 * Search Orders runs with these defaults, which you can override:
 *
 * - `createdDate` is sorted in `DESC` order
 * - `cursorPaging.limit` is `100`
 * - `filter: {"status": {"$ne": "INITIALIZED"}}` - other order statuses can be queried, but orders with `status: "INITIALIZED"` are never returned
 *
 * For field support for filters and sorting, see [Orders: Supported Filters and Sorting](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/orders/supported-filters-and-sorting).
 *
 * To learn about working with _Search_ endpoints, see
 * [API Query Language](https://dev.wix.com/docs/rest/articles/getting-started/api-query-language), and
 * [Sorting and Paging](https://dev.wix.com/docs/rest/articles/getting-started/sorting-and-paging).
 */
export function searchOrders(payload) {
    function __searchOrders({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.v1.Orders.SearchOrders',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersV1OrdersUrl({
                protoPath: '/v1/orders/search',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'orders.createdDate' },
                        { path: 'orders.updatedDate' },
                        { path: 'orders.purchasedDate' },
                        { path: 'orders.lineItems.image.urlExpirationDate' },
                        { path: 'orders.lineItems.digitalFile.expirationDate' },
                        {
                            path: 'orders.lineItems.subscriptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'orders.shippingInfo.logistics.deliverByDate' },
                        { path: 'orders.shippingInfo.logistics.deliveryTimeSlot.from' },
                        { path: 'orders.shippingInfo.logistics.deliveryTimeSlot.to' },
                        { path: 'orders.activities.createdDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'orders.lineItems.image.focalPoint.x' },
                        { path: 'orders.lineItems.image.focalPoint.y' },
                        { path: 'orders.lineItems.physicalProperties.weight' },
                        { path: 'orders.billingInfo.address.geocode.latitude' },
                        { path: 'orders.billingInfo.address.geocode.longitude' },
                        {
                            path: 'orders.shippingInfo.logistics.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'orders.shippingInfo.logistics.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'orders.shippingInfo.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'orders.shippingInfo.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'orders.recipientInfo.address.geocode.latitude' },
                        { path: 'orders.recipientInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __searchOrders;
}
/**
 * Creates an order.
 *
 *
 * The `createOrder()` function returns a Promise that resolves when the order is created.
 *
 * > **Notes:**
 * > + If an item is digital - `lineItems[i].itemType.preset: DIGITAL` - then `lineItems[i].digitalFile` must be provided.
 * > + If `lineItems[i].id` is passed, it must be either a valid GUID, or empty.
 */
export function createOrder(payload) {
    function __createOrder({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'order.createdDate' },
                    { path: 'order.updatedDate' },
                    { path: 'order.purchasedDate' },
                    { path: 'order.lineItems.image.urlExpirationDate' },
                    { path: 'order.lineItems.digitalFile.expirationDate' },
                    {
                        path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'order.shippingInfo.logistics.deliverByDate' },
                    { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },
                    { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },
                    { path: 'order.activities.createdDate' },
                ],
            },
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'order.lineItems.image.focalPoint.x' },
                    { path: 'order.lineItems.image.focalPoint.y' },
                    { path: 'order.lineItems.physicalProperties.weight' },
                    { path: 'order.billingInfo.address.geocode.latitude' },
                    { path: 'order.billingInfo.address.geocode.longitude' },
                    {
                        path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',
                    },
                    {
                        path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',
                    },
                    {
                        path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',
                    },
                    {
                        path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',
                    },
                    { path: 'order.recipientInfo.address.geocode.latitude' },
                    { path: 'order.recipientInfo.address.geocode.longitude' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.v1.Orders.CreateOrder',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersV1OrdersUrl({
                protoPath: '/v1/orders',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'order.createdDate' },
                        { path: 'order.updatedDate' },
                        { path: 'order.purchasedDate' },
                        { path: 'order.lineItems.image.urlExpirationDate' },
                        { path: 'order.lineItems.digitalFile.expirationDate' },
                        {
                            path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'order.shippingInfo.logistics.deliverByDate' },
                        { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },
                        { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },
                        { path: 'order.activities.createdDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'order.lineItems.image.focalPoint.x' },
                        { path: 'order.lineItems.image.focalPoint.y' },
                        { path: 'order.lineItems.physicalProperties.weight' },
                        { path: 'order.billingInfo.address.geocode.latitude' },
                        { path: 'order.billingInfo.address.geocode.longitude' },
                        {
                            path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'order.recipientInfo.address.geocode.latitude' },
                        { path: 'order.recipientInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __createOrder;
}
/**
 * Updates an order.
 *
 *
 * The `updateOrder()` function returns a Promise that resolves when the specified order's information is updated.
 *
 * Currently, the following fields can be updated:
 * + `order.buyerInfo.email`
 * + `order.buyerLanguage`
 * + `order.weightUnit`
 * + `order.billingInfo.address`
 * + `order.billingInfo.contactDetails`
 * + `order.archived`
 * + `order.attributionSource`
 * + `order.seenByAHuman`
 * + `order.recipientInfo.address`
 * + `order.recipientInfo.contactDetails`
 * + `order.shippingInfo.logistics.shippingDestination.address`
 * + `order.shippingInfo.logistics.shippingDestination.contactDetails`
 *
 * To update a field's value, include the new value in the `order` object in the method parameters.
 * To remove a field's value, pass `null`.
 *
 * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.
 *
 * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).
 */
export function updateOrder(payload) {
    function __updateOrder({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'fieldMask' }],
            },
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'order.createdDate' },
                    { path: 'order.updatedDate' },
                    { path: 'order.purchasedDate' },
                    { path: 'order.lineItems.image.urlExpirationDate' },
                    { path: 'order.lineItems.digitalFile.expirationDate' },
                    {
                        path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'order.shippingInfo.logistics.deliverByDate' },
                    { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },
                    { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },
                    { path: 'order.activities.createdDate' },
                ],
            },
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'order.lineItems.image.focalPoint.x' },
                    { path: 'order.lineItems.image.focalPoint.y' },
                    { path: 'order.lineItems.physicalProperties.weight' },
                    { path: 'order.billingInfo.address.geocode.latitude' },
                    { path: 'order.billingInfo.address.geocode.longitude' },
                    {
                        path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',
                    },
                    {
                        path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',
                    },
                    {
                        path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',
                    },
                    {
                        path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',
                    },
                    { path: 'order.recipientInfo.address.geocode.latitude' },
                    { path: 'order.recipientInfo.address.geocode.longitude' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order',
            method: 'PATCH',
            methodFqn: 'com.wix.ecom.orders.v1.Orders.UpdateOrder',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersV1OrdersUrl({
                protoPath: '/v1/orders/{order.id}',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'order.createdDate' },
                        { path: 'order.updatedDate' },
                        { path: 'order.purchasedDate' },
                        { path: 'order.lineItems.image.urlExpirationDate' },
                        { path: 'order.lineItems.digitalFile.expirationDate' },
                        {
                            path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'order.shippingInfo.logistics.deliverByDate' },
                        { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },
                        { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },
                        { path: 'order.activities.createdDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'order.lineItems.image.focalPoint.x' },
                        { path: 'order.lineItems.image.focalPoint.y' },
                        { path: 'order.lineItems.physicalProperties.weight' },
                        { path: 'order.billingInfo.address.geocode.latitude' },
                        { path: 'order.billingInfo.address.geocode.longitude' },
                        {
                            path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'order.recipientInfo.address.geocode.latitude' },
                        { path: 'order.recipientInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateOrder;
}
/**
 * Updates up to 100 orders.
 *
 *
 * The `bulkUpdateOrders()` function returns a Promise that resolves when the specified orders' information is updated.
 *
 * Currently, the following fields can be updated:
 * + `order.buyerInfo.email`
 * + `order.buyerLanguage`
 * + `order.weightUnit`
 * + `order.billingInfo.address`
 * + `order.billingInfo.contactDetails`
 * + `order.archived`
 * + `order.attributionSource`
 * + `order.seenByAHuman`
 * + `order.recipientInfo.address`
 * + `order.recipientInfo.contactDetails`
 * + `order.shippingInfo.logistics.shippingDestination.address`
 * + `order.shippingInfo.logistics.shippingDestination.contactDetails`
 *
 * To update a field's value, include the new value in the `orders.order` object in the method parameters.
 * To remove a field's value, pass `null`.
 *
 * > **Note:** Removing `buyerInfo` or `contactDetails` fields results in an error.
 *
 * To update an order's payment status, use [`updatePaymentStatus( )`](https://www.wix.com/velo/reference/wix-ecom-backend/ordertransactions/updatepaymentstatus).
 */
export function bulkUpdateOrders(payload) {
    function __bulkUpdateOrders({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'orders.fieldMask' }],
            },
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [
                    { path: 'orders.order.createdDate' },
                    { path: 'orders.order.updatedDate' },
                    { path: 'orders.order.purchasedDate' },
                    { path: 'orders.order.lineItems.image.urlExpirationDate' },
                    { path: 'orders.order.lineItems.digitalFile.expirationDate' },
                    {
                        path: 'orders.order.lineItems.subscriptionInfo.subscriptionSettings.startDate',
                    },
                    { path: 'orders.order.shippingInfo.logistics.deliverByDate' },
                    { path: 'orders.order.shippingInfo.logistics.deliveryTimeSlot.from' },
                    { path: 'orders.order.shippingInfo.logistics.deliveryTimeSlot.to' },
                    { path: 'orders.order.activities.createdDate' },
                ],
            },
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [
                    { path: 'orders.order.lineItems.image.focalPoint.x' },
                    { path: 'orders.order.lineItems.image.focalPoint.y' },
                    { path: 'orders.order.lineItems.physicalProperties.weight' },
                    { path: 'orders.order.billingInfo.address.geocode.latitude' },
                    { path: 'orders.order.billingInfo.address.geocode.longitude' },
                    {
                        path: 'orders.order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',
                    },
                    {
                        path: 'orders.order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',
                    },
                    {
                        path: 'orders.order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',
                    },
                    {
                        path: 'orders.order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',
                    },
                    { path: 'orders.order.recipientInfo.address.geocode.latitude' },
                    { path: 'orders.order.recipientInfo.address.geocode.longitude' },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.v1.Orders.BulkUpdateOrders',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersV1OrdersUrl({
                protoPath: '/v1/bulk/orders/update',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'results.item.createdDate' },
                        { path: 'results.item.updatedDate' },
                        { path: 'results.item.purchasedDate' },
                        { path: 'results.item.lineItems.image.urlExpirationDate' },
                        { path: 'results.item.lineItems.digitalFile.expirationDate' },
                        {
                            path: 'results.item.lineItems.subscriptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'results.item.shippingInfo.logistics.deliverByDate' },
                        {
                            path: 'results.item.shippingInfo.logistics.deliveryTimeSlot.from',
                        },
                        {
                            path: 'results.item.shippingInfo.logistics.deliveryTimeSlot.to',
                        },
                        { path: 'results.item.activities.createdDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'results.item.lineItems.image.focalPoint.x' },
                        { path: 'results.item.lineItems.image.focalPoint.y' },
                        { path: 'results.item.lineItems.physicalProperties.weight' },
                        { path: 'results.item.billingInfo.address.geocode.latitude' },
                        { path: 'results.item.billingInfo.address.geocode.longitude' },
                        {
                            path: 'results.item.shippingInfo.logistics.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'results.item.shippingInfo.logistics.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'results.item.shippingInfo.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'results.item.shippingInfo.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'results.item.recipientInfo.address.geocode.latitude' },
                        { path: 'results.item.recipientInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __bulkUpdateOrders;
}
/**
 * Cancels an order.
 *
 *
 * The `cancelOrder()` function returns a Promise that resolves when the specified order is canceled and the `order.status` field changes to `CANCELED`.
 */
export function cancelOrder(payload) {
    function __cancelOrder({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.v1.Orders.CancelOrder',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersV1OrdersUrl({
                protoPath: '/v1/orders/{id}/cancel',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'order.createdDate' },
                        { path: 'order.updatedDate' },
                        { path: 'order.purchasedDate' },
                        { path: 'order.lineItems.image.urlExpirationDate' },
                        { path: 'order.lineItems.digitalFile.expirationDate' },
                        {
                            path: 'order.lineItems.subscriptionInfo.subscriptionSettings.startDate',
                        },
                        { path: 'order.shippingInfo.logistics.deliverByDate' },
                        { path: 'order.shippingInfo.logistics.deliveryTimeSlot.from' },
                        { path: 'order.shippingInfo.logistics.deliveryTimeSlot.to' },
                        { path: 'order.activities.createdDate' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'order.lineItems.image.focalPoint.x' },
                        { path: 'order.lineItems.image.focalPoint.y' },
                        { path: 'order.lineItems.physicalProperties.weight' },
                        { path: 'order.billingInfo.address.geocode.latitude' },
                        { path: 'order.billingInfo.address.geocode.longitude' },
                        {
                            path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.latitude',
                        },
                        {
                            path: 'order.shippingInfo.logistics.shippingDestination.address.geocode.longitude',
                        },
                        {
                            path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.latitude',
                        },
                        {
                            path: 'order.shippingInfo.logistics.pickupDetails.address.geocode.longitude',
                        },
                        { path: 'order.recipientInfo.address.geocode.latitude' },
                        { path: 'order.recipientInfo.address.geocode.longitude' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __cancelOrder;
}
/**
 * Synchronously update tags on multiple orders, by list of order ids
 * A tag that appears both in the list of assign and unassign tags, will be assigned
 */
export function bulkUpdateOrderTags(payload) {
    function __bulkUpdateOrderTags({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.order',
            method: 'POST',
            methodFqn: 'com.wix.ecom.orders.v1.Orders.BulkUpdateOrderTags',
            packageName: PACKAGE_NAME,
            url: resolveComWixEcomOrdersV1OrdersUrl({
                protoPath: '/v1/bulk/orders/update-tags',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __bulkUpdateOrderTags;
}
//# sourceMappingURL=ecom-v1-order-orders.http.js.map