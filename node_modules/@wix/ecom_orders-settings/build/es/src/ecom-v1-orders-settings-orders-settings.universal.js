import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1OrdersSettings from './ecom-v1-orders-settings-orders-settings.http.js';
export var InventoryUpdateTrigger;
(function (InventoryUpdateTrigger) {
    InventoryUpdateTrigger["UNKNOWN_INVENTORY_UPDATE_TRIGGER"] = "UNKNOWN_INVENTORY_UPDATE_TRIGGER";
    /** Stock quantities will update only after the payment is approved. */
    InventoryUpdateTrigger["ON_ORDER_PAID"] = "ON_ORDER_PAID";
    /** Stock quantities will update while the payment is being processed. If the payment did not go through, items will restock. */
    InventoryUpdateTrigger["ON_ORDER_PLACED"] = "ON_ORDER_PLACED";
})(InventoryUpdateTrigger || (InventoryUpdateTrigger = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Retrieves the sites' order settings.
 *
 *
 * The `getOrdersSettings()` function returns a Promise that resolves to orders settings.
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.READ_ORDERS_SETTINGS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns The requested orders settings.
 * @fqn wix.ecom.orders_settings.api.v1.OrdersSettingsService.GetOrdersSettings
 */
export async function getOrdersSettings() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixEcomV1OrdersSettings.getOrdersSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates the sites' orders settings.
 *
 *
 * The `updateOrdersSettings()` function returns a Promise that resolves to the newly updated orders settings.
 * @public
 * @documentationMaturity preview
 * @requiredField ordersSettings
 * @param ordersSettings - Orders settings to update.
 * @permissionId ECOM.UPDATE_ORDERS_SETTINGS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @returns The updated orders settings.
 * @fqn wix.ecom.orders_settings.api.v1.OrdersSettingsService.UpdateOrdersSettings
 */
export async function updateOrdersSettings(ordersSettings) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        ordersSettings: ordersSettings,
    });
    const reqOpts = ambassadorWixEcomV1OrdersSettings.updateOrdersSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { ordersSettings: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['ordersSettings']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-orders-settings-orders-settings.universal.js.map