"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAndRedirectToCheckout = exports.createCheckoutFromTemplate = exports.queryCheckoutTemplates = exports.deleteCheckoutTemplate = exports.updateCheckoutTemplate = exports.getCheckoutTemplate = exports.createCheckoutTemplate = void 0;
const rest_modules_1 = require("@wix/sdk-runtime/rest-modules");
const float_1 = require("@wix/sdk-runtime/transformations/float");
const float_2 = require("@wix/sdk-runtime/transformations/float");
const bytes_1 = require("@wix/sdk-runtime/transformations/bytes");
const timestamp_1 = require("@wix/sdk-runtime/transformations/timestamp");
const timestamp_2 = require("@wix/sdk-runtime/transformations/timestamp");
const field_mask_1 = require("@wix/sdk-runtime/transformations/field-mask");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
const rest_modules_2 = require("@wix/sdk-runtime/rest-modules");
function resolveWixEcomCheckoutTemplateApiV1CheckoutTemplateServiceUrl(opts) {
    const domainToMappings = {
        'www._base_domain_': [
            {
                srcPath: '/ecom/v1/checkout-templates',
                destPath: '/v1/checkout-templates',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/ecom/v1/checkout-templates',
                destPath: '/v1/checkout-templates',
            },
        ],
    };
    return (0, rest_modules_2.resolveUrl)(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/ecom_checkout-templates';
/**
 * Creates a checkout template.
 *
 * A checkout template is used to create a new checkout that will include predefined information. For example, a single link with
 * a `checkoutTemplateId` can be shared with customers and each time the link is clicked, a new checkout page will be created
 * for that customer with certain checkout information already populated.
 *
 * The customizable features include the option to allow or to lock coupon codes or gift cards. For example, if a store owner is
 * using the checkout template to offer a flash sale to their social media followers, they may want to lock the option to apply an
 * additional coupon on top of the sale being offered. If so, they can set `customization.lockedCoupon` to `true`.
 *
 * A checkout can be created with a checkout template by calling `createCheckoutFromTemplate()`. The site may add further customizations to the new checkout and then redirect the customer using the new checkout's `checkoutUrl`.
 */
function createCheckoutTemplate(payload) {
    function __createCheckoutTemplate({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    {
                        path: 'checkoutTemplate.lineItems.catalogOverrideFields.physicalProperties.weight',
                    },
                    {
                        path: 'checkoutTemplate.customLineItems.physicalProperties.weight',
                    },
                ],
            },
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    {
                        path: 'checkoutTemplate.customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    {
                        path: 'checkoutTemplate.customLineItems.serviceProperties.scheduledDate',
                    },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout_template',
            method: 'POST',
            methodFqn: 'wix.ecom.checkout_template.api.v1.CheckoutTemplateService.CreateCheckoutTemplate',
            packageName: PACKAGE_NAME,
            url: resolveWixEcomCheckoutTemplateApiV1CheckoutTemplateServiceUrl({
                protoPath: '/v1/checkout-templates',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        {
                            path: 'checkoutTemplate.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        {
                            path: 'checkoutTemplate.customLineItems.physicalProperties.weight',
                        },
                    ],
                },
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        {
                            path: 'checkoutTemplate.customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        {
                            path: 'checkoutTemplate.customLineItems.serviceProperties.scheduledDate',
                        },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __createCheckoutTemplate;
}
exports.createCheckoutTemplate = createCheckoutTemplate;
/** Retrieves a checkout template. */
function getCheckoutTemplate(payload) {
    function __getCheckoutTemplate({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout_template',
            method: 'GET',
            methodFqn: 'wix.ecom.checkout_template.api.v1.CheckoutTemplateService.GetCheckoutTemplate',
            packageName: PACKAGE_NAME,
            url: resolveWixEcomCheckoutTemplateApiV1CheckoutTemplateServiceUrl({
                protoPath: '/v1/checkout-templates/{checkoutTemplateId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        {
                            path: 'checkoutTemplate.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        {
                            path: 'checkoutTemplate.customLineItems.physicalProperties.weight',
                        },
                    ],
                },
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        {
                            path: 'checkoutTemplate.customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        {
                            path: 'checkoutTemplate.customLineItems.serviceProperties.scheduledDate',
                        },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __getCheckoutTemplate;
}
exports.getCheckoutTemplate = getCheckoutTemplate;
/**
 * Updates a checkout template.
 *
 * If the info in a checkout template is updated, only new checkouts created from this template will include the updated items. Checkouts previously
 * created from this template before the update will not be affected.
 */
function updateCheckoutTemplate(payload) {
    function __updateCheckoutTemplate({ host }) {
        const serializedData = (0, transform_paths_1.transformPaths)(payload, [
            {
                transformFn: field_mask_1.transformSDKFieldMaskToRESTFieldMask,
                paths: [{ path: 'fieldMask' }],
            },
            {
                transformFn: float_1.transformSDKFloatToRESTFloat,
                paths: [
                    {
                        path: 'checkoutTemplate.lineItems.catalogOverrideFields.physicalProperties.weight',
                    },
                    {
                        path: 'checkoutTemplate.customLineItems.physicalProperties.weight',
                    },
                ],
            },
            {
                transformFn: timestamp_1.transformSDKTimestampToRESTTimestamp,
                paths: [
                    {
                        path: 'checkoutTemplate.customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                    },
                    {
                        path: 'checkoutTemplate.customLineItems.serviceProperties.scheduledDate',
                    },
                ],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout_template',
            method: 'PATCH',
            methodFqn: 'wix.ecom.checkout_template.api.v1.CheckoutTemplateService.UpdateCheckoutTemplate',
            packageName: PACKAGE_NAME,
            url: resolveWixEcomCheckoutTemplateApiV1CheckoutTemplateServiceUrl({
                protoPath: '/v1/checkout-templates/{checkoutTemplate.id}',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        {
                            path: 'checkoutTemplate.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        {
                            path: 'checkoutTemplate.customLineItems.physicalProperties.weight',
                        },
                    ],
                },
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        {
                            path: 'checkoutTemplate.customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        {
                            path: 'checkoutTemplate.customLineItems.serviceProperties.scheduledDate',
                        },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __updateCheckoutTemplate;
}
exports.updateCheckoutTemplate = updateCheckoutTemplate;
/**
 * Deletes a checkout template.
 *
 * If a checkout template is deleted and a customer attempts to create a checkout with that `checkoutTemplateId` then
 * the customer will be redirected to the domain site.
 */
function deleteCheckoutTemplate(payload) {
    function __deleteCheckoutTemplate({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout_template',
            method: 'DELETE',
            methodFqn: 'wix.ecom.checkout_template.api.v1.CheckoutTemplateService.DeleteCheckoutTemplate',
            packageName: PACKAGE_NAME,
            url: resolveWixEcomCheckoutTemplateApiV1CheckoutTemplateServiceUrl({
                protoPath: '/v1/checkout-templates/{checkoutTemplateId}',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
        };
        return metadata;
    }
    return __deleteCheckoutTemplate;
}
exports.deleteCheckoutTemplate = deleteCheckoutTemplate;
/**
 * Creates a query to retrieve a list of checkout templates.
 *
 * The `queryCheckoutTemplates()` function builds a query to retrieve a list of checkout templates and returns a `CheckoutTemplatesQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
 *
 * You can refine the query by chaining `CheckoutTemplatesQueryBuilder` functions onto the query. `CheckoutTemplatesQueryBuilder` functions enable you to sort, filter, and control the results that `queryCheckoutTemplates()` returns.
 *
 * `queryCheckoutTemplates()` runs with the following `CheckoutTemplatesQueryBuilder` default that you can override:
 * + `ascending("_id")`
 *
 * The functions that are chained to `queryCheckoutTemplates()` are applied in the order they are called. For example, if you apply `ascending("status")` and then `ascending("_id")`, the results are sorted first by the `"status"`, and then, if there are multiple results with the same `"status"`, the items are sorted by `"_id"`.
 *
 * The following `CheckoutTemplatesQueryBuilder` functions are supported for the `queryCheckoutTemplates()` function. For a full description of the checkout template object, see the object returned for the `items` property in `CheckoutTemplatesQueryResult`.
 */
function queryCheckoutTemplates(payload) {
    function __queryCheckoutTemplates({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout_template',
            method: 'POST',
            methodFqn: 'wix.ecom.checkout_template.api.v1.CheckoutTemplateService.QueryCheckoutTemplates',
            packageName: PACKAGE_NAME,
            url: resolveWixEcomCheckoutTemplateApiV1CheckoutTemplateServiceUrl({
                protoPath: '/v1/checkout-templates/query',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: float_2.transformRESTFloatToSDKFloat,
                    paths: [
                        {
                            path: 'checkoutTemplates.lineItems.catalogOverrideFields.physicalProperties.weight',
                        },
                        {
                            path: 'checkoutTemplates.customLineItems.physicalProperties.weight',
                        },
                    ],
                },
                {
                    transformFn: timestamp_2.transformRESTTimestampToSDKTimestamp,
                    paths: [
                        {
                            path: 'checkoutTemplates.customLineItems.subscriptionOptionInfo.subscriptionSettings.startDate',
                        },
                        {
                            path: 'checkoutTemplates.customLineItems.serviceProperties.scheduledDate',
                        },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __queryCheckoutTemplates;
}
exports.queryCheckoutTemplates = queryCheckoutTemplates;
/**
 * Creates a new checkout based on the checkout template.
 *
 * Before using this function, you must have a checkout template available. Create a checkout template with `createCheckoutTemplate()`.
 *
 * The customer can be directed to the new checkout using the checkout's `checkoutUrl`.
 */
function createCheckoutFromTemplate(payload) {
    function __createCheckoutFromTemplate({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout_template',
            method: 'POST',
            methodFqn: 'wix.ecom.checkout_template.api.v1.CheckoutTemplateService.CreateCheckoutFromTemplate',
            packageName: PACKAGE_NAME,
            url: resolveWixEcomCheckoutTemplateApiV1CheckoutTemplateServiceUrl({
                protoPath: '/v1/checkout-templates/{checkoutTemplateId}/create-checkout-from-template',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __createCheckoutFromTemplate;
}
exports.createCheckoutFromTemplate = createCheckoutFromTemplate;
/**
 * Creates a new checkout based on the checkout template and redirects to the new checkout page.
 *
 * Before using this function, you must have a checkout template available. Create a checkout template with `createCheckoutTemplate()`.
 *
 * To build a URL that uses this function, follow this format:
 * `https://www.wixapis.com/ecom/v1/checkout-templates/{checkoutTemplateId}/create-and-redirect-to-checkout?siteId={siteId}`
 *
 * To create a checkout but not automatically redirect to the checkout page, use `createCheckoutFromTemplate()`.
 */
function createAndRedirectToCheckout(payload) {
    function __createAndRedirectToCheckout({ host }) {
        const metadata = {
            entityFqdn: 'wix.ecom.v1.checkout_template',
            method: 'GET',
            methodFqn: 'wix.ecom.checkout_template.api.v1.CheckoutTemplateService.CreateAndRedirectToCheckout',
            packageName: PACKAGE_NAME,
            url: resolveWixEcomCheckoutTemplateApiV1CheckoutTemplateServiceUrl({
                protoPath: '/v1/checkout-templates/{checkoutTemplateId}/create-and-redirect-to-checkout',
                data: payload,
                host,
            }),
            params: (0, rest_modules_1.toURLSearchParams)(payload),
            transformResponse: (payload) => (0, transform_paths_1.transformPaths)(payload, [
                {
                    transformFn: bytes_1.transformRESTBytesToSDKBytes,
                    paths: [{ path: 'body' }],
                },
            ]),
        };
        return metadata;
    }
    return __createAndRedirectToCheckout;
}
exports.createAndRedirectToCheckout = createAndRedirectToCheckout;
//# sourceMappingURL=ecom-v1-checkout-template-checkout-templates.http.js.map