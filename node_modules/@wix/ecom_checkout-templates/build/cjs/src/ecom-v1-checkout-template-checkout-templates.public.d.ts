import { EventDefinition, HttpClient } from '@wix/sdk-types';
import { CheckoutTemplate, CheckoutTemplateCreatedEnvelope, CheckoutTemplateDeletedEnvelope, CheckoutTemplateNonNullableFields, CheckoutTemplateUpdatedEnvelope, CheckoutTemplateUsedEnvelope, CheckoutTemplatesQueryBuilder, CreateCheckoutFromTemplateResponse, CreateCheckoutFromTemplateResponseNonNullableFields, RawHttpResponse, RawHttpResponseNonNullableFields, UpdateCheckoutTemplate } from './ecom-v1-checkout-template-checkout-templates.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function createCheckoutTemplate(httpClient: HttpClient): CreateCheckoutTemplateSignature;
interface CreateCheckoutTemplateSignature {
    /**
     * Creates a checkout template.
     *
     * A checkout template is used to create a new checkout that will include predefined information. For example, a single link with
     * a `checkoutTemplateId` can be shared with customers and each time the link is clicked, a new checkout page will be created
     * for that customer with certain checkout information already populated.
     *
     * The customizable features include the option to allow or to lock coupon codes or gift cards. For example, if a store owner is
     * using the checkout template to offer a flash sale to their social media followers, they may want to lock the option to apply an
     * additional coupon on top of the sale being offered. If so, they can set `customization.lockedCoupon` to `true`.
     *
     * A checkout can be created with a checkout template by calling `createCheckoutFromTemplate()`. The site may add further customizations to the new checkout and then redirect the customer using the new checkout's `checkoutUrl`.
     * @param - Checkout template to create.
     * @returns Created checkout template.
     */
    (checkoutTemplate: CheckoutTemplate): Promise<CheckoutTemplate & CheckoutTemplateNonNullableFields>;
}
export declare function getCheckoutTemplate(httpClient: HttpClient): GetCheckoutTemplateSignature;
interface GetCheckoutTemplateSignature {
    /**
     * Retrieves a checkout template.
     * @param - ID of the checkout template to retrieve.
     * @returns Retrieved checkout template.
     */
    (checkoutTemplateId: string): Promise<CheckoutTemplate & CheckoutTemplateNonNullableFields>;
}
export declare function updateCheckoutTemplate(httpClient: HttpClient): UpdateCheckoutTemplateSignature;
interface UpdateCheckoutTemplateSignature {
    /**
     * Updates a checkout template.
     *
     * If the info in a checkout template is updated, only new checkouts created from this template will include the updated items. Checkouts previously
     * created from this template before the update will not be affected.
     * @param - Checkout template ID.
     * @param - Checkout template info to update.
     * @returns Updated checkout template.
     */
    (_id: string | null, checkoutTemplate: UpdateCheckoutTemplate): Promise<CheckoutTemplate & CheckoutTemplateNonNullableFields>;
}
export declare function deleteCheckoutTemplate(httpClient: HttpClient): DeleteCheckoutTemplateSignature;
interface DeleteCheckoutTemplateSignature {
    /**
     * Deletes a checkout template.
     *
     * If a checkout template is deleted and a customer attempts to create a checkout with that `checkoutTemplateId` then
     * the customer will be redirected to the domain site.
     * @param - ID of the checkout template to delete.
     */
    (checkoutTemplateId: string): Promise<void>;
}
export declare function queryCheckoutTemplates(httpClient: HttpClient): QueryCheckoutTemplatesSignature;
interface QueryCheckoutTemplatesSignature {
    /**
     * Creates a query to retrieve a list of checkout templates.
     *
     * The `queryCheckoutTemplates()` function builds a query to retrieve a list of checkout templates and returns a `CheckoutTemplatesQueryBuilder` object.
     *
     * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
     *
     * You can refine the query by chaining `CheckoutTemplatesQueryBuilder` functions onto the query. `CheckoutTemplatesQueryBuilder` functions enable you to sort, filter, and control the results that `queryCheckoutTemplates()` returns.
     *
     * `queryCheckoutTemplates()` runs with the following `CheckoutTemplatesQueryBuilder` default that you can override:
     * + `ascending("_id")`
     *
     * The functions that are chained to `queryCheckoutTemplates()` are applied in the order they are called. For example, if you apply `ascending("status")` and then `ascending("_id")`, the results are sorted first by the `"status"`, and then, if there are multiple results with the same `"status"`, the items are sorted by `"_id"`.
     *
     * The following `CheckoutTemplatesQueryBuilder` functions are supported for the `queryCheckoutTemplates()` function. For a full description of the checkout template object, see the object returned for the `items` property in `CheckoutTemplatesQueryResult`.
     */
    (): CheckoutTemplatesQueryBuilder;
}
export declare function createCheckoutFromTemplate(httpClient: HttpClient): CreateCheckoutFromTemplateSignature;
interface CreateCheckoutFromTemplateSignature {
    /**
     * Creates a new checkout based on the checkout template.
     *
     * Before using this function, you must have a checkout template available. Create a checkout template with `createCheckoutTemplate()`.
     *
     * The customer can be directed to the new checkout using the checkout's `checkoutUrl`.
     * @param - ID of the checkout template to use to create a checkout from.
     * @param - ID of the site associated with the checkout template.
     */
    (checkoutTemplateId: string, siteId: string): Promise<CreateCheckoutFromTemplateResponse & CreateCheckoutFromTemplateResponseNonNullableFields>;
}
export declare function createAndRedirectToCheckout(httpClient: HttpClient): CreateAndRedirectToCheckoutSignature;
interface CreateAndRedirectToCheckoutSignature {
    /**
     * Creates a new checkout based on the checkout template and redirects to the new checkout page.
     *
     * Before using this function, you must have a checkout template available. Create a checkout template with `createCheckoutTemplate()`.
     *
     * To build a URL that uses this function, follow this format:
     * `https://www.wixapis.com/ecom/v1/checkout-templates/{checkoutTemplateId}/create-and-redirect-to-checkout?siteId={siteId}`
     *
     * To create a checkout but not automatically redirect to the checkout page, use `createCheckoutFromTemplate()`.
     * @param - ID of the checkout template to use to create a checkout.
     * @param - ID of the site associated with the checkout template.
     */
    (checkoutTemplateId: string, siteId: string): Promise<RawHttpResponse & RawHttpResponseNonNullableFields>;
}
export declare const onCheckoutTemplateCreated: EventDefinition<CheckoutTemplateCreatedEnvelope, "wix.ecom.v1.checkout_template_created">;
export declare const onCheckoutTemplateDeleted: EventDefinition<CheckoutTemplateDeletedEnvelope, "wix.ecom.v1.checkout_template_deleted">;
export declare const onCheckoutTemplateUpdated: EventDefinition<CheckoutTemplateUpdatedEnvelope, "wix.ecom.v1.checkout_template_updated">;
export declare const onCheckoutTemplateUsed: EventDefinition<CheckoutTemplateUsedEnvelope, "wix.ecom.v1.checkout_template_used">;
export { ActionEvent, AdditionalFee, AdditionalFeeSource, Address, AddressLocation, AddressWithContact, AggregatedTaxBreakdown, ApplicableLineItems, ApplicationError, AppliedDiscount, AppliedDiscountDiscountSourceOneOf, AutoTaxFallbackCalculationDetails, BaseEventMetadata, BuyerInfo, BuyerInfoIdOneOf, CalculationErrors, CalculationErrorsShippingCalculationErrorOneOf, Carrier, CarrierError, CarrierErrors, CarrierServiceOption, CatalogOverrideFields, CatalogReference, ChannelType, ChargeType, Checkout, CheckoutCustomization, CheckoutTemplate, CheckoutTemplateCreatedEnvelope, CheckoutTemplateDeletedEnvelope, CheckoutTemplateNonNullableFields, CheckoutTemplateUpdatedEnvelope, CheckoutTemplateUsed, CheckoutTemplateUsedEnvelope, CheckoutTemplatesQueryBuilder, CheckoutTemplatesQueryResult, Color, ConversionInfo, Coupon, CreateAndRedirectToCheckoutRequest, CreateCheckoutFromTemplateRequest, CreateCheckoutFromTemplateResponse, CreateCheckoutFromTemplateResponseNonNullableFields, CreateCheckoutTemplateRequest, CreateCheckoutTemplateResponse, CreateCheckoutTemplateResponseNonNullableFields, CreatedBy, CreatedByIdOneOf, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, CustomContentReference, CustomField, CustomLineItem, CustomSettings, DeleteCheckoutTemplateRequest, DeleteCheckoutTemplateResponse, DeliveryAllocation, DeliveryLogistics, DeliveryTimeSlot, Description, DescriptionLine, DescriptionLineDescriptionLineValueOneOf, DescriptionLineName, DescriptionLineType, DescriptionLineValueOneOf, Details, DetailsKindOneOf, DiscountRule, DiscountRuleName, DiscountType, DomainEvent, DomainEventBodyOneOf, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, EventMetadata, ExtendedFields, ExternalReference, FallbackReason, FieldViolation, FileType, FocalPoint, FreeTrialPeriod, FullAddressContactDetails, GetCheckoutTemplateRequest, GetCheckoutTemplateResponse, GetCheckoutTemplateResponseNonNullableFields, GiftCard, Group, HeadersEntry, IdentificationData, IdentificationDataIdOneOf, InvalidMembership, ItemAvailabilityInfo, ItemAvailabilityStatus, ItemTaxFullDetails, ItemType, ItemTypeItemType, ItemTypeItemTypeDataOneOf, JurisdictionType, LineItem, LineItemDiscount, ManualCalculationReason, Membership, MembershipName, MembershipOptions, MembershipPaymentCredits, MerchantDiscount, MessageEnvelope, MultiCurrencyPrice, NameInLineItem, NameInOther, Other, OtherCharge, PaymentOption, PaymentOptionType, PhysicalProperties, PickupDetails, PickupMethod, PlainTextValue, Policy, PriceDescription, PriceSummary, ProductName, QueryCheckoutTemplatesRequest, QueryCheckoutTemplatesResponse, QueryCheckoutTemplatesResponseNonNullableFields, RateType, RawHttpResponse, RawHttpResponseNonNullableFields, Region, RestoreInfo, RuleType, Scope, SecuredMedia, SelectedCarrierServiceOption, SelectedCarrierServiceOptionOtherCharge, SelectedCarrierServiceOptionPrices, SelectedMembership, SelectedMemberships, ServiceProperties, Severity, ShippingInfo, ShippingOption, ShippingPrice, ShippingRegion, SortOrder, Sorting, Status, StreetAddress, SubscriptionFrequency, SubscriptionOptionInfo, SubscriptionSettings, SuggestedFix, SystemError, Target, TargetLineItem, TargetTargetTypeOneOf, TaxBreakdown, TaxCalculationDetails, TaxCalculationDetailsCalculationDetailsOneOf, TaxRateBreakdown, TaxSummary, TaxableAddress, TaxableAddressTaxableAddressDataOneOf, TaxableAddressType, Title, UpdateCheckoutTemplate, UpdateCheckoutTemplateRequest, UpdateCheckoutTemplateResponse, UpdateCheckoutTemplateResponseNonNullableFields, V1LineItem, ValidationError, VatId, VatType, Violation, WebClientCustomization, WebhookIdentityType, WeightUnit, } from './ecom-v1-checkout-template-checkout-templates.universal.js';
