import { RequestOptionsFactory } from '@wix/sdk-types';
/**
 * Creates a checkout template.
 *
 * A checkout template is used to create a new checkout that will include predefined information. For example, a single link with
 * a `checkoutTemplateId` can be shared with customers and each time the link is clicked, a new checkout page will be created
 * for that customer with certain checkout information already populated.
 *
 * The customizable features include the option to allow or to lock coupon codes or gift cards. For example, if a store owner is
 * using the checkout template to offer a flash sale to their social media followers, they may want to lock the option to apply an
 * additional coupon on top of the sale being offered. If so, they can set `customization.lockedCoupon` to `true`.
 *
 * A checkout can be created with a checkout template by calling `createCheckoutFromTemplate()`. The site may add further customizations to the new checkout and then redirect the customer using the new checkout's `checkoutUrl`.
 */
export declare function createCheckoutTemplate(payload: object): RequestOptionsFactory<any>;
/** Retrieves a checkout template. */
export declare function getCheckoutTemplate(payload: object): RequestOptionsFactory<any>;
/**
 * Updates a checkout template.
 *
 * If the info in a checkout template is updated, only new checkouts created from this template will include the updated items. Checkouts previously
 * created from this template before the update will not be affected.
 */
export declare function updateCheckoutTemplate(payload: object): RequestOptionsFactory<any>;
/**
 * Deletes a checkout template.
 *
 * If a checkout template is deleted and a customer attempts to create a checkout with that `checkoutTemplateId` then
 * the customer will be redirected to the domain site.
 */
export declare function deleteCheckoutTemplate(payload: object): RequestOptionsFactory<any>;
/**
 * Creates a query to retrieve a list of checkout templates.
 *
 * The `queryCheckoutTemplates()` function builds a query to retrieve a list of checkout templates and returns a `CheckoutTemplatesQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
 *
 * You can refine the query by chaining `CheckoutTemplatesQueryBuilder` functions onto the query. `CheckoutTemplatesQueryBuilder` functions enable you to sort, filter, and control the results that `queryCheckoutTemplates()` returns.
 *
 * `queryCheckoutTemplates()` runs with the following `CheckoutTemplatesQueryBuilder` default that you can override:
 * + `ascending("_id")`
 *
 * The functions that are chained to `queryCheckoutTemplates()` are applied in the order they are called. For example, if you apply `ascending("status")` and then `ascending("_id")`, the results are sorted first by the `"status"`, and then, if there are multiple results with the same `"status"`, the items are sorted by `"_id"`.
 *
 * The following `CheckoutTemplatesQueryBuilder` functions are supported for the `queryCheckoutTemplates()` function. For a full description of the checkout template object, see the object returned for the `items` property in `CheckoutTemplatesQueryResult`.
 */
export declare function queryCheckoutTemplates(payload: object): RequestOptionsFactory<any>;
/**
 * Creates a new checkout based on the checkout template.
 *
 * Before using this function, you must have a checkout template available. Create a checkout template with `createCheckoutTemplate()`.
 *
 * The customer can be directed to the new checkout using the checkout's `checkoutUrl`.
 */
export declare function createCheckoutFromTemplate(payload: object): RequestOptionsFactory<any>;
/**
 * Creates a new checkout based on the checkout template and redirects to the new checkout page.
 *
 * Before using this function, you must have a checkout template available. Create a checkout template with `createCheckoutTemplate()`.
 *
 * To build a URL that uses this function, follow this format:
 * `https://www.wixapis.com/ecom/v1/checkout-templates/{checkoutTemplateId}/create-and-redirect-to-checkout?siteId={siteId}`
 *
 * To create a checkout but not automatically redirect to the checkout page, use `createCheckoutFromTemplate()`.
 */
export declare function createAndRedirectToCheckout(payload: object): RequestOptionsFactory<any>;
