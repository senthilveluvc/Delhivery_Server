export interface CheckoutTemplate {
    /**
     * Checkout template ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Status of the checkout template.
     *
     * When `status` is `INACTIVE` checkouts will not be created with this template `_id`. Instead, the function will redirect to the domain site.
     *
     * Default: `ACTIVE`
     */
    status?: Status;
    /** Custom settings to apply to the checkout page created from this template. */
    customization?: CheckoutCustomization;
    /**
     * Catalog line items.
     *
     * Max: 300 items
     */
    lineItems?: V1LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * Max: 300 items
     */
    customLineItems?: CustomLineItem[];
    /**
     * Coupon code.
     *
     * Note that a checkout can only hold one `couponCode` at a time. If an additional `couponCode` is added, it will override the existing `couponCode`.
     * For additional information, see the Coupons API.
     */
    couponCode?: string | null;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference;
}
export declare enum Status {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    ACTIVE = "ACTIVE",
    INACTIVE = "INACTIVE"
}
export interface CheckoutCustomization {
    /** Web client customizations. These customizations only apply to the standard Wix checkout page. */
    webClient?: WebClientCustomization;
    /**
     * Whether to lock the ability to add or remove a gift card.
     *
     * Default: `false`
     */
    lockedGiftCard?: boolean;
    /**
     * Whether to lock the ability to apply or remove a coupon code.
     *
     * Default: `false`
     */
    lockedCoupon?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     *
     * Default: `false`
     */
    disabledManualPayment?: boolean;
}
export interface WebClientCustomization {
    /**
     * Whether to disable the "Continue shopping" button.
     *
     * Default: `false`
     */
    disabledContinueShoppingButton?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page
     *
     * Default: `false`
     */
    disabledPolicyAgreementCheckbox?: boolean;
}
export interface V1LineItem {
    /**
     * Item quantity.
     *
     * Min: `1` <br />
     * Max: `100000`
     */
    quantity?: number;
    /** Catalog and item reference. Holds IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /** Overriding values for catalog item properties. */
    catalogOverrideFields?: CatalogOverrideFields;
}
/** Used for grouping line items. Sent when an item is added to a cart, checkout, or order. */
export interface CatalogReference {
    /** ID of the item within the catalog it belongs to. */
    catalogItemId?: string;
    /**
     * ID of the app providing the catalog.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     *
     * For items from Wix catalogs, the following values always apply:
     * + Wix Stores: `"215238eb-22a5-4c36-9e7b-e7c08025e04e"`
     * + Wix Bookings: `"13d21c63-b5ec-5912-8397-c3a5ddb27a97"`
     * + Wix Restaurants: `"9a5d83fd-8570-482e-81ab-cfa88942ee60"`
     */
    appId?: string;
    /**
     * Additional item details in key:value pairs. Use this optional field to provide more specificity with item selection. The `options` field values differ depending on which catalog is providing the items.
     *
     * For products and variants from a Wix Stores catalog, learn more about [eCommerce integration](https://dev.wix.com/docs/rest/business-solutions/stores/catalog/e-commerce-integration).
     */
    options?: Record<string, any> | null;
}
export interface CatalogOverrideFields {
    /** Item name. */
    productName?: ProductName;
    /** Item price **after** discounts. */
    price?: string | null;
    /** Item price **before** discounts. */
    fullPrice?: string | null;
    /** Item description lines. Used when displaying the line item to customers. */
    descriptionLines?: DescriptionLine[];
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /** Item image. */
    image?: string;
    /** Payment method selected for the item. */
    paymentOption?: PaymentOption;
    /** Only eligible for catalog items with `lineItem.paymentOption.value` type of `DEPOSIT_ONLINE`. */
    depositAmount?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     */
    savePaymentMethod?: boolean | null;
}
export interface ProductName {
    /**
     * __Required.__ Item name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope).
     *
     * Min: 1 character.
     * Max: 200 characters.
     */
    original?: string;
    /**
     * Item name translated into the buyer's language.
     *
     * Min: 1 character.
     * Max: 400 characters.
     * Default: Same as `original`.
     */
    translated?: string | null;
}
export interface DescriptionLine extends DescriptionLineValueOneOf, DescriptionLineDescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
    /** Description line name. */
    name?: DescriptionLineName;
}
/** @oneof */
export interface DescriptionLineValueOneOf {
    /** Description line plain text value. */
    plainText?: PlainTextValue;
    /** Description line color value. */
    colorInfo?: Color;
}
/** @oneof */
export interface DescriptionLineDescriptionLineValueOneOf {
}
export interface DescriptionLineName {
    /** Description line name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
export interface PlainTextValue {
    /** Description line plain text value in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line plain text value translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
export interface Color {
    /** Description line color name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Description line color name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
    /** HEX or RGB color code for display. */
    code?: string | null;
}
export declare enum DescriptionLineType {
    /** Unrecognized type. */
    UNRECOGNISED = "UNRECOGNISED",
    /** Plain text type. */
    PLAIN_TEXT = "PLAIN_TEXT",
    /** Color type. */
    COLOR = "COLOR"
}
export interface PhysicalProperties {
    /** Line item weight. Measurement unit matches the weight unit specified in `weightUnit` in the request. */
    weight?: number | null;
    /** Stock-keeping unit. Learn more about [SKUs](https://www.wix.com/encyclopedia/definition/stock-keeping-unit-sku). */
    sku?: string | null;
    /** Whether this line item is shippable. */
    shippable?: boolean;
}
export interface PaymentOption {
    /**
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When selected, `price` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is specified in `depositAmount`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`.
     */
    value?: PaymentOptionType;
}
/** Type of selected payment option for catalog item */
export declare enum PaymentOptionType {
    /** The entire payment for this item happens as part of the checkout. */
    FULL_PAYMENT_ONLINE = "FULL_PAYMENT_ONLINE",
    /** The entire payment for this item happens after checkout. For example, when using cash, check, or other offline payment methods. */
    FULL_PAYMENT_OFFLINE = "FULL_PAYMENT_OFFLINE",
    /** Payment for this item is done by charging a membership. When selected, `price` is `0`. */
    MEMBERSHIP = "MEMBERSHIP",
    /** Partial payment to be paid upfront during checkout. The initial amount to be paid for each line item is specified in `depositAmount`. */
    DEPOSIT_ONLINE = "DEPOSIT_ONLINE",
    /** Payment for this item can only be done by charging a membership and must be manually redeemed in the dashboard by the site admin. When selected, `price` is `0`. */
    MEMBERSHIP_OFFLINE = "MEMBERSHIP_OFFLINE"
}
export interface CustomLineItem {
    /**
     * Custom line item quantity.
     *
     * Min: `1`
     * Max: `100000`
     */
    quantity?: number;
    /**
     * Custom line item price.
     *
     * Must be a number or a decimal without symbols.
     */
    price?: string;
    /** Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67". */
    priceDescription?: PriceDescription;
    /** Custom line item description lines. Used for display purposes for the cart, checkout and order. */
    descriptionLines?: DescriptionLine[];
    /** Custom line item's media. */
    media?: string;
    /**
     * Custom line item ID. If passed, `id` must be unique.
     *
     * Default: auto-generated ID
     */
    _id?: string | null;
    /** Tax group ID for this custom line item. */
    taxGroupId?: string | null;
    /** Name of the item or product. */
    productName?: ProductName;
    /** URL to the item's page on the site. When not provided, the link back from the cart page to the relevant product page will not work. */
    url?: string;
    /** Item type. Either a preset type or custom. */
    itemType?: ItemType;
    /** Item price **before** catalog-defined discount. Defaults to `price` when not provided. */
    fullPrice?: string | null;
    /**
     * Item quantity available for purchase. Only return this if inventory is managed.
     * Not returning this field means that the buyer can "infinitely" tick up the number of items in the cart.
     */
    quantityAvailable?: number | null;
    /** Physical properties of the item. */
    physicalProperties?: PhysicalProperties;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     *
     * + `FULL_PAYMENT_ONLINE` - Entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE` - Entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP` - Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is 0.
     * + `DEPOSIT_ONLINE` -  Partial payment for the given item to be paid upfront during the checkout. Amount to be paid is defined by deposit_amount field.
     */
    paymentOption?: PaymentOptionType;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * Used, among other things, when checking for valid memberships.
     */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     *
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field is the same as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     */
    rootCatalogItemId?: string | null;
    /**
     * Partial payment for the given item to be paid upfront during the checkout.
     *
     * Eligible for catalog items with type `DEPOSIT_ONLINE`.
     * When omitted, the item's price will not be split and is expected to be paid in a single installment.
     */
    depositAmount?: string | null;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
export interface PriceDescription {
    /** __Required.__ Price description in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Price description translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
export interface ItemType extends ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
/** @oneof */
export interface ItemTypeItemTypeDataOneOf {
    /** Preset item type. */
    preset?: ItemTypeItemType;
    /** Custom item type. When none of the preset types are suitable, specifies the custom type. */
    custom?: string;
}
export declare enum ItemTypeItemType {
    UNRECOGNISED = "UNRECOGNISED",
    PHYSICAL = "PHYSICAL",
    DIGITAL = "DIGITAL",
    GIFT_CARD = "GIFT_CARD",
    SERVICE = "SERVICE"
}
export interface SubscriptionOptionInfo {
    /** Subscription option settings. */
    subscriptionSettings?: SubscriptionSettings;
    /** Subscription option title. */
    title?: Title;
    /** Subscription option description. */
    description?: Description;
}
export interface SubscriptionSettings {
    /** Frequency of recurring payment. */
    frequency?: SubscriptionFrequency;
    /**
     * Interval of recurring payment.
     *
     * Default: `1`.
     * If SubscriptionFrequency is Day the minimum interval is 7
     */
    interval?: number | null;
    /** Whether subscription is renewed automatically at the end of each period. */
    autoRenewal?: boolean;
    /** Number of billing cycles before subscription ends. Ignored if `autoRenewal` is `true`. */
    billingCycles?: number | null;
}
/** Frequency unit of recurring payment */
export declare enum SubscriptionFrequency {
    UNDEFINED = "UNDEFINED",
    DAY = "DAY",
    WEEK = "WEEK",
    MONTH = "MONTH",
    YEAR = "YEAR"
}
export interface FreeTrialPeriod {
    /** Frequency of priod. Values: DAY, WEEK, MONTH, YEAR */
    frequency?: SubscriptionFrequency;
    /** interval of period */
    interval?: number;
}
export interface Title {
    /** Subscription option name in the site's default language as defined in the [request envelope](https://dev.wix.com/docs/build-apps/develop-your-app/frameworks/self-hosting/supported-extensions/backend-extensions/add-self-hosted-service-plugin-extensions#request-envelope). */
    original?: string;
    /**
     * Subscription option name translated into the buyer's language.
     *
     * Default: Same as `original`.
     */
    translated?: string | null;
}
export interface Description {
    /** Subscription option description. */
    original?: string;
    /** Translated subscription option description. */
    translated?: string | null;
}
export interface SecuredMedia {
    /** Media ID in Wix Media Manager. */
    _id?: string;
    /** Original filename. */
    fileName?: string;
    /** File type. */
    fileType?: FileType;
}
export declare enum FileType {
    UNSPECIFIED = "UNSPECIFIED",
    SECURE_PICTURE = "SECURE_PICTURE",
    SECURE_VIDEO = "SECURE_VIDEO",
    SECURE_DOCUMENT = "SECURE_DOCUMENT",
    SECURE_MUSIC = "SECURE_MUSIC",
    SECURE_ARCHIVE = "SECURE_ARCHIVE"
}
export interface ServiceProperties {
    /**
     * Date and time the service is to be provided, in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations) format.
     * For example, the start time of a class.
     */
    scheduledDate?: Date | null;
    /** The number of people participating in the service. For example, the number of people attending a class or the number of people per hotel room. */
    numberOfParticipants?: number | null;
}
export interface Policy {
    /** Policy title - should be translated */
    title?: string | null;
    /** Policy content - should be translated */
    content?: string;
}
export interface ExtendedFields {
    /**
     * Extended field data. Each key corresponds to the namespace of the app that created the extended fields.
     * The value of each key is structured according to the schema defined when the extended fields were configured.
     *
     * You can only access fields for which you have the appropriate permissions.
     *
     * Learn more about [extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields).
     */
    namespaces?: Record<string, Record<string, any>>;
}
export interface CustomContentReference {
    /**
     * ID of the app providing the content.
     *
     * You can get your app's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    appId?: string;
    /**
     * ID of the component within the app it belongs to.
     *
     * You can get your component's ID from its page in the [app dashboard](https://dev.wix.com/dc3/my-apps/).
     */
    componentId?: string;
}
export interface ExternalReference {
    /**
     * ID of the app associated with the purchase flow.
     * For example, the Wix Pay Links app ID.
     */
    appId?: string;
    /**
     * Reference to an external resource ID. Used to link the purchase flow to a specific entity in an external system.
     * For example, a Wix Pay Link ID.
     */
    resourceId?: string | null;
}
export interface CreateCheckoutTemplateRequest {
    /** Checkout template to create. */
    checkoutTemplate: CheckoutTemplate;
}
export interface CreateCheckoutTemplateResponse {
    /** Created checkout template. */
    checkoutTemplate?: CheckoutTemplate;
}
export interface GetCheckoutTemplateRequest {
    /** ID of the checkout template to retrieve. */
    checkoutTemplateId: string;
}
export interface GetCheckoutTemplateResponse {
    /** Retrieved checkout template. */
    checkoutTemplate?: CheckoutTemplate;
}
export interface UpdateCheckoutTemplateRequest {
    /** Checkout template info to update. */
    checkoutTemplate: CheckoutTemplate;
}
export interface UpdateCheckoutTemplateResponse {
    /** Updated checkout template. */
    checkoutTemplate?: CheckoutTemplate;
}
export interface DeleteCheckoutTemplateRequest {
    /** ID of the checkout template to delete. */
    checkoutTemplateId: string;
}
export interface DeleteCheckoutTemplateResponse {
}
export interface QueryCheckoutTemplatesRequest {
    /** Query options. */
    query?: CursorQuery;
}
export interface CursorQuery extends CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
    /**
     * Filter object in the following format:
     * `"filter" : {
     * "fieldName1": "value1",
     * "fieldName2":{"$operator":"value2"}
     * }`
     *
     * Example of operators: `$eq`, `$ne`, `$in`, `$startsWith`, `$exists`, `$hasSome`
     */
    filter?: Record<string, any> | null;
    /**
     * Sort object in the following format:
     * `[{"fieldName":"sortField1","order":"ASC"},{"fieldName":"sortField2","order":"DESC"}]`
     */
    sort?: Sorting[];
}
/** @oneof */
export interface CursorQueryPagingMethodOneOf {
    /** Cursor token pointing to a page of results. Not used in the first request. Following requests use the cursor token and not `filter` or `sort`. */
    cursorPaging?: CursorPaging;
}
export interface Sorting {
    /** Name of the field to sort by. */
    fieldName?: string;
    /** Sort order. */
    order?: SortOrder;
}
export declare enum SortOrder {
    /** Ascending order. */
    ASC = "ASC",
    /** Descending order. */
    DESC = "DESC"
}
export interface CursorPaging {
    /** Number of items to load. */
    limit?: number | null;
    /**
     * Pointer to the next or previous page in the list of results. </ br>
     *
     * You can get the relevant cursor token
     * from the `pagingMetadata` object in the previous call's response.
     * Not relevant for the first request.
     */
    cursor?: string | null;
}
export interface QueryCheckoutTemplatesResponse {
    /** Retrieved checkout templates. */
    checkoutTemplates?: CheckoutTemplate[];
    /** Paging metadata. */
    pagingMetadata?: CursorPagingMetadata;
}
export interface CursorPagingMetadata {
    /** Number of items returned in the response. */
    count?: number | null;
    /** Offset that was requested. */
    cursors?: Cursors;
    /**
     * Indicates if there are more results after the current page.
     * If `true`, another page of results can be retrieved.
     * If `false`, this is the last page.
     */
    hasNext?: boolean | null;
}
export interface Cursors {
    /** Cursor pointing to next page in the list of results. */
    next?: string | null;
    /** Cursor pointing to previous page in the list of results. */
    prev?: string | null;
}
export interface CreateCheckoutFromTemplateRequest {
    /** ID of the checkout template to use to create a checkout from. */
    checkoutTemplateId: string;
    /** ID of the site associated with the checkout template. */
    siteId: string;
}
export interface CreateCheckoutFromTemplateResponse {
    /** ID of the created checkout. */
    checkoutId?: string;
    /** URL of the created checkout page. */
    checkoutUrl?: string;
    /** Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order. */
    purchaseFlowId?: string | null;
}
/** Triggered when newly checkout created successfully from checkout template */
export interface CheckoutTemplateUsed {
    /** checkout template */
    checkoutTemplate?: CheckoutTemplate;
    /** newly created checkout */
    checkout?: Checkout;
}
export interface Checkout {
    /**
     * Checkout ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Line items.
     *
     * Max: 300 items
     * @readonly
     */
    lineItems?: LineItem[];
    /** Billing information. */
    billingInfo?: AddressWithContact;
    /** Shipping information. */
    shippingInfo?: ShippingInfo;
    /** [Buyer note](https://support.wix.com/en/article/wix-stores-viewing-buyer-notes) left by the customer. */
    buyerNote?: string | null;
    /** Buyer information. */
    buyerInfo?: BuyerInfo;
    /**
     * All converted prices are displayed in this currency in three-letter [ISO-4217 alphabetic](https://en.wikipedia.org/wiki/ISO_4217#Active_codes) format.
     * @readonly
     */
    conversionCurrency?: string;
    /**
     * Calculated price summary for the checkout.
     * @readonly
     */
    priceSummary?: PriceSummary;
    /**
     * Errors when calculating totals.
     * @readonly
     */
    calculationErrors?: CalculationErrors;
    /**
     * Applied gift card details.
     *
     * >**Note:** Gift cards are supported through the Wix UI, though the service plugin is not currently available. Learn more about [Wix Gift Cards](https://support.wix.com/en/article/wix-stores-setting-up-wix-gift-cards).
     * @readonly
     */
    giftCard?: GiftCard;
    /**
     * Applied discounts.
     * @readonly
     */
    appliedDiscounts?: AppliedDiscount[];
    /** Custom fields. */
    customFields?: CustomField[];
    /**
     * Weight measurement unit - defaults to site's weight unit.
     * @readonly
     */
    weightUnit?: WeightUnit;
    /**
     * Tax summary.
     * @readonly
     */
    taxSummary?: TaxSummary;
    /**
     * The currency used when submitting the order.
     * @readonly
     */
    currency?: string;
    /**
     * Sales channel that submitted the order.
     * @readonly
     */
    channelType?: ChannelType;
    /**
     * Site language in which original values are shown.
     * @readonly
     */
    siteLanguage?: string;
    /**
     * Language for communication with the buyer. Defaults to the site language.
     * For a site that supports multiple languages, this is the language the buyer selected.
     * @readonly
     */
    buyerLanguage?: string;
    /**
     * Whether an order was successfully created from this checkout.
     * For an order to be successful, it must be successfully paid for (unless the total is 0).
     * @readonly
     */
    completed?: boolean;
    /**
     * Whether tax is included in line item prices.
     * @readonly
     */
    taxIncludedInPrice?: boolean;
    /**
     * ID of the checkout's initiator.
     * @readonly
     */
    createdBy?: CreatedBy;
    /**
     * Date and time the checkout was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the checkout was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /**
     * Minimal amount to pay in order to place the order.
     * @readonly
     */
    payNow?: PriceSummary;
    /**
     * Remaining amount for the order to be fully paid.
     * @readonly
     */
    payLater?: PriceSummary;
    /** Memberships to apply when creating the order. */
    membershipOptions?: MembershipOptions;
    /** Additional Fees. */
    additionalFees?: AdditionalFee[];
    /** Cart ID that this checkout was created from. Empty if this checkout wasn't created from a cart. */
    cartId?: string | null;
    /**
     * List of validation violations raised by the [Validations service plugin](https://dev.wix.com/api/rest/wix-ecommerce/validations-integration-spi/introduction).
     * @readonly
     */
    violations?: Violation[];
    /**
     * Custom field data for the checkout object.
     *
     * [Extended fields](https://dev.wix.com/docs/rest/articles/getting-started/extended-fields) must be configured in the app dashboard before they can be accessed with API calls.
     */
    extendedFields?: ExtendedFields;
    /**
     * Persistent ID that correlates between the various eCommerce elements: cart, checkout, and order.
     * @readonly
     */
    purchaseFlowId?: string | null;
    /**
     * Additional settings for customization of the checkout process.
     *
     * > **Notes:**
     * > * Custom settings can only be set when [creating a checkout](https://dev.wix.com/docs/rest/api-reference/wix-e-commerce/checkout/create-checkout).
     * > * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions". Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customSettings?: CustomSettings;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference;
}
export interface LineItem {
    /**
     * Line item ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Item quantity.
     *
     * Min: `"1"`
     * Max: `"100000"`
     */
    quantity?: number;
    /** Catalog and item reference. Includes IDs for the item and the catalog it came from, as well as further optional info. Optional for custom line items, which don't trigger the Catalog service plugin. */
    catalogReference?: CatalogReference;
    /**
     * Item name.
     * + Stores - `product.name`
     * + Bookings - `service.info.name`
     * + Events - `ticket.name`
     * @readonly
     */
    productName?: ProductName;
    /**
     * URL to the item's page on the site.
     * @readonly
     */
    url?: string;
    /**
     * Item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    price?: MultiCurrencyPrice;
    /**
     * Total line item price **after** catalog-defined discount and line item discounts.
     * @readonly
     */
    lineItemPrice?: MultiCurrencyPrice;
    /**
     * Item price **before** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    fullPrice?: MultiCurrencyPrice;
    /**
     * Item price **before** line item discounts and **after** catalog-defined discount. Defaults to `price` when not provided.
     * @readonly
     */
    priceBeforeDiscounts?: MultiCurrencyPrice;
    /**
     * Total price after all discounts and tax.
     * @readonly
     */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /**
     * Total price after discounts, and before tax.
     * @readonly
     */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /**
     * Tax details for this line item.
     * @readonly
     */
    taxDetails?: ItemTaxFullDetails;
    /**
     * Discount for this line item's entire quantity.
     * @readonly
     */
    discount?: MultiCurrencyPrice;
    /**
     * Line item description lines. Used for display purposes for the cart, checkout and order.
     * @readonly
     */
    descriptionLines?: DescriptionLine[];
    /**
     * Line item image details.
     * @readonly
     */
    media?: string;
    /**
     * Item availability details.
     * @readonly
     */
    availability?: ItemAvailabilityInfo;
    /**
     * Physical properties of the item. When relevant, contains information such as SKU, item weight, and shippability.
     * @readonly
     */
    physicalProperties?: PhysicalProperties;
    /**
     * Item type. Either a preset type or custom.
     * @readonly
     */
    itemType?: ItemType;
    /**
     * Subscription option information.
     * @readonly
     */
    subscriptionOptionInfo?: SubscriptionOptionInfo;
    /**
     * Type of selected payment option for current item. Defaults to `FULL_PAYMENT_ONLINE`.
     * + `FULL_PAYMENT_ONLINE`: The entire payment for this item happens as part of the checkout.
     * + `FULL_PAYMENT_OFFLINE`: The entire payment for this item happens after the checkout. For example, when using cash, check, or other offline payment methods.
     * + `MEMBERSHIP`: Payment for this item is done by charging a membership. When this option is used, `lineItem.price.amount` is `0`.
     * + `DEPOSIT_ONLINE`: Partial payment to be paid upfront during the checkout. Initial amount to be paid for each line item is defined by `lineItem.deposit`.
     * + `MEMBERSHIP_OFFLINE`: Payment for this item can only be performed by using a membership and must be manually redeemed in the dashboard by the site owner. When this option is used, `lineItem.price.amount` is `0`.
     * @readonly
     */
    paymentOption?: PaymentOptionType;
    /**
     * Service properties. When relevant, this contains information such as date and number of participants.
     * @readonly
     */
    serviceProperties?: ServiceProperties;
    /**
     * In cases where `catalogReference.catalogItemId` is NOT the actual catalog item ID, this field will return the true item's ID.
     * + For example, for Wix Bookings, `catalogReference.catalogItemId` is the booking ID. Therefore this value is set to the service ID.
     * + In most cases, this field has the same value as `catalogReference.catalogItemId`.
     * + Used in membership validation.
     * @readonly
     */
    rootCatalogItemId?: string | null;
    /**
     * Additional description for the price. For example, when price is 0 but additional details about the actual price are needed - "Starts at $67".
     * @readonly
     */
    priceDescription?: PriceDescription;
    /**
     * Partial payment to be paid upfront during the checkout. Eligible for catalog items with `lineItem.paymentOption` type `DEPOSIT_ONLINE` only.
     * @readonly
     */
    depositAmount?: MultiCurrencyPrice;
    /**
     * Whether the line item is a custom line item. Custom line items don't trigger the Catalog service plugin.
     * @readonly
     */
    customLineItem?: boolean;
    /**
     * Item payment policy that requires customer consent to complete purchase. The payment policy will be displayed on the checkout page.
     * @readonly
     */
    consentRequiredPaymentPolicy?: string | null;
    /**
     * Overriding values for catalog item properties.
     *
     * To override catalog fields, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    catalogOverrideFields?: CatalogOverrideFields;
    /**
     * Whether to save the payment method on the order.
     *
     * Default: `false`
     * @readonly
     */
    savePaymentMethod?: boolean;
}
export interface MultiCurrencyPrice {
    /** Amount. */
    amount?: string;
    /**
     * Converted amount.
     * @readonly
     */
    convertedAmount?: string;
    /**
     * Amount formatted with currency symbol.
     * @readonly
     */
    formattedAmount?: string;
    /**
     * Converted amount formatted with currency symbol.
     * @readonly
     */
    formattedConvertedAmount?: string;
}
export interface ItemTaxFullDetails {
    /** Amount for which tax is calculated. */
    taxableAmount?: MultiCurrencyPrice;
    /** Tax rate %, as a decimal point between 0 and 1. */
    taxRate?: string;
    /** Calculated tax, based on `taxable_amount` and `tax_rate`. */
    totalTax?: MultiCurrencyPrice;
    /**
     * If breakdown exists, the sum of rates in the breakdown must equal `tax_rate`. Deprecated - use 'tax_breakdown' instead.
     * @readonly
     * @deprecated
     */
    rateBreakdown?: TaxRateBreakdown[];
}
export interface TaxRateBreakdown {
    /** Name of tax against which the calculation was performed. */
    name?: string;
    /** Rate at which this tax detail was calculated. */
    rate?: string;
    /** Amount of tax for this tax detail. */
    tax?: MultiCurrencyPrice;
}
/**
 * TaxBreakdown represents tax information for a line item.
 * It holds the tax amount and the tax rate for each tax authority that apply on the line item.
 */
export interface TaxBreakdown {
    /** The name of the jurisdiction to which this tax detail applies. For example, "New York" or "Quebec". */
    jurisdiction?: string | null;
    /** The amount of this line item price that was considered nontaxable. (Decimal value) */
    nonTaxableAmount?: MultiCurrencyPrice;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.0000 signifies 200% tax. (Decimal value) */
    rate?: string | null;
    /** The amount of tax estimated for this line item. (Decimal value) */
    taxAmount?: MultiCurrencyPrice;
    /** The taxable amount of this line item. */
    taxableAmount?: MultiCurrencyPrice;
    /** The type of tax that was calculated. Depends on the jurisdiction's tax laws. For example, "Sales Tax", "Income Tax", "Value Added Tax", etc. */
    taxType?: string | null;
    /**
     * The name of the tax against which this tax amount was calculated. For example, "NY State Sales Tax", "Quebec GST", etc.
     * This name should be explicit enough to allow the merchant to understand what tax was calculated.
     */
    taxName?: string | null;
    /** The type of the jurisdiction in which this tax detail applies. */
    jurisdictionType?: JurisdictionType;
}
/** JurisdictionType represents the type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
export declare enum JurisdictionType {
    UNDEFINED = "UNDEFINED",
    COUNTRY = "COUNTRY",
    STATE = "STATE",
    COUNTY = "COUNTY",
    CITY = "CITY",
    SPECIAL = "SPECIAL"
}
export interface FocalPoint {
    /** X-coordinate of the focal point. */
    x?: number;
    /** Y-coordinate of the focal point. */
    y?: number;
    /** crop by height */
    height?: number | null;
    /** crop by width */
    width?: number | null;
}
export interface ItemAvailabilityInfo {
    /** Item availability status. */
    status?: ItemAvailabilityStatus;
    /** Quantity available. */
    quantityAvailable?: number | null;
}
export declare enum ItemAvailabilityStatus {
    AVAILABLE = "AVAILABLE",
    /** Item does not exist */
    NOT_FOUND = "NOT_FOUND",
    /** Item not in stock */
    NOT_AVAILABLE = "NOT_AVAILABLE",
    /** Available quantity is less than requested */
    PARTIALLY_AVAILABLE = "PARTIALLY_AVAILABLE"
}
export interface Scope {
    /** Scope namespace (Wix Stores, Wix Bookings, Wix Events, Wix Pricing Plans) */
    namespace?: string;
    /** Coupon scope's applied group (e.g., event or ticket in Wix Events) */
    group?: Group;
}
export interface Group {
    /** Coupon scope's group (e.g., product or collection in Wix Stores). See [valid scope values](https://dev.wix.com/api/rest/coupons/coupons/valid-scope-values). */
    name?: string;
    /** Item ID (when the coupon scope is limited to just one item). */
    entityId?: string | null;
}
export interface TaxableAddress extends TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType;
}
/** @oneof */
export interface TaxableAddressTaxableAddressDataOneOf {
    /** taxable address type. if this field is selected, the address is automatically resolved, and the tax is calculated accordingly. */
    addressType?: TaxableAddressType;
}
export declare enum TaxableAddressType {
    UNKNOWN_TAXABLE_ADDRESS = "UNKNOWN_TAXABLE_ADDRESS",
    BUSINESS = "BUSINESS",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
/** Billing Info and shipping details */
export interface AddressWithContact {
    /** Address. */
    address?: Address;
    /** Contact details. */
    contactDetails?: FullAddressContactDetails;
}
/** Physical address */
export interface Address {
    /** Two-letter country code in [ISO-3166 alpha-2](https://www.iso.org/obp/ui/#search/code/) format. */
    country?: string | null;
    /** Code for a subdivision (such as state, prefecture, or province) in [ISO 3166-2](https://www.iso.org/standard/72483.html) format. */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Postal or zip code. */
    postalCode?: string | null;
    /** Street address. */
    streetAddress?: StreetAddress;
    /** Main address line (usually street name and number). */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apt, suite, floor. */
    addressLine2?: string | null;
    /**
     * Country's full name.
     * @readonly
     */
    countryFullname?: string | null;
    /**
     * Subdivision full-name.
     * @readonly
     */
    subdivisionFullname?: string | null;
}
export interface StreetAddress {
    /** Street number. */
    number?: string;
    /** Street name. */
    name?: string;
}
export interface AddressLocation {
    /** Address latitude. */
    latitude?: number | null;
    /** Address longitude. */
    longitude?: number | null;
}
/** Full contact details for an address */
export interface FullAddressContactDetails {
    /** First name. */
    firstName?: string | null;
    /** Last name. */
    lastName?: string | null;
    /** Phone number. */
    phone?: string | null;
    /** Company name. */
    company?: string | null;
    /** Tax information (for Brazil only). If ID is provided, `vatId.type` must also be set, `UNSPECIFIED` is not allowed. */
    vatId?: VatId;
}
export interface VatId {
    /** Customer's tax ID. */
    _id?: string;
    /**
     * Tax type.
     *
     * Supported values:
     * + `CPF`: for individual tax payers
     * + `CNPJ`: for corporations
     */
    type?: VatType;
}
/** tax info types */
export declare enum VatType {
    UNSPECIFIED = "UNSPECIFIED",
    /** CPF - for individual tax payers. */
    CPF = "CPF",
    /** CNPJ - for corporations */
    CNPJ = "CNPJ"
}
export interface ShippingInfo {
    /** Shipping address and contact details. */
    shippingDestination?: AddressWithContact;
    /** Selected option out of the options allowed for the `region`. */
    selectedCarrierServiceOption?: SelectedCarrierServiceOption;
    /**
     * Shipping region. Based on the address provided.
     * @readonly
     */
    region?: ShippingRegion;
    /**
     * All carrier options for this shipping rule.
     * @readonly
     */
    carrierServiceOptions?: CarrierServiceOption[];
}
export interface SelectedCarrierServiceOption {
    /** Unique identifier of selected option. For example, "usps_std_overnight". */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     * @readonly
     */
    title?: string;
    /**
     * Delivery logistics.
     * @readonly
     */
    logistics?: DeliveryLogistics;
    /**
     * Shipping costs.
     * @readonly
     */
    cost?: SelectedCarrierServiceOptionPrices;
    /**
     * Were we able to find the requested shipping option, or otherwise we fallback to the default one (the first)
     * @readonly
     */
    requestedShippingOption?: boolean;
    /** Other charges */
    otherCharges?: SelectedCarrierServiceOptionOtherCharge[];
    /** This carrier's unique ID */
    carrierId?: string | null;
}
export interface DeliveryLogistics {
    /** Expected delivery time, in free text. For example, "3-5 business days". */
    deliveryTime?: string | null;
    /** Instructions for caller, e.g for pickup: "Please deliver during opening hours, and please don't park in disabled parking spot". */
    instructions?: string | null;
    /** Pickup details. */
    pickupDetails?: PickupDetails;
}
export interface PickupDetails {
    /** Pickup address. */
    address?: Address;
    /**
     * Whether the pickup address is that of a business - this may effect tax calculation.
     * @deprecated
     */
    businessLocation?: boolean;
    /** Pickup method */
    pickupMethod?: PickupMethod;
}
export declare enum PickupMethod {
    UNKNOWN_METHOD = "UNKNOWN_METHOD",
    STORE_PICKUP = "STORE_PICKUP",
    PICKUP_POINT = "PICKUP_POINT"
}
export interface DeliveryTimeSlot {
    /** starting time of the delivery time slot */
    from?: Date | null;
    /** ending time of the delivery time slot */
    to?: Date | null;
}
export interface SelectedCarrierServiceOptionPrices {
    /** Total shipping price, after discount and after tax. */
    totalPriceAfterTax?: MultiCurrencyPrice;
    /** Total price of shipping after discounts (when relevant), and before tax. */
    totalPriceBeforeTax?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Shipping discount before tax. */
    totalDiscount?: MultiCurrencyPrice;
    /** Shipping price before discount and before tax. */
    price?: MultiCurrencyPrice;
}
export interface SelectedCarrierServiceOptionOtherCharge {
    /** Type of additional cost. */
    type?: ChargeType;
    /** Details of the charge, such as 'Full Coverage Insurance of up to 80% of value of shipment'. */
    details?: string | null;
    /** Price of added charge. */
    cost?: SelectedCarrierServiceOptionPrices;
}
export declare enum ChargeType {
    HANDLING_FEE = "HANDLING_FEE",
    INSURANCE = "INSURANCE"
}
export interface DeliveryAllocation {
    /** The delivery option's carrier details, could be multiple if the delivery option is a combination of multiple carriers */
    deliveryCarrier?: Carrier;
    /** The delivery region that are relevant for this delivery solution. */
    deliveryRegion?: Region;
    /** Populated if the delivery solution is a partially supplied by this carrier. */
    applicableLineItems?: ApplicableLineItems;
}
export interface Carrier {
    /** The carrier app id */
    appId?: string | null;
    /** Unique code that acts as an ID for a shipping rate. For example, `"usps_std_overnight"`. */
    code?: string;
}
export interface Region {
    /** The delivery region id. */
    _id?: string | null;
    /** The delivery region name. */
    name?: string | null;
}
export interface ApplicableLineItems {
    /** Line items that the delivery solution is for. */
    lineItemIds?: string[];
}
export interface ShippingRegion {
    /**
     * Shipping region ID.
     * @readonly
     */
    _id?: string;
    /** Shipping region name. */
    name?: string;
}
export interface CarrierServiceOption {
    /** Carrier ID. */
    carrierId?: string;
    /** Shipping options offered by this carrier for this request. */
    shippingOptions?: ShippingOption[];
}
export interface ShippingOption {
    /**
     * Unique code of provided shipping option like "usps_std_overnight".
     * For legacy calculators this would be the UUID of the option.
     */
    code?: string;
    /**
     * Title of the option, such as USPS Standard Overnight Delivery (in the requested locale).
     * For example, "Standard" or "First-Class Package International".
     */
    title?: string;
    /** Delivery logistics. */
    logistics?: DeliveryLogistics;
    /** Sipping price information. */
    cost?: ShippingPrice;
}
export interface ShippingPrice {
    /** Shipping price. */
    price?: MultiCurrencyPrice;
    /** Other costs such as insurance, handling & packaging for fragile items, etc. */
    otherCharges?: OtherCharge[];
}
export interface OtherCharge {
    /** Type of additional cost. */
    type?: ChargeType;
    /** Price of added cost. */
    price?: MultiCurrencyPrice;
}
export interface BuyerInfo extends BuyerInfoIdOneOf {
    /**
     * Visitor ID (if site visitor is **not** a member).
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @readonly
     */
    memberId?: string;
    /**
     * Contact ID. Auto-created if one does not yet exist. For more information, see [Contacts API](https://dev.wix.com/api/rest/contacts/contacts/introduction).
     * @readonly
     */
    contactId?: string | null;
    /** Buyer email address. */
    email?: string | null;
}
/** @oneof */
export interface BuyerInfoIdOneOf {
    /**
     * Visitor ID (if site visitor is **not** a member).
     * @readonly
     */
    visitorId?: string;
    /**
     * Member ID (if site visitor is a site member).
     * @readonly
     */
    memberId?: string;
}
export interface PriceSummary {
    /** Subtotal of all line items, before discounts and before tax. */
    subtotal?: MultiCurrencyPrice;
    /** Total shipping price, before discounts and before tax. */
    shipping?: MultiCurrencyPrice;
    /** Total tax. */
    tax?: MultiCurrencyPrice;
    /** Total calculated discount value. */
    discount?: MultiCurrencyPrice;
    /** Total price after discounts, gift cards, and tax. */
    total?: MultiCurrencyPrice;
    /** Total additional fees price before tax. */
    additionalFees?: MultiCurrencyPrice;
}
export interface CalculationErrors extends CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
    /** Tax calculation error. */
    taxCalculationError?: Details;
    /** Coupon calculation error. */
    couponCalculationError?: Details;
    /** Gift card calculation error. */
    giftCardCalculationError?: Details;
    /** Order validation errors. */
    orderValidationErrors?: ApplicationError[];
    /**
     * Membership payment methods calculation errors
     * For example, will indicate that a line item that must be paid with membership payment doesn't have one or selected memberships are invalid
     */
    membershipError?: Details;
    /** Discount Rule calculation error. */
    discountsCalculationError?: Details;
}
/** @oneof */
export interface CalculationErrorsShippingCalculationErrorOneOf {
    /** General shipping calculation error. */
    generalShippingCalculationError?: Details;
    /** Carrier errors. */
    carrierErrors?: CarrierErrors;
}
export interface Details extends DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
    /**
     * deprecated in API's - to enable migration from rendering arbitrary tracing to rest response
     * @deprecated
     */
    tracing?: Record<string, string>;
}
/** @oneof */
export interface DetailsKindOneOf {
    applicationError?: ApplicationError;
    validationError?: ValidationError;
    systemError?: SystemError;
}
export interface ApplicationError {
    /** Error code. */
    code?: string;
    /** Description of the error. */
    description?: string;
    /** Data related to the error. */
    data?: Record<string, any> | null;
}
/**
 * example result:
 * {
 * "fieldViolations": [
 * {
 * "field": "fieldA",
 * "description": "invalid music note. supported notes: [do,re,mi,fa,sol,la,ti]",
 * "violatedRule": "OTHER",
 * "ruleName": "INVALID_NOTE",
 * "data": {
 * "value": "FI"
 * }
 * },
 * {
 * "field": "fieldB",
 * "description": "field value out of range. supported range: [0-20]",
 * "violatedRule": "MAX",
 * "data": {
 * "threshold": 20
 * }
 * },
 * {
 * "field": "fieldC",
 * "description": "invalid phone number. provide a valid phone number of size: [7-12], supported characters: [0-9, +, -, (, )]",
 * "violatedRule": "FORMAT",
 * "data": {
 * "type": "PHONE"
 * }
 * }
 * ]
 * }
 */
export interface ValidationError {
    fieldViolations?: FieldViolation[];
}
export declare enum RuleType {
    VALIDATION = "VALIDATION",
    OTHER = "OTHER",
    MAX = "MAX",
    MIN = "MIN",
    MAX_LENGTH = "MAX_LENGTH",
    MIN_LENGTH = "MIN_LENGTH",
    MAX_SIZE = "MAX_SIZE",
    MIN_SIZE = "MIN_SIZE",
    FORMAT = "FORMAT",
    DECIMAL_LTE = "DECIMAL_LTE",
    DECIMAL_GTE = "DECIMAL_GTE",
    DECIMAL_LT = "DECIMAL_LT",
    DECIMAL_GT = "DECIMAL_GT",
    DECIMAL_MAX_SCALE = "DECIMAL_MAX_SCALE",
    INVALID_ENUM_VALUE = "INVALID_ENUM_VALUE",
    REQUIRED_FIELD = "REQUIRED_FIELD",
    FIELD_NOT_ALLOWED = "FIELD_NOT_ALLOWED",
    ONE_OF_ALIGNMENT = "ONE_OF_ALIGNMENT",
    EXACT_LENGTH = "EXACT_LENGTH",
    EXACT_SIZE = "EXACT_SIZE",
    REQUIRED_ONE_OF_FIELD = "REQUIRED_ONE_OF_FIELD"
}
export interface FieldViolation {
    field?: string;
    description?: string;
    violatedRule?: RuleType;
    /** applicable when violated_rule=OTHER */
    ruleName?: string | null;
    data?: Record<string, any> | null;
}
export interface SystemError {
    /** Error code. */
    errorCode?: string | null;
}
export interface CarrierErrors {
    /** Carrier errors. */
    errors?: CarrierError[];
}
export interface CarrierError {
    /** Carrier ID. */
    carrierId?: string;
    /** Error details. */
    error?: Details;
}
export interface GiftCard {
    /**
     * Gift Card ID.
     * @deprecated
     */
    _id?: string;
    /** Gift card obfuscated code. */
    obfuscatedCode?: string;
    /** Gift card value. */
    amount?: MultiCurrencyPrice;
    /** App ID of the gift card provider. */
    appId?: string;
    /**
     * External ID in the gift card provider's system.
     * Used for integration and tracking across different platforms.
     */
    externalId?: string | null;
}
export interface AppliedDiscount extends AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
    /** Discount type. */
    discountType?: DiscountType;
    /**
     * IDs of line items the discount applies to.
     * @deprecated IDs of line items the discount applies to.
     * @replacedBy line_items_discounts
     * @targetRemovalDate 2024-06-01
     */
    lineItemIds?: string[];
}
/** @oneof */
export interface AppliedDiscountDiscountSourceOneOf {
    /** Coupon details. */
    coupon?: Coupon;
    /** Merchant discount. */
    merchantDiscount?: MerchantDiscount;
    /** Discount rule */
    discountRule?: DiscountRule;
}
export declare enum DiscountType {
    GLOBAL = "GLOBAL",
    SPECIFIC_ITEMS = "SPECIFIC_ITEMS",
    SHIPPING = "SHIPPING"
}
/** Coupon */
export interface Coupon {
    /** Coupon ID. */
    _id?: string;
    /** Coupon code. */
    code?: string;
    /** Coupon value. */
    amount?: MultiCurrencyPrice;
    /** Coupon name. */
    name?: string;
}
export interface MerchantDiscount {
    /** Discount value. */
    amount?: MultiCurrencyPrice;
    /** Discount Percentage. Will be calculated from items price before other discounts. */
    percentage?: number | null;
}
export interface DiscountRule {
    /** Discount rule ID */
    _id?: string;
    /** Discount rule name */
    name?: DiscountRuleName;
    /** Discount value. */
    amount?: MultiCurrencyPrice;
}
export interface DiscountRuleName {
    /** Original discount rule name (in site's default language). */
    original?: string;
    /** Translated discount rule name according to buyer language. Defaults to `original` when not provided. */
    translated?: string | null;
}
export interface LineItemDiscount {
    /** ID of line item the discount applies to. */
    _id?: string;
    /** Discount value. */
    totalDiscountAmount?: MultiCurrencyPrice;
}
export interface CustomField {
    /** Custom field value. */
    value?: any;
    /** Custom field title. */
    title?: string;
    /** Translated custom field title. */
    translatedTitle?: string | null;
}
export declare enum WeightUnit {
    /** Weight unit can't be classified, due to an error */
    UNSPECIFIED_WEIGHT_UNIT = "UNSPECIFIED_WEIGHT_UNIT",
    /** Kilograms */
    KG = "KG",
    /** Pounds */
    LB = "LB"
}
export interface TaxSummary {
    /**
     * Amount for which tax is calculated, added from line items.
     * @readonly
     */
    taxableAmount?: MultiCurrencyPrice;
    /**
     * Calculated tax, added from line items.
     * @readonly
     */
    totalTax?: MultiCurrencyPrice;
    /**
     * Tax calculator that was active when the order was created.
     * @deprecated
     */
    calculationDetails?: TaxCalculationDetails;
}
export interface TaxCalculationDetails extends TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
    /** Rate calculation type. */
    rateType?: RateType;
}
/** @oneof */
export interface TaxCalculationDetailsCalculationDetailsOneOf {
    /** Reason the manual calculation was used. */
    manualRateReason?: ManualCalculationReason;
    /** Details of the fallback rate calculation. */
    autoTaxFallbackDetails?: AutoTaxFallbackCalculationDetails;
}
export declare enum RateType {
    /** no tax being collected for this request due to location of purchase */
    NO_TAX_COLLECTED = "NO_TAX_COLLECTED",
    /** manual rate used for calculation */
    MANUAL_RATE = "MANUAL_RATE",
    /** autotax rate used for calculation */
    AUTO_RATE = "AUTO_RATE",
    /** fallback rate used for calculation */
    FALLBACK_RATE = "FALLBACK_RATE"
}
export declare enum ManualCalculationReason {
    /** user set calculator in Business Manager to be Manual */
    GLOBAL_SETTING_TO_MANUAL = "GLOBAL_SETTING_TO_MANUAL",
    /** specific region is on manual even though Global setting is Auto-tax */
    REGION_SETTING_TO_MANUAL = "REGION_SETTING_TO_MANUAL"
}
export interface AutoTaxFallbackCalculationDetails {
    /** reason for fallback */
    fallbackReason?: FallbackReason;
    /** invalid request (i.e. address), timeout, internal error, license error, and others will be encoded here */
    error?: ApplicationError;
}
export declare enum FallbackReason {
    /** auto-tax failed to be calculated */
    AUTO_TAX_FAILED = "AUTO_TAX_FAILED",
    /** auto-tax was temporarily deactivated on a system-level */
    AUTO_TAX_DEACTIVATED = "AUTO_TAX_DEACTIVATED"
}
/**
 * The summary of the tax breakdown for all the line items. It will hold for each tax name, the aggregated tax amount paid for it and the tax rate.
 * Tax breakdown is the tax amount split to the tax authorities that applied on the line item.
 */
export interface AggregatedTaxBreakdown {
    /** The name of the tax against which this tax amount was calculated. */
    taxName?: string;
    /** The type of tax that was calculated. Depends on the company's nexus settings as well as the jurisdiction's tax laws. */
    taxType?: string;
    /** The name of the jurisdiction in which this tax detail applies. */
    jurisdiction?: string;
    /** The type of the jurisdiction in which this tax detail applies (e.g. Country,State,County,City,Special). */
    jurisdictionTypeEnum?: JurisdictionType;
    /** The rate at which this tax detail was calculated, e.g 0.1000 signifies 10% tax and 2.000 signifies 200% tax. (Decimal value) */
    rate?: string;
    /** The sum of all the tax from line items that calculated by the tax identifiers. */
    aggregatedTaxAmount?: MultiCurrencyPrice;
}
export declare enum ChannelType {
    /** Unspecified sales channel. This value is not supported. */
    UNSPECIFIED = "UNSPECIFIED",
    /** A web client. */
    WEB = "WEB",
    /** [Point of sale solutions](https://support.wix.com/en/wix-mobile-pos-2196395). */
    POS = "POS",
    /** [eBay shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-ebay-shop). */
    EBAY = "EBAY",
    /** [Amazon shop](https://support.wix.com/en/article/wix-stores-connecting-and-setting-up-an-amazon-shop). */
    AMAZON = "AMAZON",
    /** Other sales platform. */
    OTHER_PLATFORM = "OTHER_PLATFORM",
    /** [Wix Owner app](https://support.wix.com/article/wix-owner-app-an-overview). */
    WIX_APP_STORE = "WIX_APP_STORE",
    /** Wix Invoices app in [your dashboard](https://www.wix.com/my-account/site-selector/?buttonText=Select%20Site&title=Select%20a%20Site&autoSelectOnSingleSite=true&actionUrl=https:%2F%2Fwww.wix.com%2Fdashboard%2F%7B%7BmetaSiteId%7D%7D%2Finvoices/settings/general-settings) */
    WIX_INVOICES = "WIX_INVOICES",
    /** Wix merchant backoffice. */
    BACKOFFICE_MERCHANT = "BACKOFFICE_MERCHANT",
    /** Wish sales channel. */
    WISH = "WISH",
    /** [ClassPass sales channel](https://support.wix.com/en/article/wix-bookings-letting-clients-book-your-services-with-classpass). */
    CLASS_PASS = "CLASS_PASS",
    /** Global-E sales channel. */
    GLOBAL_E = "GLOBAL_E",
    /** [Facebook shop](https://support.wix.com/en/article/wix-stores-changes-to-facebook-shops). */
    FACEBOOK = "FACEBOOK",
    /** [Etsy sales channel](https://support.wix.com/en/article/wix-stores-request-adding-etsy-as-a-sales-channel). */
    ETSY = "ETSY",
    /** [TikTok sales channel](https://support.wix.com/en/article/wix-stores-request-adding-tiktok-as-a-sales-channel). */
    TIKTOK = "TIKTOK",
    /** [Faire marketplace integration](https://support.wix.com/en/article/wix-stores-creating-a-faire-store-using-the-faire-integration-app). */
    FAIRE_COM = "FAIRE_COM"
}
export interface CreatedBy extends CreatedByIdOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** @oneof */
export interface CreatedByIdOneOf {
    /**
     * User ID - when the order was created by a Wix user on behalf of a buyer.
     * For example, via POS (point of service).
     */
    userId?: string;
    /** Member ID - when the order was created by a **logged in** site visitor. */
    memberId?: string;
    /** Visitor ID - when the order was created by a site visitor that was **not** logged in. */
    visitorId?: string;
    /** App ID - when the order was created by an external application or Wix service. */
    appId?: string;
}
/** Reserved for internal use. */
export interface MembershipOptions {
    /**
     * Reserved for internal use.
     * @readonly
     */
    eligibleMemberships?: Membership[];
    /**
     * Reserved for internal use.
     * @readonly
     */
    invalidMemberships?: InvalidMembership[];
    /** Selected membership to apply to this checkout. */
    selectedMemberships?: SelectedMemberships;
}
export interface Membership {
    /** Membership ID. */
    _id?: string;
    /** ID of the application providing this payment option. */
    appId?: string;
    /** The name of this membership. */
    name?: MembershipName;
    /** Line item IDs which are "paid" for by this membership. */
    lineItemIds?: string[];
    /** Optional - For a membership that has limited credits, information about credit usage. */
    credits?: MembershipPaymentCredits;
    /** Optional - TMembership expiry date. */
    expirationDate?: Date | null;
    /** Additional data about this membership. */
    additionalData?: Record<string, any> | null;
}
export interface MembershipName {
    /** Membership name. */
    original?: string;
    /** Translated membership name. Defaults to `original` when not provided. */
    translated?: string | null;
}
export interface MembershipPaymentCredits {
    /** Membership's total amount of credits. */
    total?: number;
    /** Membership's remaining amount of credits. */
    remaining?: number;
}
export interface InvalidMembership {
    /** Membership details. */
    membership?: Membership;
    /** Reason why this membership is invalid and cannot be used. */
    reason?: string;
}
export interface SelectedMemberships {
    /** Selected memberships. */
    memberships?: SelectedMembership[];
}
export interface SelectedMembership {
    /** Membership ID. */
    _id?: string;
    /** ID of the app providing this payment option. */
    appId?: string;
    /** IDs of the line items this membership applies to. */
    lineItemIds?: string[];
}
export interface AdditionalFee {
    /** Additional fee's unique code (or ID) for future processing. */
    code?: string | null;
    /** Translated additional fee's name. */
    name?: string;
    /** Additional fee's price. */
    price?: MultiCurrencyPrice;
    /** Tax details. */
    taxDetails?: ItemTaxFullDetails;
    /** Provider's app id. */
    providerAppId?: string | null;
    /** Additional fee's price before tax. */
    priceBeforeTax?: MultiCurrencyPrice;
    /** Additional fee's price after tax. */
    priceAfterTax?: MultiCurrencyPrice;
    /**
     * Optional - Line items associated with this additional fee.
     * If no `lineItemIds` are provided, the fee will be associated with the whole cart/checkout/order.
     */
    lineItemIds?: string[];
    /** the source the additional fee was added from */
    source?: AdditionalFeeSource;
}
export declare enum AdditionalFeeSource {
    UNKNOWN_ADDITIONAL_FEE_SOURCE = "UNKNOWN_ADDITIONAL_FEE_SOURCE",
    /** The additional fee was added by an additional fee service plugin */
    SERVICE_PLUGIN = "SERVICE_PLUGIN",
    /** The additional fee was added on the item either via the catalog or on custom line item */
    ITEM = "ITEM",
    /** The additional fee was added manually on the request */
    MANUAL = "MANUAL"
}
export interface ConversionInfo {
    /**
     * The site currency.
     * @readonly
     */
    siteCurrency?: string;
    /**
     * The rate used when converting from the site currency to the checkout currency.
     * @readonly
     */
    conversionRate?: string;
}
export interface Violation {
    /** Severity of the violation. The violations are shown on the cart and checkout pages. A warning is displayed as yellow, and allows a site visitor to proceed with caution. An error is displayed as red, and doesn't allow a site visitor to proceed with the eCommerce flow. */
    severity?: Severity;
    /** Target location on a checkout or cart page where the violation will be displayed. */
    target?: Target;
    /** Violation description. Can include rich text. Only HTTP or HTTPS links in the following format are allowed: `<a href="https://www.wix.com">Click me</a>`. */
    description?: string | null;
}
export declare enum Severity {
    /** The user is allowed to move forward in the flow. */
    WARNING = "WARNING",
    /**
     * The user is blocked from moving forward in the flow.
     * For example, if callerContext is CART - moving to checkout is blocked. if callerContext is CHECKOUT, placing an order is blocked.
     */
    ERROR = "ERROR"
}
export interface Target extends TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** @oneof */
export interface TargetTargetTypeOneOf {
    /** General (other) violation. */
    other?: Other;
    /** Specific line item violation. */
    lineItem?: TargetLineItem;
}
/** Available locations on the webpage */
export declare enum NameInOther {
    /** Default location, in case no specific location is specified. */
    OTHER_DEFAULT = "OTHER_DEFAULT"
}
/** Available locations on the line item */
export declare enum NameInLineItem {
    /** Default location, in case no specific location is specified. */
    LINE_ITEM_DEFAULT = "LINE_ITEM_DEFAULT"
}
export declare enum SuggestedFix {
    /** No suggested fix is specified. The user should refer to the violation description to resolve the issue. */
    UNKNOWN_SUGGESTED_FIX = "UNKNOWN_SUGGESTED_FIX",
    /** The line item should be removed from the cart or checkout to resolve the violation. */
    REMOVE_LINE_ITEM = "REMOVE_LINE_ITEM"
}
/** General (other) violation. */
export interface Other {
    /** Location on a checkout or a cart page where a general (other) violation will be displayed. */
    name?: NameInOther;
}
/** Specific line item violation. */
export interface TargetLineItem {
    /** Location on a checkout or a cart page where the specific line item violation will be displayed. */
    name?: NameInLineItem;
    /** ID of the line item containing the violation. */
    _id?: string | null;
}
export interface CustomSettings {
    /**
     * Whether to restrict the option to add or remove a gift card on the checkout page.
     *
     * Default: `false`
     */
    lockGiftCard?: boolean;
    /**
     * Whether to restrict the option to add or remove a coupon code on the checkout page.
     *
     * Default: `false`
     */
    lockCouponCode?: boolean;
    /**
     * Whether to disable policy agreement checkout in the checkout page
     *
     * Default: `false`
     */
    disabledPolicyAgreementCheckbox?: boolean;
    /**
     * Whether to disable manual payment option for this checkout.
     *
     * Default: `false`
     */
    disabledManualPayment?: boolean;
}
export interface CreateAndRedirectToCheckoutRequest {
    /** ID of the checkout template to use to create a checkout. */
    checkoutTemplateId: string;
    /** ID of the site associated with the checkout template. */
    siteId: string;
}
export interface RawHttpResponse {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry[];
}
export interface HeadersEntry {
    key?: string;
    value?: string;
}
export interface DomainEvent extends DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
/** @oneof */
export interface DomainEventBodyOneOf {
    createdEvent?: EntityCreatedEvent;
    updatedEvent?: EntityUpdatedEvent;
    deletedEvent?: EntityDeletedEvent;
    actionEvent?: ActionEvent;
}
export interface EntityCreatedEvent {
    entity?: string;
}
export interface RestoreInfo {
    deletedDate?: Date | null;
}
export interface EntityUpdatedEvent {
    /**
     * Since platformized APIs only expose PATCH and not PUT we can't assume that the fields sent from the client are the actual diff.
     * This means that to generate a list of changed fields (as opposed to sent fields) one needs to traverse both objects.
     * We don't want to impose this on all developers and so we leave this traversal to the notification recipients which need it.
     */
    currentEntity?: string;
}
export interface EntityDeletedEvent {
    /** Entity that was deleted */
    deletedEntity?: string | null;
}
export interface ActionEvent {
    body?: string;
}
export interface MessageEnvelope {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
    /** Stringify payload. */
    data?: string;
}
export interface IdentificationData extends IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
    /** @readonly */
    identityType?: WebhookIdentityType;
}
/** @oneof */
export interface IdentificationDataIdOneOf {
    /** ID of a site visitor that has not logged in to the site. */
    anonymousVisitorId?: string;
    /** ID of a site visitor that has logged in to the site. */
    memberId?: string;
    /** ID of a Wix user (site owner, contributor, etc.). */
    wixUserId?: string;
    /** ID of an app. */
    appId?: string;
}
export declare enum WebhookIdentityType {
    UNKNOWN = "UNKNOWN",
    ANONYMOUS_VISITOR = "ANONYMOUS_VISITOR",
    MEMBER = "MEMBER",
    WIX_USER = "WIX_USER",
    APP = "APP"
}
interface WebClientCustomizationNonNullableFields {
    disabledContinueShoppingButton: boolean;
    disabledPolicyAgreementCheckbox: boolean;
}
interface CheckoutCustomizationNonNullableFields {
    webClient?: WebClientCustomizationNonNullableFields;
    lockedGiftCard: boolean;
    lockedCoupon: boolean;
    disabledManualPayment: boolean;
}
interface CatalogReferenceNonNullableFields {
    catalogItemId: string;
    appId: string;
}
interface ProductNameNonNullableFields {
    original: string;
}
interface PlainTextValueNonNullableFields {
    original: string;
}
interface ColorNonNullableFields {
    original: string;
}
interface DescriptionLineNameNonNullableFields {
    original: string;
}
interface DescriptionLineNonNullableFields {
    plainText?: PlainTextValueNonNullableFields;
    colorInfo?: ColorNonNullableFields;
    plainTextValue?: PlainTextValueNonNullableFields;
    color: string;
    name?: DescriptionLineNameNonNullableFields;
    lineType: DescriptionLineType;
}
interface PhysicalPropertiesNonNullableFields {
    shippable: boolean;
}
interface PaymentOptionNonNullableFields {
    value: PaymentOptionType;
}
interface CatalogOverrideFieldsNonNullableFields {
    productName?: ProductNameNonNullableFields;
    descriptionLines: DescriptionLineNonNullableFields[];
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    image: string;
    paymentOption?: PaymentOptionNonNullableFields;
}
interface V1LineItemNonNullableFields {
    quantity: number;
    catalogReference?: CatalogReferenceNonNullableFields;
    catalogOverrideFields?: CatalogOverrideFieldsNonNullableFields;
}
interface PriceDescriptionNonNullableFields {
    original: string;
}
interface ItemTypeNonNullableFields {
    preset: ItemTypeItemType;
    custom: string;
}
interface FreeTrialPeriodNonNullableFields {
    frequency: SubscriptionFrequency;
    interval: number;
}
interface SubscriptionSettingsNonNullableFields {
    frequency: SubscriptionFrequency;
    autoRenewal: boolean;
    enableCustomerCancellation: boolean;
    freeTrialPeriod?: FreeTrialPeriodNonNullableFields;
}
interface TitleNonNullableFields {
    original: string;
}
interface DescriptionNonNullableFields {
    original: string;
}
interface SubscriptionOptionInfoNonNullableFields {
    subscriptionSettings?: SubscriptionSettingsNonNullableFields;
    title?: TitleNonNullableFields;
    description?: DescriptionNonNullableFields;
}
interface SecuredMediaNonNullableFields {
    _id: string;
    fileName: string;
    fileType: FileType;
}
interface PolicyNonNullableFields {
    content: string;
}
interface CustomLineItemNonNullableFields {
    quantity: number;
    price: string;
    priceDescription?: PriceDescriptionNonNullableFields;
    descriptionLines: DescriptionLineNonNullableFields[];
    media: string;
    productName?: ProductNameNonNullableFields;
    url: string;
    itemType?: ItemTypeNonNullableFields;
    physicalProperties?: PhysicalPropertiesNonNullableFields;
    subscriptionOptionInfo?: SubscriptionOptionInfoNonNullableFields;
    digitalFile?: SecuredMediaNonNullableFields;
    paymentOption: PaymentOptionType;
    catalogReference?: CatalogReferenceNonNullableFields;
    priceUndetermined: boolean;
    fixedQuantity: boolean;
    savePaymentMethod: boolean;
    policies: PolicyNonNullableFields[];
    membersOnly: boolean;
}
interface CustomContentReferenceNonNullableFields {
    appId: string;
    componentId: string;
}
interface ExternalReferenceNonNullableFields {
    appId: string;
}
export interface CheckoutTemplateNonNullableFields {
    status: Status;
    customization?: CheckoutCustomizationNonNullableFields;
    lineItems: V1LineItemNonNullableFields[];
    customLineItems: CustomLineItemNonNullableFields[];
    customContentReference?: CustomContentReferenceNonNullableFields;
    externalReference?: ExternalReferenceNonNullableFields;
}
export interface CreateCheckoutTemplateResponseNonNullableFields {
    checkoutTemplate?: CheckoutTemplateNonNullableFields;
}
export interface GetCheckoutTemplateResponseNonNullableFields {
    checkoutTemplate?: CheckoutTemplateNonNullableFields;
}
export interface UpdateCheckoutTemplateResponseNonNullableFields {
    checkoutTemplate?: CheckoutTemplateNonNullableFields;
}
export interface QueryCheckoutTemplatesResponseNonNullableFields {
    checkoutTemplates: CheckoutTemplateNonNullableFields[];
}
export interface CreateCheckoutFromTemplateResponseNonNullableFields {
    checkoutId: string;
    checkoutUrl: string;
}
interface HeadersEntryNonNullableFields {
    key: string;
    value: string;
}
export interface RawHttpResponseNonNullableFields {
    body: Uint8Array;
    headers: HeadersEntryNonNullableFields[];
}
export interface BaseEventMetadata {
    /** App instance ID. */
    instanceId?: string | null;
    /** Event type. */
    eventType?: string;
    /** The identification type and identity data. */
    identity?: IdentificationData;
}
export interface EventMetadata extends BaseEventMetadata {
    /**
     * Unique event ID.
     * Allows clients to ignore duplicate webhooks.
     */
    _id?: string;
    /**
     * Assumes actions are also always typed to an entity_type
     * Example: wix.stores.catalog.product, wix.bookings.session, wix.payments.transaction
     */
    entityFqdn?: string;
    /**
     * This is top level to ease client code dispatching of messages (switch on entity_fqdn+slug)
     * This is although the created/updated/deleted notion is duplication of the oneof types
     * Example: created/updated/deleted/started/completed/email_opened
     */
    slug?: string;
    /** ID of the entity associated with the event. */
    entityId?: string;
    /** Event timestamp in [ISO-8601](https://en.wikipedia.org/wiki/ISO_8601) format and UTC time. For example: 2020-04-26T13:57:50.699Z */
    eventTime?: Date | null;
    /**
     * Whether the event was triggered as a result of a privacy regulation application
     * (for example, GDPR).
     */
    triggeredByAnonymizeRequest?: boolean | null;
    /** If present, indicates the action that triggered the event. */
    originatedFrom?: string | null;
    /**
     * A sequence number defining the order of updates to the underlying entity.
     * For example, given that some entity was updated at 16:00 and than again at 16:01,
     * it is guaranteed that the sequence number of the second update is strictly higher than the first.
     * As the consumer, you can use this value to ensure that you handle messages in the correct order.
     * To do so, you will need to persist this number on your end, and compare the sequence number from the
     * message against the one you have stored. Given that the stored number is higher, you should ignore the message.
     */
    entityEventSequence?: string | null;
}
export interface CheckoutTemplateCreatedEnvelope {
    entity: CheckoutTemplate;
    metadata: EventMetadata;
}
/**
 * Triggered when a checkout template is created.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionId ECOM.CHECKOUT_TEMPLATE_READ
 * @webhook
 * @eventType wix.ecom.v1.checkout_template_created
 * @documentationMaturity preview
 */
export declare function onCheckoutTemplateCreated(handler: (event: CheckoutTemplateCreatedEnvelope) => void | Promise<void>): void;
export interface CheckoutTemplateDeletedEnvelope {
    metadata: EventMetadata;
}
/**
 * Triggered when a checkout template is deleted.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionId ECOM.CHECKOUT_TEMPLATE_READ
 * @webhook
 * @eventType wix.ecom.v1.checkout_template_deleted
 * @documentationMaturity preview
 */
export declare function onCheckoutTemplateDeleted(handler: (event: CheckoutTemplateDeletedEnvelope) => void | Promise<void>): void;
export interface CheckoutTemplateUpdatedEnvelope {
    entity: CheckoutTemplate;
    metadata: EventMetadata;
}
/**
 * Triggered when a checkout template is updated.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionId ECOM.CHECKOUT_TEMPLATE_READ
 * @webhook
 * @eventType wix.ecom.v1.checkout_template_updated
 * @documentationMaturity preview
 */
export declare function onCheckoutTemplateUpdated(handler: (event: CheckoutTemplateUpdatedEnvelope) => void | Promise<void>): void;
export interface CheckoutTemplateUsedEnvelope {
    data: CheckoutTemplateUsed;
    metadata: EventMetadata;
}
/**
 * Triggered when a checkout is created from a checkout template.
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionId ECOM.CHECKOUT_TEMPLATE_READ
 * @webhook
 * @eventType wix.ecom.v1.checkout_template_used
 * @documentationMaturity preview
 */
export declare function onCheckoutTemplateUsed(handler: (event: CheckoutTemplateUsedEnvelope) => void | Promise<void>): void;
/**
 * Creates a checkout template.
 *
 * A checkout template is used to create a new checkout that will include predefined information. For example, a single link with
 * a `checkoutTemplateId` can be shared with customers and each time the link is clicked, a new checkout page will be created
 * for that customer with certain checkout information already populated.
 *
 * The customizable features include the option to allow or to lock coupon codes or gift cards. For example, if a store owner is
 * using the checkout template to offer a flash sale to their social media followers, they may want to lock the option to apply an
 * additional coupon on top of the sale being offered. If so, they can set `customization.lockedCoupon` to `true`.
 *
 * A checkout can be created with a checkout template by calling `createCheckoutFromTemplate()`. The site may add further customizations to the new checkout and then redirect the customer using the new checkout's `checkoutUrl`.
 * @param checkoutTemplate - Checkout template to create.
 * @public
 * @documentationMaturity preview
 * @requiredField checkoutTemplate
 * @requiredField checkoutTemplate.customLineItems.descriptionLines
 * @requiredField checkoutTemplate.customLineItems.descriptionLines.name
 * @requiredField checkoutTemplate.customLineItems.itemType
 * @requiredField checkoutTemplate.customLineItems.productName
 * @requiredField checkoutTemplate.customLineItems.quantity
 * @requiredField checkoutTemplate.lineItems.catalogReference
 * @requiredField checkoutTemplate.lineItems.catalogReference.appId
 * @requiredField checkoutTemplate.lineItems.catalogReference.catalogItemId
 * @requiredField checkoutTemplate.lineItems.quantity
 * @permissionId ECOM.CHECKOUT_TEMPLATE_CREATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns Created checkout template.
 * @fqn wix.ecom.checkout_template.api.v1.CheckoutTemplateService.CreateCheckoutTemplate
 */
export declare function createCheckoutTemplate(checkoutTemplate: CheckoutTemplate): Promise<CheckoutTemplate & CheckoutTemplateNonNullableFields>;
/**
 * Retrieves a checkout template.
 * @param checkoutTemplateId - ID of the checkout template to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField checkoutTemplateId
 * @permissionId ECOM.CHECKOUT_TEMPLATE_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns Retrieved checkout template.
 * @fqn wix.ecom.checkout_template.api.v1.CheckoutTemplateService.GetCheckoutTemplate
 */
export declare function getCheckoutTemplate(checkoutTemplateId: string): Promise<CheckoutTemplate & CheckoutTemplateNonNullableFields>;
/**
 * Updates a checkout template.
 *
 * If the info in a checkout template is updated, only new checkouts created from this template will include the updated items. Checkouts previously
 * created from this template before the update will not be affected.
 * @param _id - Checkout template ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField checkoutTemplate
 * @param checkoutTemplate - Checkout template info to update.
 * @permissionId ECOM.CHECKOUT_TEMPLATE_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns Updated checkout template.
 * @fqn wix.ecom.checkout_template.api.v1.CheckoutTemplateService.UpdateCheckoutTemplate
 */
export declare function updateCheckoutTemplate(_id: string | null, checkoutTemplate: UpdateCheckoutTemplate): Promise<CheckoutTemplate & CheckoutTemplateNonNullableFields>;
export interface UpdateCheckoutTemplate {
    /**
     * Checkout template ID.
     * @readonly
     */
    _id?: string | null;
    /**
     * Status of the checkout template.
     *
     * When `status` is `INACTIVE` checkouts will not be created with this template `_id`. Instead, the function will redirect to the domain site.
     *
     * Default: `ACTIVE`
     */
    status?: Status;
    /** Custom settings to apply to the checkout page created from this template. */
    customization?: CheckoutCustomization;
    /**
     * Catalog line items.
     *
     * Max: 300 items
     */
    lineItems?: V1LineItem[];
    /**
     * Custom line items. Custom line items don't trigger the Catalog service plugin.
     *
     * Max: 300 items
     */
    customLineItems?: CustomLineItem[];
    /**
     * Coupon code.
     *
     * Note that a checkout can only hold one `couponCode` at a time. If an additional `couponCode` is added, it will override the existing `couponCode`.
     * For additional information, see the Coupons API.
     */
    couponCode?: string | null;
    /**
     * Reference IDs for the app and component providing custom checkout page content.
     *
     * To access and manage custom checkout page content, your app must have the permission scope named "Manage eCommerce - Admin Permissions".
     * Learn more about [permission scopes](https://dev.wix.com/docs/build-apps/develop-your-app/access/authorization/about-permissions).
     */
    customContentReference?: CustomContentReference;
}
/**
 * Deletes a checkout template.
 *
 * If a checkout template is deleted and a customer attempts to create a checkout with that `checkoutTemplateId` then
 * the customer will be redirected to the domain site.
 * @param checkoutTemplateId - ID of the checkout template to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField checkoutTemplateId
 * @permissionId ECOM.CHECKOUT_TEMPLATE_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.checkout_template.api.v1.CheckoutTemplateService.DeleteCheckoutTemplate
 */
export declare function deleteCheckoutTemplate(checkoutTemplateId: string): Promise<void>;
/**
 * Creates a query to retrieve a list of checkout templates.
 *
 * The `queryCheckoutTemplates()` function builds a query to retrieve a list of checkout templates and returns a `CheckoutTemplatesQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the `find()` function.
 *
 * You can refine the query by chaining `CheckoutTemplatesQueryBuilder` functions onto the query. `CheckoutTemplatesQueryBuilder` functions enable you to sort, filter, and control the results that `queryCheckoutTemplates()` returns.
 *
 * `queryCheckoutTemplates()` runs with the following `CheckoutTemplatesQueryBuilder` default that you can override:
 * + `ascending("_id")`
 *
 * The functions that are chained to `queryCheckoutTemplates()` are applied in the order they are called. For example, if you apply `ascending("status")` and then `ascending("_id")`, the results are sorted first by the `"status"`, and then, if there are multiple results with the same `"status"`, the items are sorted by `"_id"`.
 *
 * The following `CheckoutTemplatesQueryBuilder` functions are supported for the `queryCheckoutTemplates()` function. For a full description of the checkout template object, see the object returned for the `items` property in `CheckoutTemplatesQueryResult`.
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionId ECOM.CHECKOUT_TEMPLATE_READ
 * @applicableIdentity APP
 * @fqn wix.ecom.checkout_template.api.v1.CheckoutTemplateService.QueryCheckoutTemplates
 */
export declare function queryCheckoutTemplates(): CheckoutTemplatesQueryBuilder;
interface QueryCursorResult {
    cursors: Cursors;
    hasNext: () => boolean;
    hasPrev: () => boolean;
    length: number;
    pageSize: number;
}
export interface CheckoutTemplatesQueryResult extends QueryCursorResult {
    items: CheckoutTemplate[];
    query: CheckoutTemplatesQueryBuilder;
    next: () => Promise<CheckoutTemplatesQueryResult>;
    prev: () => Promise<CheckoutTemplatesQueryResult>;
}
export interface CheckoutTemplatesQueryBuilder {
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    eq: (propertyName: '_id' | 'status', value: any) => CheckoutTemplatesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `value`.
     * @param value - Value to compare against.
     * @documentationMaturity preview
     */
    ne: (propertyName: '_id' | 'status', value: any) => CheckoutTemplatesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `string`.
     * @param string - String to compare against. Case-insensitive.
     * @documentationMaturity preview
     */
    startsWith: (propertyName: '_id', value: string) => CheckoutTemplatesQueryBuilder;
    /** @param propertyName - Property whose value is compared with `values`.
     * @param values - List of values to compare against.
     * @documentationMaturity preview
     */
    hasSome: (propertyName: '_id' | 'status', value: any[]) => CheckoutTemplatesQueryBuilder;
    /** @documentationMaturity preview */
    in: (propertyName: '_id' | 'status', value: any) => CheckoutTemplatesQueryBuilder;
    /** @documentationMaturity preview */
    exists: (propertyName: '_id' | 'status', value: boolean) => CheckoutTemplatesQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    ascending: (...propertyNames: Array<'_id' | 'status'>) => CheckoutTemplatesQueryBuilder;
    /** @param propertyNames - Properties used in the sort. To sort by multiple properties, pass properties as additional arguments.
     * @documentationMaturity preview
     */
    descending: (...propertyNames: Array<'_id' | 'status'>) => CheckoutTemplatesQueryBuilder;
    /** @param limit - Number of items to return, which is also the `pageSize` of the results object.
     * @documentationMaturity preview
     */
    limit: (limit: number) => CheckoutTemplatesQueryBuilder;
    /** @param cursor - A pointer to specific record
     * @documentationMaturity preview
     */
    skipTo: (cursor: string) => CheckoutTemplatesQueryBuilder;
    /** @documentationMaturity preview */
    find: () => Promise<CheckoutTemplatesQueryResult>;
}
/**
 * Creates a new checkout based on the checkout template.
 *
 * Before using this function, you must have a checkout template available. Create a checkout template with `createCheckoutTemplate()`.
 *
 * The customer can be directed to the new checkout using the checkout's `checkoutUrl`.
 * @param checkoutTemplateId - ID of the checkout template to use to create a checkout from.
 * @param siteId - ID of the site associated with the checkout template.
 * @public
 * @documentationMaturity preview
 * @requiredField checkoutTemplateId
 * @requiredField siteId
 * @permissionId ECOM.CHECKOUT_TEMPLATE_CREATE_CHECKOUT
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.ecom.checkout_template.api.v1.CheckoutTemplateService.CreateCheckoutFromTemplate
 */
export declare function createCheckoutFromTemplate(checkoutTemplateId: string, siteId: string): Promise<CreateCheckoutFromTemplateResponse & CreateCheckoutFromTemplateResponseNonNullableFields>;
/**
 * Creates a new checkout based on the checkout template and redirects to the new checkout page.
 *
 * Before using this function, you must have a checkout template available. Create a checkout template with `createCheckoutTemplate()`.
 *
 * To build a URL that uses this function, follow this format:
 * `https://www.wixapis.com/ecom/v1/checkout-templates/{checkoutTemplateId}/create-and-redirect-to-checkout?siteId={siteId}`
 *
 * To create a checkout but not automatically redirect to the checkout page, use `createCheckoutFromTemplate()`.
 * @param checkoutTemplateId - ID of the checkout template to use to create a checkout.
 * @param siteId - ID of the site associated with the checkout template.
 * @public
 * @documentationMaturity preview
 * @requiredField checkoutTemplateId
 * @requiredField siteId
 * @fqn wix.ecom.checkout_template.api.v1.CheckoutTemplateService.CreateAndRedirectToCheckout
 */
export declare function createAndRedirectToCheckout(checkoutTemplateId: string, siteId: string): Promise<RawHttpResponse & RawHttpResponseNonNullableFields>;
export {};
