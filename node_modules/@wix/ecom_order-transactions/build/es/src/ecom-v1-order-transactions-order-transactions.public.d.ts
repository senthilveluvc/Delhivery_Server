import { HttpClient } from '@wix/sdk-types';
import { AddPaymentsResponse, AddPaymentsResponseNonNullableFields, BulkUpdatePaymentStatusesOptions, BulkUpdatePaymentStatusesResponse, BulkUpdatePaymentStatusesResponseNonNullableFields, ListTransactionsForMultipleOrdersResponse, ListTransactionsForMultipleOrdersResponseNonNullableFields, ListTransactionsForSingleOrderResponse, ListTransactionsForSingleOrderResponseNonNullableFields, Payment, PaymentAndOrderId, UpdatePaymentStatusIdentifiers, UpdatePaymentStatusOptions, UpdatePaymentStatusResponse, UpdatePaymentStatusResponseNonNullableFields } from './ecom-v1-order-transactions-order-transactions.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function listTransactionsForSingleOrder(httpClient: HttpClient): ListTransactionsForSingleOrderSignature;
interface ListTransactionsForSingleOrderSignature {
    /**
     * Retrieves information about payments and refunds associated with a specified order.
     *
     *
     * The `listTransactionsForSingleOrder()` function returns a Promise that resolves when the specified order's transaction records are retrieved.
     * @param - Order ID.
     */
    (orderId: string): Promise<ListTransactionsForSingleOrderResponse & ListTransactionsForSingleOrderResponseNonNullableFields>;
}
export declare function listTransactionsForMultipleOrders(httpClient: HttpClient): ListTransactionsForMultipleOrdersSignature;
interface ListTransactionsForMultipleOrdersSignature {
    /**
     * Retrieves information about payments and refunds associated with all specified orders.
     *
     *
     * The `listTransactionsForMultipleOrders()` function returns a Promise that resolves when the specified orders' transaction records are retrieved.
     * @param - Order IDs for which to retrieve transactions.
     */
    (orderIds: string[]): Promise<ListTransactionsForMultipleOrdersResponse & ListTransactionsForMultipleOrdersResponseNonNullableFields>;
}
export declare function addPayments(httpClient: HttpClient): AddPaymentsSignature;
interface AddPaymentsSignature {
    /**
     * Adds up to 50 payment records to an order.
     *
     *
     * The `addPayments()` function returns a Promise that resolves when the payment records are added to an order.
     *
     * > **Note:** This does **NOT** perform the actual charging - the order is only updated with records of the payments.
     * @param - Order ID.
     * @param - Payments to be added to order.
     */
    (orderId: string, payments: Payment[]): Promise<AddPaymentsResponse & AddPaymentsResponseNonNullableFields>;
}
export declare function updatePaymentStatus(httpClient: HttpClient): UpdatePaymentStatusSignature;
interface UpdatePaymentStatusSignature {
    /**
     * Updates the status of an order's payment.
     *
     *
     * The `updatePaymentStatus()` function returns a Promise that resolves when the payment status is updated.
     */
    (identifiers: UpdatePaymentStatusIdentifiers, options?: UpdatePaymentStatusOptions | undefined): Promise<UpdatePaymentStatusResponse & UpdatePaymentStatusResponseNonNullableFields>;
}
export declare function bulkUpdatePaymentStatuses(httpClient: HttpClient): BulkUpdatePaymentStatusesSignature;
interface BulkUpdatePaymentStatusesSignature {
    /**
     * Updates multiple order payments with a specified status.
     *
     *
     * The `bulkUpdatePaymentStatus()` function returns a Promise that resolves when the payment statuses are updated.
     * @param - Order and payment IDs for which to update payment status.
     */
    (paymentAndOrderIds: PaymentAndOrderId[], options?: BulkUpdatePaymentStatusesOptions | undefined): Promise<BulkUpdatePaymentStatusesResponse & BulkUpdatePaymentStatusesResponseNonNullableFields>;
}
export { ActionEvent, ActionType, Activity, ActivityType, AddInvoiceToOrderRequest, AddInvoiceToOrderResponse, AddPaymentsRequest, AddPaymentsResponse, AddPaymentsResponseNonNullableFields, AddRefundRequest, AddRefundResponse, AdditionalFeeRefund, Address, AddressAddressLine1OptionsOneOf, AggregatedRefundSummary, ApplicationError, AppliedCoupon, AuthorizationActionFailureDetails, AuthorizationCapture, AuthorizationCaptureStatus, AuthorizationDetails, AuthorizationVoid, AuthorizationVoidStatus, BillingInfo, BulkActionMetadata, BulkGenerateInvoicesRequest, BulkGenerateInvoicesResponse, BulkInvoiceResult, BulkPaymentResult, BulkUpdatePaymentStatusesOptions, BulkUpdatePaymentStatusesRequest, BulkUpdatePaymentStatusesResponse, BulkUpdatePaymentStatusesResponseNonNullableFields, BuyerDetails, BuyerInfo, CalculateRefundItemRequest, CalculateRefundItemResponse, CalculateRefundRequest, CalculateRefundResponse, ChannelInfo, ChannelType, CreditCardPaymentMethodDetails, CursorPaging, CursorPagingMetadata, CursorQuery, CursorQueryPagingMethodOneOf, Cursors, CustomField, CustomTextFieldSelection, DiffmatokyPayload, DigitalFile, Discount, DomainEvent, DomainEventBodyOneOf, EnteredBy, EnteredByIdentityType, EntityCreatedEvent, EntityDeletedEvent, EntityUpdatedEvent, ErrorInformation, ExternalReceiptInfo, Fulfillment, FulfillmentLineItem, FulfillmentStatus, FulfillmentTrackingInfo, FullName, GenerateInvoiceRequest, GenerateInvoiceResponse, GetRefundabilityStatusRequest, GetRefundabilityStatusResponse, GiftCard, GiftCardPaymentDetails, IdentificationData, IdentificationDataIdOneOf, IdentityType, IndexingMessage, InvoiceForOrder, InvoiceInfo, InvoiceSource, InvoicesForOrder, ItemMetadata, LineItem, LineItemPriceData, LineItemRefund, LineItemType, ListInvoicesForMultipleOrdersRequest, ListInvoicesForMultipleOrdersResponse, ListInvoicesForSingleOrderRequest, ListInvoicesForSingleOrderResponse, ListTransactionsForMultipleOrdersRequest, ListTransactionsForMultipleOrdersResponse, ListTransactionsForMultipleOrdersResponseNonNullableFields, ListTransactionsForSingleOrderRequest, ListTransactionsForSingleOrderResponse, ListTransactionsForSingleOrderResponseNonNullableFields, ManuallyRefundableReason, MaskedPayment, MediaItem, MediaItemType, MembershipName, MembershipPaymentDetails, MembershipPaymentStatus, MessageEnvelope, NonRefundableReason, OptionSelection, Order, OrderRefunded, OrderTransactions, Payment, PaymentAndOrderId, PaymentPaymentDetailsOneOf, PaymentReceiptInfoOneOf, PaymentRefund, PaymentStatus, PaymentsUpdated, PickupAddress, PickupDetails, Price, QueryOrderTransactionsRequest, QueryOrderTransactionsResponse, Reason, Refund, RefundCompleted, RefundCreated, RefundDetails, RefundItem, RefundSideEffects, RefundStatus, RefundStatusInfo, RefundTransaction, Refundability, RefundabilityAdditionalRefundabilityInfoOneOf, RefundableStatus, RegularPaymentDetails, RegularPaymentDetailsPaymentMethodDetailsOneOf, RestockInfo, RestockItem, RestockType, RestoreInfo, ScheduledAction, ShipmentDetails, ShippingInfo, ShippingInfoDetailsOneOf, ShippingPriceData, ShippingRefund, SnapshotMessage, SortOrder, Sorting, Street, SubscriptionFrequency, SubscriptionInfo, SubscriptionOptionInfo, SubscriptionSettings, Totals, TrackingInfo, TransactionStatus, TriggerRefundRequest, TriggerRefundResponse, UpdatePaymentStatusIdentifiers, UpdatePaymentStatusOptions, UpdatePaymentStatusRequest, UpdatePaymentStatusResponse, UpdatePaymentStatusResponseNonNullableFields, UpdatePaymentsRequest, UpdatePaymentsResponse, UpdateRefundRequest, UpdateRefundResponse, UpdateRefundTransactionRequest, UpdateRefundTransactionResponse, V2InvoiceInfo, V2Refund, VatId, VatType, WebhookIdentityType, WeightUnit, WixReceiptInfo, } from './ecom-v1-order-transactions-order-transactions.universal.js';
