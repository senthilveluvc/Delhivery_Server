import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1OrderTransactions from './ecom-v1-order-transactions-order-transactions.http.js';
export var TransactionStatus;
(function (TransactionStatus) {
    TransactionStatus["UNDEFINED"] = "UNDEFINED";
    TransactionStatus["APPROVED"] = "APPROVED";
    TransactionStatus["PENDING"] = "PENDING";
    TransactionStatus["PENDING_MERCHANT"] = "PENDING_MERCHANT";
    TransactionStatus["CANCELED"] = "CANCELED";
    TransactionStatus["DECLINED"] = "DECLINED";
    TransactionStatus["REFUNDED"] = "REFUNDED";
    TransactionStatus["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
    TransactionStatus["AUTHORIZED"] = "AUTHORIZED";
    TransactionStatus["VOIDED"] = "VOIDED";
})(TransactionStatus || (TransactionStatus = {}));
export var AuthorizationCaptureStatus;
(function (AuthorizationCaptureStatus) {
    AuthorizationCaptureStatus["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    /** Capture operation still in progress. */
    AuthorizationCaptureStatus["PENDING"] = "PENDING";
    /** Capture operation succeeded. */
    AuthorizationCaptureStatus["SUCCEEDED"] = "SUCCEEDED";
    /** Capture operation failed. */
    AuthorizationCaptureStatus["FAILED"] = "FAILED";
})(AuthorizationCaptureStatus || (AuthorizationCaptureStatus = {}));
export var AuthorizationVoidStatus;
(function (AuthorizationVoidStatus) {
    AuthorizationVoidStatus["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    /** Void operation still in progress. */
    AuthorizationVoidStatus["PENDING"] = "PENDING";
    /** Void operation succeeded. */
    AuthorizationVoidStatus["SUCCEEDED"] = "SUCCEEDED";
    /** Void operation failed. */
    AuthorizationVoidStatus["FAILED"] = "FAILED";
})(AuthorizationVoidStatus || (AuthorizationVoidStatus = {}));
/** Reason the authorization was voided. */
export var Reason;
(function (Reason) {
    Reason["UNKNOWN_REASON"] = "UNKNOWN_REASON";
    /** Authorization was voided by user. */
    Reason["MANUAL"] = "MANUAL";
    /** Authorization passed execution date. */
    Reason["SCHEDULED"] = "SCHEDULED";
})(Reason || (Reason = {}));
export var ActionType;
(function (ActionType) {
    ActionType["UNKNOWN_ACTION_TYPE"] = "UNKNOWN_ACTION_TYPE";
    ActionType["VOID"] = "VOID";
    ActionType["CAPTURE"] = "CAPTURE";
})(ActionType || (ActionType = {}));
export var MembershipPaymentStatus;
(function (MembershipPaymentStatus) {
    /** Payment was charged. */
    MembershipPaymentStatus["CHARGED"] = "CHARGED";
    /** The attempt to charge the payment failed, for example, due to lack of credits. */
    MembershipPaymentStatus["CHARGE_FAILED"] = "CHARGE_FAILED";
})(MembershipPaymentStatus || (MembershipPaymentStatus = {}));
/** Refund transaction status. */
export var RefundStatus;
(function (RefundStatus) {
    /** Refund was initiated on payment provider side. PENDING status was assigned by provider. */
    RefundStatus["PENDING"] = "PENDING";
    /** Refund transaction succeeded. */
    RefundStatus["SUCCEEDED"] = "SUCCEEDED";
    /** Refund transaction failed. */
    RefundStatus["FAILED"] = "FAILED";
    /** Refund request acknowledged, and will be executed soon. */
    RefundStatus["SCHEDULED"] = "SCHEDULED";
    /** Refund was initiated on payment provider side. */
    RefundStatus["STARTED"] = "STARTED";
})(RefundStatus || (RefundStatus = {}));
export var IdentityType;
(function (IdentityType) {
    IdentityType["UNSPECIFIED_IDENTITY_TYPE"] = "UNSPECIFIED_IDENTITY_TYPE";
    /** Site member */
    IdentityType["MEMBER"] = "MEMBER";
    /** Contact */
    IdentityType["CONTACT"] = "CONTACT";
})(IdentityType || (IdentityType = {}));
export var WeightUnit;
(function (WeightUnit) {
    /** Weight unit can't be classified, due to an error */
    WeightUnit["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
    /** Kilograms */
    WeightUnit["KG"] = "KG";
    /** Pounds */
    WeightUnit["LB"] = "LB";
})(WeightUnit || (WeightUnit = {}));
/** Brazilian tax info types */
export var VatType;
(function (VatType) {
    /** When the tax info type can't be classified, due to an error */
    VatType["UNSPECIFIED_TAX_TYPE"] = "UNSPECIFIED_TAX_TYPE";
    /** CPF - for individual tax payers */
    VatType["CPF"] = "CPF";
    /** CNPJ - for corporations */
    VatType["CNPJ"] = "CNPJ";
})(VatType || (VatType = {}));
/** This might be extended in the future with pending orders statuses */
export var PaymentStatus;
(function (PaymentStatus) {
    /** Payment status can't be classified, due to an error */
    PaymentStatus["UNSPECIFIED_PAYMENT_STATUS"] = "UNSPECIFIED_PAYMENT_STATUS";
    /** Order is pending response from the payment provider */
    PaymentStatus["PENDING"] = "PENDING";
    /** Order is marked as not paid, and can be marked as paid later on. This is relevant for POS and offline orders */
    PaymentStatus["NOT_PAID"] = "NOT_PAID";
    /** The order is marked as paid */
    PaymentStatus["PAID"] = "PAID";
    /** Order was refunded, refund amount less than order total price */
    PaymentStatus["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
    /** Full order total price was refunded */
    PaymentStatus["FULLY_REFUNDED"] = "FULLY_REFUNDED";
    /** At least one payment was received and approved, covering less than total price amount */
    PaymentStatus["PARTIALLY_PAID"] = "PARTIALLY_PAID";
})(PaymentStatus || (PaymentStatus = {}));
export var FulfillmentStatus;
(function (FulfillmentStatus) {
    /** None of the order items are fulfilled */
    FulfillmentStatus["NOT_FULFILLED"] = "NOT_FULFILLED";
    /**
     * All of the order items are fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FulfillmentStatus["FULFILLED"] = "FULFILLED";
    /** Order is canceled */
    FulfillmentStatus["CANCELED"] = "CANCELED";
    /** Some, but not all of the order items are fulfilled */
    FulfillmentStatus["PARTIALLY_FULFILLED"] = "PARTIALLY_FULFILLED";
})(FulfillmentStatus || (FulfillmentStatus = {}));
export var LineItemType;
(function (LineItemType) {
    /** Line item type can't be classified, due to an error */
    LineItemType["UNSPECIFIED_LINE_ITEM_TYPE"] = "UNSPECIFIED_LINE_ITEM_TYPE";
    /** Physical item type */
    LineItemType["PHYSICAL"] = "PHYSICAL";
    /** Digital item type */
    LineItemType["DIGITAL"] = "DIGITAL";
    /** Custom item price */
    LineItemType["CUSTOM_AMOUNT_ITEM"] = "CUSTOM_AMOUNT_ITEM";
})(LineItemType || (LineItemType = {}));
export var MediaItemType;
(function (MediaItemType) {
    /** Media item type can't be classified, due to an error */
    MediaItemType["UNSPECIFIED_MEDIA_TYPE_ITEM"] = "UNSPECIFIED_MEDIA_TYPE_ITEM";
    /** Image item type */
    MediaItemType["IMAGE"] = "IMAGE";
})(MediaItemType || (MediaItemType = {}));
export var ActivityType;
(function (ActivityType) {
    /** Activity item type can't be classified, due to an error */
    ActivityType["UNSPECIFIED_ORDER_HISTORY_ITEM_TYPE"] = "UNSPECIFIED_ORDER_HISTORY_ITEM_TYPE";
    /** Store owner added a comment */
    ActivityType["MERCHANT_COMMENT"] = "MERCHANT_COMMENT";
    /** Order placed */
    ActivityType["ORDER_PLACED"] = "ORDER_PLACED";
    /** Order marked as paid, either by the store owner (for offline orders), or when an online transaction was confirmed */
    ActivityType["ORDER_PAID"] = "ORDER_PAID";
    /** Order shipping status set as fulfilled */
    ActivityType["ORDER_FULFILLED"] = "ORDER_FULFILLED";
    /** Order shipping status set as not fulfilled */
    ActivityType["ORDER_NOT_FULFILLED"] = "ORDER_NOT_FULFILLED";
    /** A download link was sent (relevant for orders with digital line items) */
    ActivityType["DOWNLOAD_LINK_SENT"] = "DOWNLOAD_LINK_SENT";
    /** An email notification for pickup was sent */
    ActivityType["PICKUP_READY_EMAIL_SENT"] = "PICKUP_READY_EMAIL_SENT";
    /** Shipping tracking number was set */
    ActivityType["TRACKING_NUMBER_ADDED"] = "TRACKING_NUMBER_ADDED";
    /** Shipping tracking number was edited */
    ActivityType["TRACKING_NUMBER_EDITED"] = "TRACKING_NUMBER_EDITED";
    /** Shipping tracking link was set */
    ActivityType["TRACKING_LINK_WAS_SET"] = "TRACKING_LINK_WAS_SET";
    /** An email confirmation of order shipment was sent */
    ActivityType["SHIPPING_CONFIRMATION_EMAIL_SENT"] = "SHIPPING_CONFIRMATION_EMAIL_SENT";
    /** Invoice was set in the order */
    ActivityType["INVOICE_WAS_SET"] = "INVOICE_WAS_SET";
    /** Invoice was removed from the order */
    ActivityType["INVOICE_WAS_REMOVED"] = "INVOICE_WAS_REMOVED";
    /** Invoice was sent to customer via email */
    ActivityType["INVOICE_WAS_SENT"] = "INVOICE_WAS_SENT";
    /** Email was sent to fulfiller */
    ActivityType["FULFILLER_EMAIL_SENT"] = "FULFILLER_EMAIL_SENT";
    /** Shipping address was updated */
    ActivityType["SHIPPING_ADDRESS_EDITED"] = "SHIPPING_ADDRESS_EDITED";
    /** Order email was updated */
    ActivityType["EMAIL_EDITED"] = "EMAIL_EDITED";
    /** Order partially paid. During the checkout for orders with deposit items. */
    ActivityType["ORDER_PARTIALLY_PAID"] = "ORDER_PARTIALLY_PAID";
})(ActivityType || (ActivityType = {}));
export var InvoiceSource;
(function (InvoiceSource) {
    /** Invoice source can't be classified, due to an error */
    InvoiceSource["UNSPECIFIED_INVOICE_SOURCE"] = "UNSPECIFIED_INVOICE_SOURCE";
    /** Invoice created using the Invoices API */
    InvoiceSource["WIX"] = "WIX";
})(InvoiceSource || (InvoiceSource = {}));
export var ChannelType;
(function (ChannelType) {
    ChannelType["UNSPECIFIED"] = "UNSPECIFIED";
    ChannelType["WEB"] = "WEB";
    ChannelType["POS"] = "POS";
    ChannelType["EBAY"] = "EBAY";
    ChannelType["AMAZON"] = "AMAZON";
    ChannelType["OTHER_PLATFORM"] = "OTHER_PLATFORM";
    ChannelType["WIX_APP_STORE"] = "WIX_APP_STORE";
    ChannelType["WIX_INVOICES"] = "WIX_INVOICES";
    ChannelType["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
    ChannelType["WISH"] = "WISH";
    ChannelType["CLASS_PASS"] = "CLASS_PASS";
    ChannelType["GLOBAL_E"] = "GLOBAL_E";
    ChannelType["FACEBOOK"] = "FACEBOOK";
    ChannelType["ETSY"] = "ETSY";
    ChannelType["TIKTOK"] = "TIKTOK";
    ChannelType["FAIRE_COM"] = "FAIRE_COM";
})(ChannelType || (ChannelType = {}));
export var EnteredByIdentityType;
(function (EnteredByIdentityType) {
    EnteredByIdentityType["USER"] = "USER";
    EnteredByIdentityType["MEMBER"] = "MEMBER";
    EnteredByIdentityType["CONTACT"] = "CONTACT";
    EnteredByIdentityType["APP"] = "APP";
})(EnteredByIdentityType || (EnteredByIdentityType = {}));
/** Frequency unit of recurring payment */
export var SubscriptionFrequency;
(function (SubscriptionFrequency) {
    SubscriptionFrequency["UNDEFINED"] = "UNDEFINED";
    SubscriptionFrequency["DAY"] = "DAY";
    SubscriptionFrequency["WEEK"] = "WEEK";
    SubscriptionFrequency["MONTH"] = "MONTH";
    SubscriptionFrequency["YEAR"] = "YEAR";
})(SubscriptionFrequency || (SubscriptionFrequency = {}));
export var RestockType;
(function (RestockType) {
    RestockType["NO_ITEMS"] = "NO_ITEMS";
    RestockType["ALL_ITEMS"] = "ALL_ITEMS";
    RestockType["SOME_ITEMS"] = "SOME_ITEMS";
})(RestockType || (RestockType = {}));
export var SortOrder;
(function (SortOrder) {
    /** Ascending order. */
    SortOrder["ASC"] = "ASC";
    /** Descending order. */
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var RefundableStatus;
(function (RefundableStatus) {
    /** Not refundable. */
    RefundableStatus["NOT_REFUNDABLE"] = "NOT_REFUNDABLE";
    /** Refundable manually. */
    RefundableStatus["MANUAL"] = "MANUAL";
    /** Refundable. */
    RefundableStatus["REFUNDABLE"] = "REFUNDABLE";
})(RefundableStatus || (RefundableStatus = {}));
export var NonRefundableReason;
(function (NonRefundableReason) {
    /** No reason. */
    NonRefundableReason["NONE"] = "NONE";
    /** Payment already refunded. */
    NonRefundableReason["ALREADY_REFUNDED"] = "ALREADY_REFUNDED";
    /** Payment provider is down. */
    NonRefundableReason["PROVIDER_IS_DOWN"] = "PROVIDER_IS_DOWN";
    /** Internal error occurred. */
    NonRefundableReason["INTERNAL_ERROR"] = "INTERNAL_ERROR";
    /** Payment not made. */
    NonRefundableReason["NOT_PAID"] = "NOT_PAID";
    /** Access denied. */
    NonRefundableReason["ACCESS_DENIED"] = "ACCESS_DENIED";
    /** Payment amount is zero. */
    NonRefundableReason["ZERO_PRICE"] = "ZERO_PRICE";
    /** Disabled by provider. */
    NonRefundableReason["DISABLED_BY_PROVIDER"] = "DISABLED_BY_PROVIDER";
    /** Payment partially paid. */
    NonRefundableReason["PARTIALLY_PAID"] = "PARTIALLY_PAID";
    /** Deposit for online item. */
    NonRefundableReason["DEPOSIT_ONLINE_ITEM"] = "DEPOSIT_ONLINE_ITEM";
    /** Refund is pending. */
    NonRefundableReason["PENDING_REFUND"] = "PENDING_REFUND";
    /** Action forbidden. */
    NonRefundableReason["FORBIDDEN"] = "FORBIDDEN";
})(NonRefundableReason || (NonRefundableReason = {}));
export var ManuallyRefundableReason;
(function (ManuallyRefundableReason) {
    /** Payment expired. */
    ManuallyRefundableReason["EXPIRED"] = "EXPIRED";
    /** Payment method not supported. */
    ManuallyRefundableReason["NOT_SUPPORTED"] = "NOT_SUPPORTED";
    /** Payment not found. */
    ManuallyRefundableReason["NOT_FOUND"] = "NOT_FOUND";
    /** Payment made offline. */
    ManuallyRefundableReason["OFFLINE"] = "OFFLINE";
    /** Refund requires interaction with card reader. */
    ManuallyRefundableReason["REQUIRES_CARD_READER"] = "REQUIRES_CARD_READER";
})(ManuallyRefundableReason || (ManuallyRefundableReason = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Retrieves information about payments and refunds associated with a specified order.
 *
 *
 * The `listTransactionsForSingleOrder()` function returns a Promise that resolves when the specified order's transaction records are retrieved.
 * @param orderId - Order ID.
 * @public
 * @requiredField orderId
 * @permissionId ECOM.READ_TRANSACTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.payments.v1.Payments.ListTransactionsForSingleOrder
 */
export async function listTransactionsForSingleOrder(orderId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ orderId: orderId });
    const reqOpts = ambassadorWixEcomV1OrderTransactions.listTransactionsForSingleOrder(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves information about payments and refunds associated with all specified orders.
 *
 *
 * The `listTransactionsForMultipleOrders()` function returns a Promise that resolves when the specified orders' transaction records are retrieved.
 * @param orderIds - Order IDs for which to retrieve transactions.
 * @public
 * @requiredField orderIds
 * @permissionId ECOM.READ_TRANSACTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Orders
 * @permissionScopeId SCOPE.DC-STORES.READ-ORDERS
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.payments.v1.Payments.ListTransactionsForMultipleOrders
 */
export async function listTransactionsForMultipleOrders(orderIds) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({ orderIds: orderIds });
    const reqOpts = ambassadorWixEcomV1OrderTransactions.listTransactionsForMultipleOrders(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderIds: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['orderIds']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Adds up to 50 payment records to an order.
 *
 *
 * The `addPayments()` function returns a Promise that resolves when the payment records are added to an order.
 *
 * > **Note:** This does **NOT** perform the actual charging - the order is only updated with records of the payments.
 * @param orderId - Order ID.
 * @param payments - Payments to be added to order.
 * @public
 * @requiredField orderId
 * @requiredField payments
 * @requiredField payments.amount
 * @requiredField payments.giftcardPaymentDetails.giftCardPaymentId
 * @permissionId ECOM.MODIFY_TRANSACTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.payments.v1.Payments.AddPayments
 */
export async function addPayments(orderId, payments) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        orderId: orderId,
        payments: payments,
    });
    const reqOpts = ambassadorWixEcomV1OrderTransactions.addPayments(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { orderId: '$[0]', payments: '$[1]' },
            singleArgumentUnchanged: false,
        }, ['orderId', 'payments']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates the status of an order's payment.
 *
 *
 * The `updatePaymentStatus()` function returns a Promise that resolves when the payment status is updated.
 * @public
 * @requiredField identifiers
 * @requiredField identifiers.orderId
 * @requiredField identifiers.paymentId
 * @permissionId ECOM.MODIFY_TRANSACTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.payments.v1.Payments.UpdatePaymentStatus
 */
export async function updatePaymentStatus(identifiers, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        paymentId: identifiers?.paymentId,
        orderId: identifiers?.orderId,
        status: options?.status,
    });
    const reqOpts = ambassadorWixEcomV1OrderTransactions.updatePaymentStatus(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                paymentId: '$[0].paymentId',
                orderId: '$[0].orderId',
                status: '$[1].status',
            },
            singleArgumentUnchanged: false,
        }, ['identifiers', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates multiple order payments with a specified status.
 *
 *
 * The `bulkUpdatePaymentStatus()` function returns a Promise that resolves when the payment statuses are updated.
 * @param paymentAndOrderIds - Order and payment IDs for which to update payment status.
 * @public
 * @requiredField paymentAndOrderIds
 * @permissionId ECOM.MODIFY_TRANSACTIONS
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionScope Manage Orders
 * @permissionScopeId SCOPE.DC-STORES.MANAGE-ORDERS
 * @applicableIdentity APP
 * @fqn com.wix.ecom.orders.payments.v1.Payments.BulkUpdatePaymentStatuses
 */
export async function bulkUpdatePaymentStatuses(paymentAndOrderIds, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        paymentAndOrderIds: paymentAndOrderIds,
        returnFullEntity: options?.returnFullEntity,
        status: options?.status,
    });
    const reqOpts = ambassadorWixEcomV1OrderTransactions.bulkUpdatePaymentStatuses(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                paymentAndOrderIds: '$[0]',
                returnFullEntity: '$[1].returnFullEntity',
                status: '$[1].status',
            },
            singleArgumentUnchanged: false,
        }, ['paymentAndOrderIds', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-order-transactions-order-transactions.universal.js.map