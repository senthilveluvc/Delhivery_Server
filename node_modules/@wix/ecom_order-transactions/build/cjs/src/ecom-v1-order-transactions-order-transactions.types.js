"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookIdentityType = exports.ManuallyRefundableReason = exports.NonRefundableReason = exports.RefundableStatus = exports.SortOrder = exports.RestockType = exports.SubscriptionFrequency = exports.EnteredByIdentityType = exports.ChannelType = exports.InvoiceSource = exports.ActivityType = exports.MediaItemType = exports.LineItemType = exports.FulfillmentStatus = exports.PaymentStatus = exports.VatType = exports.WeightUnit = exports.IdentityType = exports.RefundStatus = exports.MembershipPaymentStatus = exports.ActionType = exports.Reason = exports.AuthorizationVoidStatus = exports.AuthorizationCaptureStatus = exports.TransactionStatus = void 0;
var TransactionStatus;
(function (TransactionStatus) {
    TransactionStatus["UNDEFINED"] = "UNDEFINED";
    TransactionStatus["APPROVED"] = "APPROVED";
    TransactionStatus["PENDING"] = "PENDING";
    TransactionStatus["PENDING_MERCHANT"] = "PENDING_MERCHANT";
    TransactionStatus["CANCELED"] = "CANCELED";
    TransactionStatus["DECLINED"] = "DECLINED";
    TransactionStatus["REFUNDED"] = "REFUNDED";
    TransactionStatus["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
    TransactionStatus["AUTHORIZED"] = "AUTHORIZED";
    TransactionStatus["VOIDED"] = "VOIDED";
})(TransactionStatus || (exports.TransactionStatus = TransactionStatus = {}));
var AuthorizationCaptureStatus;
(function (AuthorizationCaptureStatus) {
    AuthorizationCaptureStatus["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    /** Capture operation still in progress. */
    AuthorizationCaptureStatus["PENDING"] = "PENDING";
    /** Capture operation succeeded. */
    AuthorizationCaptureStatus["SUCCEEDED"] = "SUCCEEDED";
    /** Capture operation failed. */
    AuthorizationCaptureStatus["FAILED"] = "FAILED";
})(AuthorizationCaptureStatus || (exports.AuthorizationCaptureStatus = AuthorizationCaptureStatus = {}));
var AuthorizationVoidStatus;
(function (AuthorizationVoidStatus) {
    AuthorizationVoidStatus["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    /** Void operation still in progress. */
    AuthorizationVoidStatus["PENDING"] = "PENDING";
    /** Void operation succeeded. */
    AuthorizationVoidStatus["SUCCEEDED"] = "SUCCEEDED";
    /** Void operation failed. */
    AuthorizationVoidStatus["FAILED"] = "FAILED";
})(AuthorizationVoidStatus || (exports.AuthorizationVoidStatus = AuthorizationVoidStatus = {}));
/** Reason the authorization was voided. */
var Reason;
(function (Reason) {
    Reason["UNKNOWN_REASON"] = "UNKNOWN_REASON";
    /** Authorization was voided by user. */
    Reason["MANUAL"] = "MANUAL";
    /** Authorization passed execution date. */
    Reason["SCHEDULED"] = "SCHEDULED";
})(Reason || (exports.Reason = Reason = {}));
var ActionType;
(function (ActionType) {
    ActionType["UNKNOWN_ACTION_TYPE"] = "UNKNOWN_ACTION_TYPE";
    ActionType["VOID"] = "VOID";
    ActionType["CAPTURE"] = "CAPTURE";
})(ActionType || (exports.ActionType = ActionType = {}));
var MembershipPaymentStatus;
(function (MembershipPaymentStatus) {
    /** Payment was charged. */
    MembershipPaymentStatus["CHARGED"] = "CHARGED";
    /** The attempt to charge the payment failed, for example, due to lack of credits. */
    MembershipPaymentStatus["CHARGE_FAILED"] = "CHARGE_FAILED";
})(MembershipPaymentStatus || (exports.MembershipPaymentStatus = MembershipPaymentStatus = {}));
/** Refund transaction status. */
var RefundStatus;
(function (RefundStatus) {
    /** Refund was initiated on payment provider side. PENDING status was assigned by provider. */
    RefundStatus["PENDING"] = "PENDING";
    /** Refund transaction succeeded. */
    RefundStatus["SUCCEEDED"] = "SUCCEEDED";
    /** Refund transaction failed. */
    RefundStatus["FAILED"] = "FAILED";
    /** Refund request acknowledged, and will be executed soon. */
    RefundStatus["SCHEDULED"] = "SCHEDULED";
    /** Refund was initiated on payment provider side. */
    RefundStatus["STARTED"] = "STARTED";
})(RefundStatus || (exports.RefundStatus = RefundStatus = {}));
var IdentityType;
(function (IdentityType) {
    IdentityType["UNSPECIFIED_IDENTITY_TYPE"] = "UNSPECIFIED_IDENTITY_TYPE";
    /** Site member */
    IdentityType["MEMBER"] = "MEMBER";
    /** Contact */
    IdentityType["CONTACT"] = "CONTACT";
})(IdentityType || (exports.IdentityType = IdentityType = {}));
var WeightUnit;
(function (WeightUnit) {
    /** Weight unit can't be classified, due to an error */
    WeightUnit["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
    /** Kilograms */
    WeightUnit["KG"] = "KG";
    /** Pounds */
    WeightUnit["LB"] = "LB";
})(WeightUnit || (exports.WeightUnit = WeightUnit = {}));
/** Brazilian tax info types */
var VatType;
(function (VatType) {
    /** When the tax info type can't be classified, due to an error */
    VatType["UNSPECIFIED_TAX_TYPE"] = "UNSPECIFIED_TAX_TYPE";
    /** CPF - for individual tax payers */
    VatType["CPF"] = "CPF";
    /** CNPJ - for corporations */
    VatType["CNPJ"] = "CNPJ";
})(VatType || (exports.VatType = VatType = {}));
/** This might be extended in the future with pending orders statuses */
var PaymentStatus;
(function (PaymentStatus) {
    /** Payment status can't be classified, due to an error */
    PaymentStatus["UNSPECIFIED_PAYMENT_STATUS"] = "UNSPECIFIED_PAYMENT_STATUS";
    /** Order is pending response from the payment provider */
    PaymentStatus["PENDING"] = "PENDING";
    /** Order is marked as not paid, and can be marked as paid later on. This is relevant for POS and offline orders */
    PaymentStatus["NOT_PAID"] = "NOT_PAID";
    /** The order is marked as paid */
    PaymentStatus["PAID"] = "PAID";
    /** Order was refunded, refund amount less than order total price */
    PaymentStatus["PARTIALLY_REFUNDED"] = "PARTIALLY_REFUNDED";
    /** Full order total price was refunded */
    PaymentStatus["FULLY_REFUNDED"] = "FULLY_REFUNDED";
    /** At least one payment was received and approved, covering less than total price amount */
    PaymentStatus["PARTIALLY_PAID"] = "PARTIALLY_PAID";
})(PaymentStatus || (exports.PaymentStatus = PaymentStatus = {}));
var FulfillmentStatus;
(function (FulfillmentStatus) {
    /** None of the order items are fulfilled */
    FulfillmentStatus["NOT_FULFILLED"] = "NOT_FULFILLED";
    /**
     * All of the order items are fulfilled
     * Orders without shipping info are fulfilled automatically
     */
    FulfillmentStatus["FULFILLED"] = "FULFILLED";
    /** Order is canceled */
    FulfillmentStatus["CANCELED"] = "CANCELED";
    /** Some, but not all of the order items are fulfilled */
    FulfillmentStatus["PARTIALLY_FULFILLED"] = "PARTIALLY_FULFILLED";
})(FulfillmentStatus || (exports.FulfillmentStatus = FulfillmentStatus = {}));
var LineItemType;
(function (LineItemType) {
    /** Line item type can't be classified, due to an error */
    LineItemType["UNSPECIFIED_LINE_ITEM_TYPE"] = "UNSPECIFIED_LINE_ITEM_TYPE";
    /** Physical item type */
    LineItemType["PHYSICAL"] = "PHYSICAL";
    /** Digital item type */
    LineItemType["DIGITAL"] = "DIGITAL";
    /** Custom item price */
    LineItemType["CUSTOM_AMOUNT_ITEM"] = "CUSTOM_AMOUNT_ITEM";
})(LineItemType || (exports.LineItemType = LineItemType = {}));
var MediaItemType;
(function (MediaItemType) {
    /** Media item type can't be classified, due to an error */
    MediaItemType["UNSPECIFIED_MEDIA_TYPE_ITEM"] = "UNSPECIFIED_MEDIA_TYPE_ITEM";
    /** Image item type */
    MediaItemType["IMAGE"] = "IMAGE";
})(MediaItemType || (exports.MediaItemType = MediaItemType = {}));
var ActivityType;
(function (ActivityType) {
    /** Activity item type can't be classified, due to an error */
    ActivityType["UNSPECIFIED_ORDER_HISTORY_ITEM_TYPE"] = "UNSPECIFIED_ORDER_HISTORY_ITEM_TYPE";
    /** Store owner added a comment */
    ActivityType["MERCHANT_COMMENT"] = "MERCHANT_COMMENT";
    /** Order placed */
    ActivityType["ORDER_PLACED"] = "ORDER_PLACED";
    /** Order marked as paid, either by the store owner (for offline orders), or when an online transaction was confirmed */
    ActivityType["ORDER_PAID"] = "ORDER_PAID";
    /** Order shipping status set as fulfilled */
    ActivityType["ORDER_FULFILLED"] = "ORDER_FULFILLED";
    /** Order shipping status set as not fulfilled */
    ActivityType["ORDER_NOT_FULFILLED"] = "ORDER_NOT_FULFILLED";
    /** A download link was sent (relevant for orders with digital line items) */
    ActivityType["DOWNLOAD_LINK_SENT"] = "DOWNLOAD_LINK_SENT";
    /** An email notification for pickup was sent */
    ActivityType["PICKUP_READY_EMAIL_SENT"] = "PICKUP_READY_EMAIL_SENT";
    /** Shipping tracking number was set */
    ActivityType["TRACKING_NUMBER_ADDED"] = "TRACKING_NUMBER_ADDED";
    /** Shipping tracking number was edited */
    ActivityType["TRACKING_NUMBER_EDITED"] = "TRACKING_NUMBER_EDITED";
    /** Shipping tracking link was set */
    ActivityType["TRACKING_LINK_WAS_SET"] = "TRACKING_LINK_WAS_SET";
    /** An email confirmation of order shipment was sent */
    ActivityType["SHIPPING_CONFIRMATION_EMAIL_SENT"] = "SHIPPING_CONFIRMATION_EMAIL_SENT";
    /** Invoice was set in the order */
    ActivityType["INVOICE_WAS_SET"] = "INVOICE_WAS_SET";
    /** Invoice was removed from the order */
    ActivityType["INVOICE_WAS_REMOVED"] = "INVOICE_WAS_REMOVED";
    /** Invoice was sent to customer via email */
    ActivityType["INVOICE_WAS_SENT"] = "INVOICE_WAS_SENT";
    /** Email was sent to fulfiller */
    ActivityType["FULFILLER_EMAIL_SENT"] = "FULFILLER_EMAIL_SENT";
    /** Shipping address was updated */
    ActivityType["SHIPPING_ADDRESS_EDITED"] = "SHIPPING_ADDRESS_EDITED";
    /** Order email was updated */
    ActivityType["EMAIL_EDITED"] = "EMAIL_EDITED";
    /** Order partially paid. During the checkout for orders with deposit items. */
    ActivityType["ORDER_PARTIALLY_PAID"] = "ORDER_PARTIALLY_PAID";
})(ActivityType || (exports.ActivityType = ActivityType = {}));
var InvoiceSource;
(function (InvoiceSource) {
    /** Invoice source can't be classified, due to an error */
    InvoiceSource["UNSPECIFIED_INVOICE_SOURCE"] = "UNSPECIFIED_INVOICE_SOURCE";
    /** Invoice created using the Invoices API */
    InvoiceSource["WIX"] = "WIX";
})(InvoiceSource || (exports.InvoiceSource = InvoiceSource = {}));
var ChannelType;
(function (ChannelType) {
    ChannelType["UNSPECIFIED"] = "UNSPECIFIED";
    ChannelType["WEB"] = "WEB";
    ChannelType["POS"] = "POS";
    ChannelType["EBAY"] = "EBAY";
    ChannelType["AMAZON"] = "AMAZON";
    ChannelType["OTHER_PLATFORM"] = "OTHER_PLATFORM";
    ChannelType["WIX_APP_STORE"] = "WIX_APP_STORE";
    ChannelType["WIX_INVOICES"] = "WIX_INVOICES";
    ChannelType["BACKOFFICE_MERCHANT"] = "BACKOFFICE_MERCHANT";
    ChannelType["WISH"] = "WISH";
    ChannelType["CLASS_PASS"] = "CLASS_PASS";
    ChannelType["GLOBAL_E"] = "GLOBAL_E";
    ChannelType["FACEBOOK"] = "FACEBOOK";
    ChannelType["ETSY"] = "ETSY";
    ChannelType["TIKTOK"] = "TIKTOK";
    ChannelType["FAIRE_COM"] = "FAIRE_COM";
})(ChannelType || (exports.ChannelType = ChannelType = {}));
var EnteredByIdentityType;
(function (EnteredByIdentityType) {
    EnteredByIdentityType["USER"] = "USER";
    EnteredByIdentityType["MEMBER"] = "MEMBER";
    EnteredByIdentityType["CONTACT"] = "CONTACT";
    EnteredByIdentityType["APP"] = "APP";
})(EnteredByIdentityType || (exports.EnteredByIdentityType = EnteredByIdentityType = {}));
/** Frequency unit of recurring payment */
var SubscriptionFrequency;
(function (SubscriptionFrequency) {
    SubscriptionFrequency["UNDEFINED"] = "UNDEFINED";
    SubscriptionFrequency["DAY"] = "DAY";
    SubscriptionFrequency["WEEK"] = "WEEK";
    SubscriptionFrequency["MONTH"] = "MONTH";
    SubscriptionFrequency["YEAR"] = "YEAR";
})(SubscriptionFrequency || (exports.SubscriptionFrequency = SubscriptionFrequency = {}));
var RestockType;
(function (RestockType) {
    RestockType["NO_ITEMS"] = "NO_ITEMS";
    RestockType["ALL_ITEMS"] = "ALL_ITEMS";
    RestockType["SOME_ITEMS"] = "SOME_ITEMS";
})(RestockType || (exports.RestockType = RestockType = {}));
var SortOrder;
(function (SortOrder) {
    /** Ascending order. */
    SortOrder["ASC"] = "ASC";
    /** Descending order. */
    SortOrder["DESC"] = "DESC";
})(SortOrder || (exports.SortOrder = SortOrder = {}));
var RefundableStatus;
(function (RefundableStatus) {
    /** Not refundable. */
    RefundableStatus["NOT_REFUNDABLE"] = "NOT_REFUNDABLE";
    /** Refundable manually. */
    RefundableStatus["MANUAL"] = "MANUAL";
    /** Refundable. */
    RefundableStatus["REFUNDABLE"] = "REFUNDABLE";
})(RefundableStatus || (exports.RefundableStatus = RefundableStatus = {}));
var NonRefundableReason;
(function (NonRefundableReason) {
    /** No reason. */
    NonRefundableReason["NONE"] = "NONE";
    /** Payment already refunded. */
    NonRefundableReason["ALREADY_REFUNDED"] = "ALREADY_REFUNDED";
    /** Payment provider is down. */
    NonRefundableReason["PROVIDER_IS_DOWN"] = "PROVIDER_IS_DOWN";
    /** Internal error occurred. */
    NonRefundableReason["INTERNAL_ERROR"] = "INTERNAL_ERROR";
    /** Payment not made. */
    NonRefundableReason["NOT_PAID"] = "NOT_PAID";
    /** Access denied. */
    NonRefundableReason["ACCESS_DENIED"] = "ACCESS_DENIED";
    /** Payment amount is zero. */
    NonRefundableReason["ZERO_PRICE"] = "ZERO_PRICE";
    /** Disabled by provider. */
    NonRefundableReason["DISABLED_BY_PROVIDER"] = "DISABLED_BY_PROVIDER";
    /** Payment partially paid. */
    NonRefundableReason["PARTIALLY_PAID"] = "PARTIALLY_PAID";
    /** Deposit for online item. */
    NonRefundableReason["DEPOSIT_ONLINE_ITEM"] = "DEPOSIT_ONLINE_ITEM";
    /** Refund is pending. */
    NonRefundableReason["PENDING_REFUND"] = "PENDING_REFUND";
    /** Action forbidden. */
    NonRefundableReason["FORBIDDEN"] = "FORBIDDEN";
})(NonRefundableReason || (exports.NonRefundableReason = NonRefundableReason = {}));
var ManuallyRefundableReason;
(function (ManuallyRefundableReason) {
    /** Payment expired. */
    ManuallyRefundableReason["EXPIRED"] = "EXPIRED";
    /** Payment method not supported. */
    ManuallyRefundableReason["NOT_SUPPORTED"] = "NOT_SUPPORTED";
    /** Payment not found. */
    ManuallyRefundableReason["NOT_FOUND"] = "NOT_FOUND";
    /** Payment made offline. */
    ManuallyRefundableReason["OFFLINE"] = "OFFLINE";
    /** Refund requires interaction with card reader. */
    ManuallyRefundableReason["REQUIRES_CARD_READER"] = "REQUIRES_CARD_READER";
})(ManuallyRefundableReason || (exports.ManuallyRefundableReason = ManuallyRefundableReason = {}));
var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (exports.WebhookIdentityType = WebhookIdentityType = {}));
//# sourceMappingURL=ecom-v1-order-transactions-order-transactions.types.js.map