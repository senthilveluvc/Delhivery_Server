import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomV1DeliveryProfile from './ecom-v1-delivery-profile-delivery-profile.http.js';
export var ChargeType;
(function (ChargeType) {
    ChargeType["HANDLING_FEE"] = "HANDLING_FEE";
})(ChargeType || (ChargeType = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var DestinationScope;
(function (DestinationScope) {
    /** No additional destinations are requested */
    DestinationScope["SPECIFIC_DESTINATIONS"] = "SPECIFIC_DESTINATIONS";
    /** All Destinations */
    DestinationScope["WORLDWIDE"] = "WORLDWIDE";
})(DestinationScope || (DestinationScope = {}));
export var State;
(function (State) {
    State["UNKNOWN"] = "UNKNOWN";
    State["ENABLED"] = "ENABLED";
    State["DISABLED"] = "DISABLED";
    State["PENDING"] = "PENDING";
    State["DEMO"] = "DEMO";
})(State || (State = {}));
export var SiteCreatedContext;
(function (SiteCreatedContext) {
    /** A valid option, we don't expose all reasons why site might be created. */
    SiteCreatedContext["OTHER"] = "OTHER";
    /** A meta site was created from template. */
    SiteCreatedContext["FROM_TEMPLATE"] = "FROM_TEMPLATE";
    /** A meta site was created by copying of the transfferred meta site. */
    SiteCreatedContext["DUPLICATE_BY_SITE_TRANSFER"] = "DUPLICATE_BY_SITE_TRANSFER";
    /** A copy of existing meta site. */
    SiteCreatedContext["DUPLICATE"] = "DUPLICATE";
    /** A meta site was created as a transfferred site (copy of the original), old flow, should die soon. */
    SiteCreatedContext["OLD_SITE_TRANSFER"] = "OLD_SITE_TRANSFER";
    /** deprecated A meta site was created for Flash editor. */
    SiteCreatedContext["FLASH"] = "FLASH";
})(SiteCreatedContext || (SiteCreatedContext = {}));
export var Namespace;
(function (Namespace) {
    Namespace["UNKNOWN_NAMESPACE"] = "UNKNOWN_NAMESPACE";
    /** Default namespace for UGC sites. MetaSites with this namespace will be shown in a user's site list by default. */
    Namespace["WIX"] = "WIX";
    /** ShoutOut stand alone product. These are siteless (no actual Wix site, no HtmlWeb). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["SHOUT_OUT"] = "SHOUT_OUT";
    /** MetaSites created by the Albums product, they appear as part of the Albums app. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["ALBUMS"] = "ALBUMS";
    /** Part of the WixStores migration flow, a user tries to migrate and gets this site to view and if the user likes it then stores removes this namespace and deletes the old site with the old stores. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["WIX_STORES_TEST_DRIVE"] = "WIX_STORES_TEST_DRIVE";
    /** Hotels standalone (siteless). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["HOTELS"] = "HOTELS";
    /** Clubs siteless MetaSites, a club without a wix website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["CLUBS"] = "CLUBS";
    /** A partially created ADI website. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["ONBOARDING_DRAFT"] = "ONBOARDING_DRAFT";
    /** AppBuilder for AppStudio / shmite (c). MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["DEV_SITE"] = "DEV_SITE";
    /** LogoMaker websites offered to the user after logo purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["LOGOS"] = "LOGOS";
    /** VideoMaker websites offered to the user after video purchase. MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["VIDEO_MAKER"] = "VIDEO_MAKER";
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["PARTNER_DASHBOARD"] = "PARTNER_DASHBOARD";
    /** MetaSites with this namespace will *not* be shown in a user's site list by default. */
    Namespace["DEV_CENTER_COMPANY"] = "DEV_CENTER_COMPANY";
    /**
     * A draft created by HTML editor on open. Upon "first save" it will be moved to be of WIX domain.
     *
     * Meta site with this namespace will *not* be shown in a user's site list by default.
     */
    Namespace["HTML_DRAFT"] = "HTML_DRAFT";
    /**
     * the user-journey for Fitness users who want to start from managing their business instead of designing their website.
     * Will be accessible from Site List and will not have a website app.
     * Once the user attaches a site, the site will become a regular wixsite.
     */
    Namespace["SITELESS_BUSINESS"] = "SITELESS_BUSINESS";
    /** Belongs to "strategic products" company. Supports new product in the creator's economy space. */
    Namespace["CREATOR_ECONOMY"] = "CREATOR_ECONOMY";
    /** It is to be used in the Business First efforts. */
    Namespace["DASHBOARD_FIRST"] = "DASHBOARD_FIRST";
    /** Bookings business flow with no site. */
    Namespace["ANYWHERE"] = "ANYWHERE";
    /** Namespace for Headless Backoffice with no editor */
    Namespace["HEADLESS"] = "HEADLESS";
    /**
     * Namespace for master site that will exist in parent account that will be referenced by subaccounts
     * The site will be used for account level CSM feature for enterprise
     */
    Namespace["ACCOUNT_MASTER_CMS"] = "ACCOUNT_MASTER_CMS";
    /** Rise.ai Siteless account management for Gift Cards and Store Credit. */
    Namespace["RISE"] = "RISE";
    /**
     * As part of the branded app new funnel, users now can create a meta site that will be branded app first.
     * There's a blank site behind the scene but it's blank).
     * The Mobile company will be the owner of this namespace.
     */
    Namespace["BRANDED_FIRST"] = "BRANDED_FIRST";
    /** Nownia.com Siteless account management for Ai Scheduling Assistant. */
    Namespace["NOWNIA"] = "NOWNIA";
    /**
     * UGC Templates are templates that are created by users for personal use and to sale to other users.
     * The Partners company owns this namespace.
     */
    Namespace["UGC_TEMPLATE"] = "UGC_TEMPLATE";
    /** Codux Headless Sites */
    Namespace["CODUX"] = "CODUX";
    /** Bobb - AI Design Creator. */
    Namespace["MEDIA_DESIGN_CREATOR"] = "MEDIA_DESIGN_CREATOR";
    /**
     * Shared Blog Site is a unique single site across Enterprise account,
     * This site will hold all Blog posts related to the Marketing product.
     */
    Namespace["SHARED_BLOG_ENTERPRISE"] = "SHARED_BLOG_ENTERPRISE";
})(Namespace || (Namespace = {}));
export var DeleteStatus;
(function (DeleteStatus) {
    DeleteStatus["UNKNOWN"] = "UNKNOWN";
    DeleteStatus["TRASH"] = "TRASH";
    DeleteStatus["DELETED"] = "DELETED";
    DeleteStatus["PENDING_PURGE"] = "PENDING_PURGE";
})(DeleteStatus || (DeleteStatus = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a DeliveryProfile.
 *
 * The request body must include the DeliveryProfiles name. DeliveryRegions are optional.
 * @param deliveryProfile - DeliveryProfile to be created.
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryProfile
 * @requiredField deliveryProfile.deliveryRegions.deliveryCarriers.backupRate.rate
 * @requiredField deliveryProfile.deliveryRegions.destinations
 * @requiredField deliveryProfile.deliveryRegions.destinations.countryCode
 * @requiredField deliveryProfile.deliveryRegions.name
 * @requiredField deliveryProfile.name
 * @permissionId ECOM.DELIVERY_PROFILE_CREATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns The created DeliveryProfile.
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.CreateDeliveryProfile
 */
export async function createDeliveryProfile(deliveryProfile) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        deliveryProfile: deliveryProfile,
    });
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.createDeliveryProfile(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.deliveryProfile;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { deliveryProfile: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['deliveryProfile']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a DeliveryProfile.
 * @param deliveryProfileId - ID of the DeliveryProfile to retrieve.
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryProfileId
 * @permissionId ECOM.DELIVERY_PROFILE_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @returns The requested DeliveryProfile.
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.GetDeliveryProfile
 */
export async function getDeliveryProfile(deliveryProfileId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        deliveryProfileId: deliveryProfileId,
    });
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.getDeliveryProfile(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.deliveryProfile;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { deliveryProfileId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['deliveryProfileId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a DeliveryProfile.
 *
 *
 * Each time the DeliveryProfile is updated,
 * `revision` increments by 1.
 * The current `revision` must be passed when updating the DeliveryProfile.
 * This ensures you're working with the latest DeliveryProfile
 * and prevents unintended overwrites.
 *
 * This method does not allow updating the DeliveryRegions in this DeliveryProfile.
 * Use AddDeliveryRegion, UpdateDeliveryRegion and RemoveDeliveryRegion for these functionalities.
 * @param _id - DeliveryProfile ID.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField deliveryProfile
 * @requiredField deliveryProfile.revision
 * @permissionId ECOM.DELIVERY_PROFILE_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns Updated DeliveryProfile.
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.UpdateDeliveryProfile
 */
export async function updateDeliveryProfile(_id, deliveryProfile) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        deliveryProfile: { ...deliveryProfile, id: _id },
    });
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.updateDeliveryProfile(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)
            ?.deliveryProfile;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { deliveryProfile: '$[1]' },
            explicitPathsToArguments: { 'deliveryProfile.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'deliveryProfile']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a DeliveryProfile.
 *
 * Deleting a DeliveryProfile permanently removes them from the DeliveryProfile List.
 * @param deliveryProfileId - Id of the DeliveryProfile to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryProfileId
 * @permissionId ECOM.DELIVERY_PROFILE_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.DeleteDeliveryProfile
 */
export async function deleteDeliveryProfile(deliveryProfileId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        deliveryProfileId: deliveryProfileId,
    });
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.deleteDeliveryProfile(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { deliveryProfileId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['deliveryProfileId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of DeliveryProfiles, given the provided [paging, filtering, and sorting][1].
 *
 * Up to 1,000 DeliveryProfiles can be returned per request.
 *
 * To learn how to query DeliveryProfiles, see [API Query Language][2].
 *
 * [1]: https://dev.wix.com/api/rest/getting-started/sorting-and-paging
 * [2]: https://dev.wix.com/api/rest/getting-started/api-query-language
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionId ECOM.DELIVERY_PROFILE_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.QueryDeliveryProfiles
 */
export function queryDeliveryProfiles() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixEcomV1DeliveryProfile.queryDeliveryProfiles(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(data);
            return {
                items: transformedData?.deliveryProfiles,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Creates a new DeliveryRegion in an existing DeliveryProfile.
 * @param deliveryProfileId - delivery profile id to associated with the DeliveryRegion
 * @param deliveryRegion - DeliveryRegion to be created
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryProfileId
 * @requiredField deliveryRegion
 * @requiredField deliveryRegion.deliveryCarriers.backupRate.rate
 * @requiredField deliveryRegion.destinations.countryCode
 * @requiredField deliveryRegion.name
 * @permissionId ECOM.DELIVERY_PROFILE_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.AddDeliveryRegion
 */
export async function addDeliveryRegion(deliveryProfileId, deliveryRegion, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        deliveryProfileId: deliveryProfileId,
        deliveryRegion: deliveryRegion,
        revision: options?.revision,
    });
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.addDeliveryRegion(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                deliveryProfileId: '$[0]',
                deliveryRegion: '$[1]',
                revision: '$[2].revision',
            },
            singleArgumentUnchanged: false,
        }, ['deliveryProfileId', 'deliveryRegion', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Update a DeliveryRegion, supports partial update
 * Pass the latest `revision` for a successful update
 *
 * This method does not allow setting or updating the delivery delivery_carriers in this delivery_region.
 * Use AddDeliveryCarrier, UpdateDeliveryCarrier and RemoveDeliveryCarrier for these functionalities.
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryRegion
 * @requiredField identifiers
 * @requiredField identifiers.deliveryProfileId
 * @requiredField identifiers.deliveryRegionId
 * @permissionId ECOM.DELIVERY_REGION_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.UpdateDeliveryRegion
 */
export async function updateDeliveryRegion(identifiers, deliveryRegion, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        deliveryProfileId: identifiers?.deliveryProfileId,
        deliveryRegion: { ...deliveryRegion, id: identifiers?.deliveryRegionId },
        revision: options?.revision,
    });
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.updateDeliveryRegion(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { deliveryRegion: '$[1]' },
            explicitPathsToArguments: {
                deliveryProfileId: '$[0].deliveryProfileId',
                'deliveryRegion.id': '$[0].deliveryRegionId',
                revision: '$[2].revision',
            },
            singleArgumentUnchanged: false,
        }, ['identifiers', 'deliveryRegion', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Delete a DeliveryRegion
 * @public
 * @documentationMaturity preview
 * @requiredField identifiers
 * @requiredField identifiers.deliveryProfileId
 * @requiredField identifiers.deliveryRegionId
 * @permissionId ECOM.DELIVERY_PROFILE_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.RemoveDeliveryRegion
 */
export async function removeDeliveryRegion(identifiers, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        deliveryProfileId: identifiers?.deliveryProfileId,
        deliveryRegionId: identifiers?.deliveryRegionId,
        revision: options?.revision,
    });
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.removeDeliveryRegion(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                deliveryProfileId: '$[0].deliveryProfileId',
                deliveryRegionId: '$[0].deliveryRegionId',
                revision: '$[1].revision',
            },
            singleArgumentUnchanged: false,
        }, ['identifiers', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Add a delivery_carrier to a delivery region
 * @param deliveryRegionId - delivery_region id to associated with the delivery_carrier.
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryRegionId
 * @requiredField options
 * @requiredField options.deliveryCarrier
 * @requiredField options.deliveryCarrier.backupRate.rate
 * @permissionId ECOM.DELIVERY_CARRIER_ADD
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.AddDeliveryCarrier
 */
export async function addDeliveryCarrier(deliveryRegionId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        deliveryRegionId: deliveryRegionId,
        deliveryCarrier: options?.deliveryCarrier,
    });
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.addDeliveryCarrier(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                deliveryRegionId: '$[0]',
                deliveryCarrier: '$[1].deliveryCarrier',
            },
            singleArgumentUnchanged: false,
        }, ['deliveryRegionId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Remove a delivery_carrier from a delivery region
 * @param deliveryRegionId - Id of the DeliveryRegion
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryRegionId
 * @requiredField options
 * @requiredField options.appId
 * @permissionId ECOM.DELIVERY_CARRIER_REMOVE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.RemoveDeliveryCarrier
 */
export async function removeDeliveryCarrier(deliveryRegionId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        deliveryRegionId: deliveryRegionId,
        appId: options?.appId,
    });
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.removeDeliveryCarrier(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                deliveryRegionId: '$[0]',
                appId: '$[1].appId',
            },
            singleArgumentUnchanged: false,
        }, ['deliveryRegionId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Update a delivery carrier in a delivery region
 * @param deliveryRegionId - DeliveryRegion id
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryRegionId
 * @requiredField options.deliveryCarrier.appId
 * @permissionId ECOM.DELIVERY_CARRIER_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.UpdateDeliveryCarrier
 */
export async function updateDeliveryCarrier(deliveryRegionId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        deliveryRegionId: deliveryRegionId,
        deliveryCarrier: options?.deliveryCarrier,
    });
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.updateDeliveryCarrier(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                deliveryRegionId: '$[0]',
                deliveryCarrier: '$[1].deliveryCarrier',
            },
            singleArgumentUnchanged: false,
        }, ['deliveryRegionId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * List all installed delivery carriers in order to set their ids in delivery rules
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.DELIVERY_CARRIER_DETAILS_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.ListDeliveryCarrierDetails
 * @deprecated
 * @replacedBy ListInstalledDeliveryCarriers
 * @targetRemovalDate 2025-04-01
 */
export async function listDeliveryCarrierDetails() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.listDeliveryCarrierDetails(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/** @public
 * @documentationMaturity preview
 * @permissionId ECOM.DELIVERY_CARRIER_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.ListInstalledDeliveryCarriers
 */
export async function listInstalledDeliveryCarriers() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.listInstalledDeliveryCarriers(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a list of all delivery destinations configured on a site.
 * Sorted by `countryCode` in ascending order.
 * @public
 * @documentationMaturity preview
 * @permissionId ECOM.DELIVERY_PROFILE_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.ListDeliveryDestinations
 */
export async function listDeliveryDestinations() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    const payload = renameKeysFromSDKRequestToRESTRequest({});
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.listDeliveryDestinations(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {},
            singleArgumentUnchanged: false,
        }, []);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Get delivery carrier settings for a delivery profile and delivery region.
 * These are returned in a table format for the dashboard.
 * @param deliveryProfileId - Delivery profile id.
 * @public
 * @documentationMaturity preview
 * @requiredField deliveryProfileId
 * @permissionId ECOM.DELIVERY_CARRIER_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.ListDeliveryCarriers
 */
export async function listDeliveryCarriers(deliveryProfileId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        deliveryProfileId: deliveryProfileId,
        appIds: options?.appIds,
    });
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.listDeliveryCarriers(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                deliveryProfileId: '$[0]',
                appIds: '$[1].appIds',
            },
            singleArgumentUnchanged: false,
        }, ['deliveryProfileId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Update carrier's external active settings
 * @param carrierId - Carrier id.
 * @public
 * @documentationMaturity preview
 * @requiredField carrierId
 * @requiredField options
 * @requiredField options.active
 * @requiredField options.rowId
 * @permissionId ECOM.DELIVERY_CARRIER_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.UpdateCarrierSettings
 */
export async function updateCarrierSettings(carrierId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        carrierId: carrierId,
        rowId: options?.rowId,
        active: options?.active,
    });
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.updateCarrierSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                carrierId: '$[0]',
                rowId: '$[1].rowId',
                active: '$[1].active',
            },
            singleArgumentUnchanged: false,
        }, ['carrierId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates extended fields of a DeliveryProfile without incrementing revision
 * @param _id - ID of the entity to update.
 * @param namespace - Identifier for the app whose extended fields are being updated.
 * @public
 * @documentationMaturity preview
 * @requiredField _id
 * @requiredField namespace
 * @requiredField options
 * @requiredField options.namespaceData
 * @permissionId ECOM.DELIVERY_PROFILE_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryProfiles.UpdateExtendedFields
 */
export async function updateExtendedFields(_id, namespace, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        id: _id,
        namespace: namespace,
        namespaceData: options?.namespaceData,
    });
    const reqOpts = ambassadorWixEcomV1DeliveryProfile.updateExtendedFields(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                id: '$[0]',
                namespace: '$[1]',
                namespaceData: '$[2].namespaceData',
            },
            singleArgumentUnchanged: false,
        }, ['_id', 'namespace', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=ecom-v1-delivery-profile-delivery-profile.universal.js.map