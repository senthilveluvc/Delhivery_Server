import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixIamRecoveryV1Recovery from './iam-recovery-v1-recovery-recovery.http.js';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var TenantType;
(function (TenantType) {
    TenantType["UNKNOWN_TENANT_TYPE"] = "UNKNOWN_TENANT_TYPE";
    TenantType["ACCOUNT"] = "ACCOUNT";
    TenantType["SITE"] = "SITE";
    TenantType["ROOT"] = "ROOT";
})(TenantType || (TenantType = {}));
export var StateType;
(function (StateType) {
    /** Initial unknown state. */
    StateType["UNKNOWN_STATE"] = "UNKNOWN_STATE";
    /** Login completed successfully. */
    StateType["SUCCESS"] = "SUCCESS";
    /** Indicates that the member needs the owner to approve their registration. */
    StateType["REQUIRE_OWNER_APPROVAL"] = "REQUIRE_OWNER_APPROVAL";
    /** Indicates that the member needs to verify their email. */
    StateType["REQUIRE_EMAIL_VERIFICATION"] = "REQUIRE_EMAIL_VERIFICATION";
    /** Indicates that the `status` is not one that prevents the member logging in, meaning it's not `OFFLINE`, `BLOCKED`, or `DELETED`. */
    StateType["STATUS_CHECK"] = "STATUS_CHECK";
})(StateType || (StateType = {}));
export var PrivacyStatus;
(function (PrivacyStatus) {
    /** No defined privacy status. */
    PrivacyStatus["UNDEFINED"] = "UNDEFINED";
    /** Profile details, such as profile name and profile picture, are visible to other members. */
    PrivacyStatus["PUBLIC"] = "PUBLIC";
    /** Profile details aren't visible to other members. */
    PrivacyStatus["PRIVATE"] = "PRIVATE";
})(PrivacyStatus || (PrivacyStatus = {}));
export var EmailTag;
(function (EmailTag) {
    EmailTag["UNTAGGED"] = "UNTAGGED";
    EmailTag["MAIN"] = "MAIN";
    EmailTag["HOME"] = "HOME";
    EmailTag["WORK"] = "WORK";
})(EmailTag || (EmailTag = {}));
export var PhoneTag;
(function (PhoneTag) {
    PhoneTag["UNTAGGED"] = "UNTAGGED";
    PhoneTag["MAIN"] = "MAIN";
    PhoneTag["HOME"] = "HOME";
    PhoneTag["MOBILE"] = "MOBILE";
    PhoneTag["WORK"] = "WORK";
    PhoneTag["FAX"] = "FAX";
})(PhoneTag || (PhoneTag = {}));
export var AddressTag;
(function (AddressTag) {
    AddressTag["UNTAGGED"] = "UNTAGGED";
    AddressTag["HOME"] = "HOME";
    AddressTag["WORK"] = "WORK";
    AddressTag["BILLING"] = "BILLING";
    AddressTag["SHIPPING"] = "SHIPPING";
})(AddressTag || (AddressTag = {}));
export var StatusName;
(function (StatusName) {
    StatusName["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    StatusName["PENDING"] = "PENDING";
    StatusName["ACTIVE"] = "ACTIVE";
    StatusName["DELETED"] = "DELETED";
    StatusName["BLOCKED"] = "BLOCKED";
    StatusName["OFFLINE"] = "OFFLINE";
})(StatusName || (StatusName = {}));
export var Reason;
(function (Reason) {
    Reason["UNKNOWN_REASON"] = "UNKNOWN_REASON";
    Reason["PENDING_ADMIN_APPROVAL_REQUIRED"] = "PENDING_ADMIN_APPROVAL_REQUIRED";
    Reason["PENDING_EMAIL_VERIFICATION_REQUIRED"] = "PENDING_EMAIL_VERIFICATION_REQUIRED";
})(Reason || (Reason = {}));
export var FactorType;
(function (FactorType) {
    /** Unknown factor type. */
    FactorType["UNKNOWN_FACTOR_TYPE"] = "UNKNOWN_FACTOR_TYPE";
    /** Requires a password. */
    FactorType["PASSWORD"] = "PASSWORD";
    /** Requires a code sent via SMS. */
    FactorType["SMS"] = "SMS";
    /** Requires a code sent by phone call. */
    FactorType["CALL"] = "CALL";
    /** Requires a code sent by email. */
    FactorType["EMAIL"] = "EMAIL";
    /** Requires authentication via an authenticator app. */
    FactorType["TOTP"] = "TOTP";
    /** Requires authentication via a push notification. */
    FactorType["PUSH"] = "PUSH";
})(FactorType || (FactorType = {}));
export var Status;
(function (Status) {
    /** Factor requires activation. */
    Status["INACTIVE"] = "INACTIVE";
    /** Factor is active and can be used for authentication. */
    Status["ACTIVE"] = "ACTIVE";
    /** Factor is blocked and cannot be used for authentication. The user should reenroll the factor. */
    Status["REQUIRE_REENROLL"] = "REQUIRE_REENROLL";
})(Status || (Status = {}));
/**
 * Sends a member an email containing a customized link to a Wix-managed page
 * where the member can reset the password for their account.
 * @param email - Email address associated with the account to recover.
 * @public
 * @requiredField email
 * @fqn wix.iam.recovery.v1.RecoveryService.SendRecoveryEmail
 */
export async function sendRecoveryEmail(email, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        email: email,
        language: options?.language,
        redirect: options?.redirect,
    });
    const reqOpts = ambassadorWixIamRecoveryV1Recovery.sendRecoveryEmail(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                email: '$[0]',
                language: '$[1].language',
                redirect: '$[1].redirect',
            },
            singleArgumentUnchanged: false,
        }, ['email', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Sends an activation email with an activation token
 * making the transition from initial contact to a site member
 * @param identityId - Id of the activating user
 * @public
 * @documentationMaturity preview
 * @requiredField identityId
 * @permissionId IAM.SEND_ACTIVATION_EMAIL
 * @fqn wix.iam.recovery.v1.RecoveryService.SendActivationEmail
 */
export async function sendActivationEmail(identityId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        identityId: identityId,
        emailOptions: options?.emailOptions,
    });
    const reqOpts = ambassadorWixIamRecoveryV1Recovery.sendActivationEmail(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                identityId: '$[0]',
                emailOptions: '$[1].emailOptions',
            },
            singleArgumentUnchanged: false,
        }, ['identityId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/** @param recoveryToken - recovery token
 * @public
 * @documentationMaturity preview
 * @requiredField recoveryToken
 * @fqn wix.iam.recovery.v1.RecoveryService.Recover
 */
export async function recover(recoveryToken, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        recoveryToken: recoveryToken,
        password: options?.password,
    });
    const reqOpts = ambassadorWixIamRecoveryV1Recovery.recover(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'identity.identityProfile.addresses.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                recoveryToken: '$[0]',
                password: '$[1].password',
            },
            singleArgumentUnchanged: false,
        }, ['recoveryToken', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=iam-recovery-v1-recovery-recovery.universal.js.map