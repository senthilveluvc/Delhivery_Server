import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixTipsSettingsV1TipSettings from './tips-settings-v1-tip-settings-tip-settings.http.js';
export var TipType;
(function (TipType) {
    /** There is no information about the tip type. */
    TipType["UNKNOWN_TIP_TYPE"] = "UNKNOWN_TIP_TYPE";
    /** The tip is calculated as a percentage of the subtotal of all related line items. */
    TipType["PERCENTAGE"] = "PERCENTAGE";
    /** The tip is a fixed amount. */
    TipType["AMOUNT"] = "AMOUNT";
})(TipType || (TipType = {}));
export var StaffDistributionMethod;
(function (StaffDistributionMethod) {
    /** There is no information about the staff distribution method. */
    StaffDistributionMethod["UNKNOWN_SPLIT_METHOD"] = "UNKNOWN_SPLIT_METHOD";
    /** All staff receive an equal amount of the tip. */
    StaffDistributionMethod["EQUAL"] = "EQUAL";
    /** Staff receive a proportional amount of the tip. */
    StaffDistributionMethod["PROPORTIONAL"] = "PROPORTIONAL";
})(StaffDistributionMethod || (StaffDistributionMethod = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a query to retrieve a list of tip settings.
 *
 * The `queryTipSettings()` function builds a query to retrieve a list of tip settings and returns a `TipSettingsQueryBuilder` object.
 *
 * The returned object contains the query definition, which is typically used to run the query using the [find()](https://dev.wix.com/docs/sdk/backend-modules/ecom/tip-settings/tip-settings-query-builder/find) function.
 *
 * You can refine the query by chaining `TipSettingsQueryBuilder` functions onto the query. `TipSettingsQueryBuilder` functions enable you to sort, filter, and control the results that `queryTipSettings()` returns.
 *
 * `queryTipSettings()` runs with the following `TipSettingsQueryBuilder` default that you can override:
 *
 * + `limit` is `50`.
 * + Sorted by `id` in ascending order.
 *
 * The functions that are chained to `queryTipSettings()` are applied in the order they are called. For example, if you apply `ascending("tipType")` and then `ascending("locationId")`, the results are sorted first by the `"tipType"`, and then, if there are multiple results with the same `"tipType"`, the items are sorted by `"locationId"`.
 *
 * The following `TipSettingsQueryBuilder` functions are supported for the `queryTipSettings()` function. For a full description of the tip settings object, see the object returned for the [items](https://dev.wix.com/docs/sdk/backend-modules/ecom/tip-settings/tip-settings-query-result/items) property in `TipSettingsQueryResult`.
 * @public
 * @documentationMaturity preview
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @permissionId WIX_TIPS.TIP_SETTINGS_READ
 * @applicableIdentity APP
 * @applicableIdentity VISITOR
 * @fqn wix.tips.settings.v1.TipSettingsService.QueryTipSettings
 */
export function queryTipSettings() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixTipsSettingsV1TipSettings.queryTipSettings(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(data);
            return {
                items: transformedData?.tipSettings,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
/**
 * Updates a `tipSettings` object.
 *
 *
 * You can't update the `default` field.
 * @param tipSettings - Tip settings to update.
 * @public
 * @documentationMaturity preview
 * @requiredField tipSettings
 * @param options - Options to use when updating tip settings.
 * @permissionId WIX_TIPS.TIP_SETTINGS_UPDATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Updated tip settings.
 * @fqn wix.tips.settings.v1.TipSettingsService.UpdateTipSettings
 */
export async function updateTipSettings(tipSettings) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        tipSettings: tipSettings,
    });
    const reqOpts = ambassadorWixTipsSettingsV1TipSettings.updateTipSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.tipSettings;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { tipSettings: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['tipSettings']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a `tipSettings` object.
 *
 *
 * You can't create a `tipSettings` object with `{"default": true}`.
 * @param tipSettings - Tip settings to create.
 * @public
 * @documentationMaturity preview
 * @requiredField tipSettings
 * @permissionId WIX_TIPS.TIP_SETTINGS_CREATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @returns Created tip settings.
 * @fqn wix.tips.settings.v1.TipSettingsService.CreateTipSettings
 */
export async function createTipSettings(tipSettings) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        tipSettings: tipSettings,
    });
    const reqOpts = ambassadorWixTipsSettingsV1TipSettings.createTipSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.tipSettings;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { tipSettings: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['tipSettings']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a default `tipSettings` object.
 *
 *
 * The call fails if there is already an existing default `tipSettings` object.
 * @param tipSettings - Dafault tip settings to create.
 * @public
 * @documentationMaturity preview
 * @requiredField tipSettings
 * @permissionId WIX_TIPS.TIP_SETTINGS_CREATE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.settings.v1.TipSettingsService.CreateDefaultTipSettings
 */
export async function createDefaultTipSettings(tipSettings) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        tipSettings: tipSettings,
    });
    const reqOpts = ambassadorWixTipsSettingsV1TipSettings.createDefaultTipSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { tipSettings: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['tipSettings']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a `tipSettings` object.
 *
 *
 * You can't delete the default `tipSettings` object.
 * @param tipSettingsId - ID of the `tipSettings` object to delete.
 * @public
 * @documentationMaturity preview
 * @requiredField tipSettingsId
 * @permissionId WIX_TIPS.TIP_SETTINGS_DELETE
 * @permissionScope Manage Bookings
 * @permissionScopeId SCOPE.DC-BOOKINGS.MANAGE-BOOKINGS
 * @permissionScope Manage Bookings - all permissions
 * @permissionScopeId SCOPE.DC-BOOKINGS-MEGA.MANAGE-BOOKINGS
 * @applicableIdentity APP
 * @fqn wix.tips.settings.v1.TipSettingsService.DeleteTipSettings
 */
export async function deleteTipSettings(tipSettingsId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        tipSettingsId: tipSettingsId,
    });
    const reqOpts = ambassadorWixTipsSettingsV1TipSettings.deleteTipSettings(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { tipSettingsId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['tipSettingsId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=tips-settings-v1-tip-settings-tip-settings.universal.js.map