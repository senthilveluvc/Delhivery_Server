type Primitive = number | string | boolean | bigint | symbol | null | undefined;
type Tags = Record<string, Primitive>;
type Context = Record<string, unknown>;
type Contexts = Record<string, Context | undefined>;

/**
 * Represents the context for host monitoring.
 */
interface HostMonitoringContext {
    /**
     * The unique identifier for the application.
     */
    appId: string;
    /**
     * The version of the application.
     */
    appVersion?: string;
    /**
     * The unique identifier for the application instance.
     */
    appInstanceId?: string;
    /**
     * The unique identifier for the extension.
     */
    extensionId?: string;
    /**
     * The name of the extension.
     */
    extensionName?: string;
    /**
     * The type of the extension on the platform. (e.g. backend: ['api', 'events], dashboard: ['widget', 'page'], site: ['component', 'widget'])
     */
    extensionType?: string;
    /**
     * Additional data related to the extension.
     */
    extensionData?: Record<string, unknown>;
    /**
     * The type of the subject.
     * Can be 'USER', 'MEMBER', or 'VISITOR'.
     */
    subjectType?: 'USER' | 'MEMBER' | 'VISITOR';
    /**
     * The unique identifier for the subject.
     */
    subjectId?: string;
    /**
     * The type of the tenant.
     * Can be 'ACCOUNT' or 'SITE'.
     */
    tenantType?: 'ACCOUNT' | 'SITE';
    /**
     * The unique identifier for the tenant.
     */
    tenantId?: string;
    /**
     * The URL of the site.
     */
    siteUrl?: string;
}

interface SpanContextData {
    traceId: string;
    spanId: string;
}
interface Span {
    spanContext(): SpanContextData;
    end(): void;
}
interface SpanOptions {
    name: string;
    tags?: Tags;
}
interface Breadcrumb {
    type?: string;
    category?: string;
    message: string;
    level?: 'info' | 'warning' | 'error';
    data?: Record<string, unknown>;
}
interface CaptureContext {
    level?: 'info' | 'warning' | 'error';
    tags?: Tags;
    contexts?: Contexts;
}
interface MonitoringClient {
    /**
     * Captures an exception event and sends it to Sentry.
     * @param error The error to capture
     * @param captureContext Optional additional data to attach to the Sentry e vent.
     * @returns the id of the captured Sentry event.
     */
    captureException(error: unknown, captureContext?: CaptureContext): string;
    /**
     * Captures a message event and sends it to Sentry.
     * @param message The message to capture
     * @param captureContext Define the level of the message or pass in additional data to attach to the message.
     * @returns the id of the captured message.
     */
    captureMessage(message: string, captureContext?: CaptureContext): string;
    /**
     * Wraps a function with a span and finishes the span after the function is done. The created span is the active span and will be used as parent by other spans created inside the function, as long as the function is executed while the scope is active.
     * @param spanOptions The options for the span
     * @param callback The function to wrap with a span
     * @returns The return value of the callback
     */
    startSpan<T>(spanOptions: SpanOptions, callback: (span: Span | undefined) => T): T;
    /**
     * Records a new breadcrumb which will be attached to future events.
     * Breadcrumbs will be added to subsequent events to provide more context on user's actions prior to an error or crash.
     * @param breadcrumb The breadcrumb to record.
     */
    addBreadcrumb(breadcrumb: Breadcrumb): void;
}

interface EventTags extends Tags {
    'app.id': string;
    'app.version'?: string;
    'app.instanceId'?: string;
    'extension.id'?: string;
    'extension.name'?: string;
    'extension.type'?: string;
}
interface EventContexts extends Contexts {
    extension?: {
        type?: string;
        data?: Record<string, unknown>;
    };
    identity?: {
        type?: string;
        id?: string;
    };
    site?: {
        url?: string;
        id?: string;
    };
    account?: {
        id?: string;
    };
}
interface EventData {
    tags: EventTags;
    contexts: EventContexts;
}

/**
 * Represents the Sentry configuration for app's monitoring.
 */
interface AppMonitoringSentryConfig {
    /**
     * The type of monitoring provider.
     */
    type: 'SENTRY';
    /**
     * The options for the Sentry monitoring provider.
     */
    sentryOptions: {
        /**
         * The Data Source Name (DSN) for the Sentry monitoring provider.
         */
        dsn: string;
    };
}
interface AppMonitoringUnknownConfig {
    type: 'UNKNOWN_PROVIDER';
}
/**
 * Represents the configuration for app's monitoring.
 * The configuration includes the type of monitoring provider and its options.
 * Currently, only Sentry is supported as a monitoring provider.
 */
type AppMonitoringConfig = AppMonitoringSentryConfig | AppMonitoringUnknownConfig;

export type { AppMonitoringConfig, AppMonitoringSentryConfig, AppMonitoringUnknownConfig, Breadcrumb, CaptureContext, Context, Contexts, EventContexts, EventData, EventTags, HostMonitoringContext, MonitoringClient, Primitive, Span, SpanContextData, SpanOptions, Tags };
