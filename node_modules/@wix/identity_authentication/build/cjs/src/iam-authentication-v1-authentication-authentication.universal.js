"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = exports.logout = exports.signOn = exports.loginWithIdpConnectionTokenParams = exports.loginCallback = exports.loginWithIdpConnection = exports.changePassword = exports.loginV2 = exports.registerV2 = exports.TenantType = exports.Status = exports.FactorType = exports.Reason = exports.StatusName = exports.StateType = exports.AddressTag = exports.PhoneTag = exports.EmailTag = exports.PrivacyStatus = void 0;
const transform_error_1 = require("@wix/sdk-runtime/transform-error");
const rename_all_nested_keys_1 = require("@wix/sdk-runtime/rename-all-nested-keys");
const ambassadorWixIamAuthenticationV1Authentication = __importStar(require("./iam-authentication-v1-authentication-authentication.http.js"));
const address_1 = require("@wix/sdk-runtime/transformations/address");
const address_2 = require("@wix/sdk-runtime/transformations/address");
const transform_paths_1 = require("@wix/sdk-runtime/transformations/transform-paths");
var PrivacyStatus;
(function (PrivacyStatus) {
    /** No defined privacy status. */
    PrivacyStatus["UNDEFINED"] = "UNDEFINED";
    /** Profile details, such as profile name and profile picture, are visible to other members. */
    PrivacyStatus["PUBLIC"] = "PUBLIC";
    /** Profile details aren't visible to other members. */
    PrivacyStatus["PRIVATE"] = "PRIVATE";
})(PrivacyStatus || (exports.PrivacyStatus = PrivacyStatus = {}));
var EmailTag;
(function (EmailTag) {
    EmailTag["UNTAGGED"] = "UNTAGGED";
    EmailTag["MAIN"] = "MAIN";
    EmailTag["HOME"] = "HOME";
    EmailTag["WORK"] = "WORK";
})(EmailTag || (exports.EmailTag = EmailTag = {}));
var PhoneTag;
(function (PhoneTag) {
    PhoneTag["UNTAGGED"] = "UNTAGGED";
    PhoneTag["MAIN"] = "MAIN";
    PhoneTag["HOME"] = "HOME";
    PhoneTag["MOBILE"] = "MOBILE";
    PhoneTag["WORK"] = "WORK";
    PhoneTag["FAX"] = "FAX";
})(PhoneTag || (exports.PhoneTag = PhoneTag = {}));
var AddressTag;
(function (AddressTag) {
    AddressTag["UNTAGGED"] = "UNTAGGED";
    AddressTag["HOME"] = "HOME";
    AddressTag["WORK"] = "WORK";
    AddressTag["BILLING"] = "BILLING";
    AddressTag["SHIPPING"] = "SHIPPING";
})(AddressTag || (exports.AddressTag = AddressTag = {}));
var StateType;
(function (StateType) {
    /** Initial unknown state. */
    StateType["UNKNOWN_STATE"] = "UNKNOWN_STATE";
    /** Login completed successfully. */
    StateType["SUCCESS"] = "SUCCESS";
    /** Indicates that the member needs the owner to approve their registration. */
    StateType["REQUIRE_OWNER_APPROVAL"] = "REQUIRE_OWNER_APPROVAL";
    /** Indicates that the member needs to verify their email. */
    StateType["REQUIRE_EMAIL_VERIFICATION"] = "REQUIRE_EMAIL_VERIFICATION";
    /** Indicates that the `status` is not one that prevents the member logging in, meaning it's not `OFFLINE`, `BLOCKED`, or `DELETED`. */
    StateType["STATUS_CHECK"] = "STATUS_CHECK";
})(StateType || (exports.StateType = StateType = {}));
var StatusName;
(function (StatusName) {
    StatusName["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    StatusName["PENDING"] = "PENDING";
    StatusName["ACTIVE"] = "ACTIVE";
    StatusName["DELETED"] = "DELETED";
    StatusName["BLOCKED"] = "BLOCKED";
    StatusName["OFFLINE"] = "OFFLINE";
})(StatusName || (exports.StatusName = StatusName = {}));
var Reason;
(function (Reason) {
    Reason["UNKNOWN_REASON"] = "UNKNOWN_REASON";
    Reason["PENDING_ADMIN_APPROVAL_REQUIRED"] = "PENDING_ADMIN_APPROVAL_REQUIRED";
    Reason["PENDING_EMAIL_VERIFICATION_REQUIRED"] = "PENDING_EMAIL_VERIFICATION_REQUIRED";
})(Reason || (exports.Reason = Reason = {}));
var FactorType;
(function (FactorType) {
    /** Unknown factor type. */
    FactorType["UNKNOWN_FACTOR_TYPE"] = "UNKNOWN_FACTOR_TYPE";
    /** Requires a password. */
    FactorType["PASSWORD"] = "PASSWORD";
    /** Requires a code sent via SMS. */
    FactorType["SMS"] = "SMS";
    /** Requires a code sent by phone call. */
    FactorType["CALL"] = "CALL";
    /** Requires a code sent by email. */
    FactorType["EMAIL"] = "EMAIL";
    /** Requires authentication via an authenticator app. */
    FactorType["TOTP"] = "TOTP";
    /** Requires authentication via a push notification. */
    FactorType["PUSH"] = "PUSH";
})(FactorType || (exports.FactorType = FactorType = {}));
var Status;
(function (Status) {
    /** Factor requires activation. */
    Status["INACTIVE"] = "INACTIVE";
    /** Factor is active and can be used for authentication. */
    Status["ACTIVE"] = "ACTIVE";
    /** Factor is blocked and cannot be used for authentication. The user should reenroll the factor. */
    Status["REQUIRE_REENROLL"] = "REQUIRE_REENROLL";
})(Status || (exports.Status = Status = {}));
var TenantType;
(function (TenantType) {
    TenantType["UNKNOWN_TENANT_TYPE"] = "UNKNOWN_TENANT_TYPE";
    TenantType["ACCOUNT"] = "ACCOUNT";
    TenantType["SITE"] = "SITE";
    TenantType["ROOT"] = "ROOT";
})(TenantType || (exports.TenantType = TenantType = {}));
/**
 * Registers a new member.
 *
 * Typically, after a successful registration, you generate and use member tokens for the
 * registered member so that subsequent API calls are called as part of a member session.
 * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).
 *
 * If the email used to register the member already exists as a contact email, the registering
 * member need to verify the email address using a code that is sent to the address.
 * @param loginId - Identifier of the registering member.
 * @public
 * @requiredField loginId
 * @fqn wix.iam.authentication.v1.AuthenticationService.RegisterV2
 */
async function registerV2(loginId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        loginId: loginId,
        password: options?.password,
        profile: options?.profile,
        captchaTokens: options?.captchaTokens,
        clientMetaData: options?.clientMetaData,
    }), [
        {
            transformFn: address_1.transformSDKAddressToRESTAddress,
            paths: [{ path: 'profile.addresses.address' }],
        },
    ]);
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.registerV2(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'identity.identityProfile.addresses.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                loginId: '$[0]',
                password: '$[1].password',
                profile: '$[1].profile',
                captchaTokens: '$[1].captchaTokens',
                clientMetaData: '$[1].clientMetaData',
            },
            singleArgumentUnchanged: false,
        }, ['loginId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.registerV2 = registerV2;
/**
 * Logs in an existing member.
 *
 * Typically, after a successful login, you generate and use member tokens for the
 * logged-in member so that subsequent API calls are called as part of a member session.
 * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).
 * @param loginId - Identifier of identity logging in.
 * @public
 * @requiredField loginId
 * @fqn wix.iam.authentication.v1.AuthenticationService.LoginV2
 */
async function loginV2(loginId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        loginId: loginId,
        password: options?.password,
        captchaTokens: options?.captchaTokens,
        clientMetaData: options?.clientMetaData,
    });
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.loginV2(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'identity.identityProfile.addresses.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                loginId: '$[0]',
                password: '$[1].password',
                captchaTokens: '$[1].captchaTokens',
                clientMetaData: '$[1].clientMetaData',
            },
            singleArgumentUnchanged: false,
        }, ['loginId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.loginV2 = loginV2;
/**
 * Changes the password of a logged in user.
 * @param newPassword - The new password to set for the logged in user
 * @public
 * @documentationMaturity preview
 * @requiredField newPassword
 * @permissionId IAM.CHANGE_PASSWORD
 * @fqn wix.iam.authentication.v1.AuthenticationService.ChangePassword
 */
async function changePassword(newPassword) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        newPassword: newPassword,
    });
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.changePassword(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { newPassword: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['newPassword']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.changePassword = changePassword;
/** @param tenantType - The type of the tenant the caller wants to login into
 * @public
 * @documentationMaturity preview
 * @requiredField identifiers
 * @requiredField identifiers.idpConnectionId
 * @requiredField identifiers.tenantId
 * @requiredField options.encryptionKey
 * @requiredField options.sessionId
 * @requiredField tenantType
 * @fqn wix.iam.authentication.v1.AuthenticationService.LoginWithIdpConnection
 */
async function loginWithIdpConnection(identifiers, tenantType, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[3];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        tenantId: identifiers?.tenantId,
        idpConnectionId: identifiers?.idpConnectionId,
        tenantType: tenantType,
        customPayload: options?.customPayload,
        sessionId: options?.sessionId,
        encryptionKey: options?.encryptionKey,
        visitorId: options?.visitorId,
        bsi: options?.bsi,
    });
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.loginWithIdpConnection(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                tenantId: '$[0].tenantId',
                idpConnectionId: '$[0].idpConnectionId',
                tenantType: '$[1]',
                customPayload: '$[2].customPayload',
                sessionId: '$[2].sessionId',
                encryptionKey: '$[2].encryptionKey',
                visitorId: '$[2].visitorId',
                bsi: '$[2].bsi',
            },
            singleArgumentUnchanged: false,
        }, ['identifiers', 'tenantType', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.loginWithIdpConnection = loginWithIdpConnection;
/** @public
 * @documentationMaturity preview
 * @fqn wix.iam.authentication.v1.AuthenticationService.LoginCallback
 */
async function loginCallback(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        state: options?.state,
        sessionToken: options?.sessionToken,
    });
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.loginCallback(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                state: '$[0].state',
                sessionToken: '$[0].sessionToken',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.loginCallback = loginCallback;
/**
 * Log in with an IDP connection using a set of tokens that will be passed to the IDP for validation.
 * This can be used when the IDP can perform authentication directly with the client and then provide a token that
 * proves that authentication succeeded, eg. OIDC on a native app or sign in with Google when using their SDK.
 * @public
 * @documentationMaturity preview
 * @fqn wix.iam.authentication.v1.AuthenticationService.LoginWithIdpConnectionTokenParams
 */
async function loginWithIdpConnectionTokenParams(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        idpConnectionId: options?.idpConnectionId,
        tokenParams: options?.tokenParams,
    });
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.loginWithIdpConnectionTokenParams(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'identity.identityProfile.addresses.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                idpConnectionId: '$[0].idpConnectionId',
                tokenParams: '$[0].tokenParams',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.loginWithIdpConnectionTokenParams = loginWithIdpConnectionTokenParams;
/** @param loginId - the identifier of the identity
 * @public
 * @documentationMaturity preview
 * @requiredField loginId
 * @permissionId IAM.AUTHENTICAITON_SIGN_ON
 * @permissionScope Manage Members Authentication
 * @permissionScopeId SCOPE.DC-IDENTITY.MANAGE_AUTHENTICATION
 * @applicableIdentity APP
 * @fqn wix.iam.authentication.v1.AuthenticationService.SignOn
 */
async function signOn(loginId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, transform_paths_1.transformPaths)((0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        loginId: loginId,
        profile: options?.profile,
        verifyEmail: options?.verifyEmail,
        mergeExistingContact: options?.mergeExistingContact,
    }), [
        {
            transformFn: address_1.transformSDKAddressToRESTAddress,
            paths: [{ path: 'profile.addresses.address' }],
        },
    ]);
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.signOn(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'identity.identityProfile.addresses.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                loginId: '$[0]',
                profile: '$[1].profile',
                verifyEmail: '$[1].verifyEmail',
                mergeExistingContact: '$[1].mergeExistingContact',
            },
            singleArgumentUnchanged: false,
        }, ['loginId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.signOn = signOn;
/**
 * Logs out a member.
 * @public
 * @documentationMaturity preview
 * @fqn wix.iam.authentication.v1.AuthenticationService.Logout
 */
async function logout(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        postLogoutRedirectUri: options?.postLogoutRedirectUri,
        clientId: options?.clientId,
    });
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.logout(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)(result.data);
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                postLogoutRedirectUri: '$[0].postLogoutRedirectUri',
                clientId: '$[0].clientId',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.logout = logout;
/** @public
 * @documentationMaturity preview
 * @requiredField factorType
 * @fqn wix.iam.authentication.v1.AuthenticationService.Verify
 */
async function verify(factorType, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = (0, rename_all_nested_keys_1.renameKeysFromSDKRequestToRESTRequest)({
        factorType: factorType,
        stateToken: options?.stateToken,
        rememberThisDevice: options?.rememberThisDevice,
        smsData: options?.smsData,
        callData: options?.callData,
        emailData: options?.emailData,
        totpData: options?.totpData,
        pushData: options?.pushData,
    });
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.verify(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return (0, rename_all_nested_keys_1.renameKeysFromRESTResponseToSDKResponse)((0, transform_paths_1.transformPaths)(result.data, [
            {
                transformFn: address_2.transformRESTAddressToSDKAddress,
                paths: [{ path: 'identity.identityProfile.addresses.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = (0, transform_error_1.transformError)(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                factorType: '$[0]',
                stateToken: '$[1].stateToken',
                rememberThisDevice: '$[1].rememberThisDevice',
                smsData: '$[1].smsData',
                callData: '$[1].callData',
                emailData: '$[1].emailData',
                totpData: '$[1].totpData',
                pushData: '$[1].pushData',
            },
            singleArgumentUnchanged: false,
        }, ['factorType', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
exports.verify = verify;
//# sourceMappingURL=iam-authentication-v1-authentication-authentication.universal.js.map