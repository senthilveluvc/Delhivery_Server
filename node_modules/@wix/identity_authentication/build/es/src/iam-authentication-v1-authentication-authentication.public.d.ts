import { HttpClient } from '@wix/sdk-types';
import { FactorType, LoginCallbackOptions, LoginId, LoginV2Options, LoginWithIdpConnectionIdentifiers, LoginWithIdpConnectionOptions, LoginWithIdpConnectionTokenParamsOptions, LogoutOptions, RawHttpResponse, RawHttpResponseNonNullableFields, RegisterV2Options, SignOnOptions, SignOnResponse, SignOnResponseNonNullableFields, StateMachineResponse, StateMachineResponseNonNullableFields, TenantType, VerifyOptions } from './iam-authentication-v1-authentication-authentication.universal.js';
export declare const __metadata: {
    PACKAGE_NAME: string;
};
export declare function registerV2(httpClient: HttpClient): RegisterV2Signature;
interface RegisterV2Signature {
    /**
     * Registers a new member.
     *
     * Typically, after a successful registration, you generate and use member tokens for the
     * registered member so that subsequent API calls are called as part of a member session.
     * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).
     *
     * If the email used to register the member already exists as a contact email, the registering
     * member need to verify the email address using a code that is sent to the address.
     * @param - Identifier of the registering member.
     */
    (loginId: LoginId, options?: RegisterV2Options | undefined): Promise<StateMachineResponse & StateMachineResponseNonNullableFields>;
}
export declare function loginV2(httpClient: HttpClient): LoginV2Signature;
interface LoginV2Signature {
    /**
     * Logs in an existing member.
     *
     * Typically, after a successful login, you generate and use member tokens for the
     * logged-in member so that subsequent API calls are called as part of a member session.
     * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).
     * @param - Identifier of identity logging in.
     */
    (loginId: LoginId, options?: LoginV2Options | undefined): Promise<StateMachineResponse & StateMachineResponseNonNullableFields>;
}
export declare function changePassword(httpClient: HttpClient): ChangePasswordSignature;
interface ChangePasswordSignature {
    /**
     * Changes the password of a logged in user.
     * @param - The new password to set for the logged in user
     */
    (newPassword: string): Promise<void>;
}
export declare function loginWithIdpConnection(httpClient: HttpClient): LoginWithIdpConnectionSignature;
interface LoginWithIdpConnectionSignature {
    /** @param - The type of the tenant the caller wants to login into */
    (identifiers: LoginWithIdpConnectionIdentifiers, tenantType: TenantType, options?: LoginWithIdpConnectionOptions | undefined): Promise<RawHttpResponse & RawHttpResponseNonNullableFields>;
}
export declare function loginCallback(httpClient: HttpClient): LoginCallbackSignature;
interface LoginCallbackSignature {
    /** */
    (options?: LoginCallbackOptions | undefined): Promise<RawHttpResponse & RawHttpResponseNonNullableFields>;
}
export declare function loginWithIdpConnectionTokenParams(httpClient: HttpClient): LoginWithIdpConnectionTokenParamsSignature;
interface LoginWithIdpConnectionTokenParamsSignature {
    /**
     * Log in with an IDP connection using a set of tokens that will be passed to the IDP for validation.
     * This can be used when the IDP can perform authentication directly with the client and then provide a token that
     * proves that authentication succeeded, eg. OIDC on a native app or sign in with Google when using their SDK.
     */
    (options?: LoginWithIdpConnectionTokenParamsOptions | undefined): Promise<StateMachineResponse & StateMachineResponseNonNullableFields>;
}
export declare function signOn(httpClient: HttpClient): SignOnSignature;
interface SignOnSignature {
    /** @param - the identifier of the identity */
    (loginId: LoginId, options?: SignOnOptions | undefined): Promise<SignOnResponse & SignOnResponseNonNullableFields>;
}
export declare function logout(httpClient: HttpClient): LogoutSignature;
interface LogoutSignature {
    /**
     * Logs out a member.
     */
    (options?: LogoutOptions | undefined): Promise<RawHttpResponse & RawHttpResponseNonNullableFields>;
}
export declare function verify(httpClient: HttpClient): VerifySignature;
interface VerifySignature {
    /** */
    (factorType: FactorType, options?: VerifyOptions | undefined): Promise<StateMachineResponse & StateMachineResponseNonNullableFields>;
}
export { Address, AddressTag, AddressWrapper, Authentication, AuthenticatorConnection, CallVerifyData, CaptchaToken, CaptchaTokenTokenOneOf, ChangePasswordRequest, ChangePasswordResponse, Connection, ConnectionTypeOneOf, CustomField, CustomValue, CustomValueValueOneOf, Email, EmailTag, EmailVerifyData, Factor, FactorType, HeadersEntry, Identity, IdentityProfile, IdpConnection, ListValue, LoginCallbackOptions, LoginCallbackRequest, LoginId, LoginIdTypeOneOf, LoginV2Options, LoginV2Request, LoginWithIdpConnectionIdentifiers, LoginWithIdpConnectionOptions, LoginWithIdpConnectionRequest, LoginWithIdpConnectionTokenParamsOptions, LoginWithIdpConnectionTokenParamsRequest, LogoutOptions, LogoutRequest, MapValue, Metadata, MfaChallengeData, PathParametersEntry, Phone, PhoneTag, PrivacyStatus, PushChallengeData, PushVerifyData, QueryParametersEntry, RawHttpRequest, RawHttpResponse, RawHttpResponseNonNullableFields, Reason, RegisterV2Options, RegisterV2Request, RequireMfaData, SecondaryEmail, SignOnOptions, SignOnRequest, SignOnResponse, SignOnResponseNonNullableFields, SmsVerifyData, StateMachineResponse, StateMachineResponseNonNullableFields, StateMachineResponseStateDataOneOf, StateType, Status, StatusName, StatusV2, TenantType, TotpVerifyData, V1CustomValue, V1CustomValueValueOneOf, V1Factor, V1ListValue, V1MapValue, VerificationChallenge, VerificationChallengeFactorChallengeDataOneOf, VerifyOptions, VerifyRequest, VerifyRequestFactorDataOneOf, } from './iam-authentication-v1-authentication-authentication.universal.js';
