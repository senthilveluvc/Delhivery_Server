import { toURLSearchParams } from '@wix/sdk-runtime/rest-modules';
import { transformSDKFloatToRESTFloat } from '@wix/sdk-runtime/transformations/float';
import { transformRESTFloatToSDKFloat } from '@wix/sdk-runtime/transformations/float';
import { transformRESTBytesToSDKBytes } from '@wix/sdk-runtime/transformations/bytes';
import { transformSDKTimestampToRESTTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformRESTTimestampToSDKTimestamp } from '@wix/sdk-runtime/transformations/timestamp';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
import { resolveUrl } from '@wix/sdk-runtime/rest-modules';
function resolveWixIamAuthenticationV1AuthenticationServiceUrl(opts) {
    const domainToMappings = {
        _: [
            {
                srcPath: '/_api/iam/authentication',
                destPath: '',
            },
        ],
        'users._base_domain_': [
            {
                srcPath: '/iam/wix/google',
                destPath: '/v1/sso/callback/root/0e6a50f5-b523-4e29-990d-f37fa2ffdd69',
            },
            {
                srcPath: '/authentication',
                destPath: '',
            },
        ],
        'www.wixapis.com': [
            {
                srcPath: '/_api/iam/authentication',
                destPath: '',
            },
            {
                srcPath: '/iam/authentication',
                destPath: '',
            },
        ],
        'bo._base_domain_': [
            {
                srcPath: '/_api/iam/authentication',
                destPath: '',
            },
        ],
        'wixbo.ai': [
            {
                srcPath: '/_api/iam/authentication',
                destPath: '',
            },
        ],
        'wix-bo.com': [
            {
                srcPath: '/_api/iam/authentication',
                destPath: '',
            },
        ],
        'dev._base_domain_': [
            {
                srcPath: '/_api/iam/authentication',
                destPath: '',
            },
        ],
        'manage._base_domain_': [
            {
                srcPath: '/_api/authentication',
                destPath: '',
            },
        ],
        'www._base_domain_': [
            {
                srcPath: '/_api/iam/authentication',
                destPath: '',
            },
        ],
    };
    return resolveUrl(Object.assign(opts, { domainToMappings }));
}
const PACKAGE_NAME = '@wix/identity_authentication';
/**
 * Registers a new member.
 *
 * Typically, after a successful registration, you generate and use member tokens for the
 * registered member so that subsequent API calls are called as part of a member session.
 * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).
 *
 * If the email used to register the member already exists as a contact email, the registering
 * member need to verify the email address using a code that is sent to the address.
 */
export function registerV2(payload) {
    function __registerV2({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [{ path: 'profile.customFields.value.numValue' }],
            },
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [{ path: 'profile.customFields.value.dateValue' }],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.iam.authentication.v1.authentication',
            method: 'POST',
            methodFqn: 'wix.iam.authentication.v1.AuthenticationService.RegisterV2',
            packageName: PACKAGE_NAME,
            url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
                protoPath: '/v2/register',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'identity.createdDate' },
                        { path: 'identity.updatedDate' },
                        { path: 'identity.identityProfile.customFields.value.dateValue' },
                        { path: 'additionalData.dateValue' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'identity.identityProfile.customFields.value.numValue' },
                        { path: 'additionalData.numValue' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __registerV2;
}
/**
 * Logs in an existing member.
 *
 * Typically, after a successful login, you generate and use member tokens for the
 * logged-in member so that subsequent API calls are called as part of a member session.
 * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).
 */
export function loginV2(payload) {
    function __loginV2({ host }) {
        const metadata = {
            entityFqdn: 'wix.iam.authentication.v1.authentication',
            method: 'POST',
            methodFqn: 'wix.iam.authentication.v1.AuthenticationService.LoginV2',
            packageName: PACKAGE_NAME,
            url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
                protoPath: '/v2/login',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'identity.createdDate' },
                        { path: 'identity.updatedDate' },
                        { path: 'identity.identityProfile.customFields.value.dateValue' },
                        { path: 'additionalData.dateValue' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'identity.identityProfile.customFields.value.numValue' },
                        { path: 'additionalData.numValue' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __loginV2;
}
/** Changes the password of a logged in user. */
export function changePassword(payload) {
    function __changePassword({ host }) {
        const metadata = {
            entityFqdn: 'wix.iam.authentication.v1.authentication',
            method: 'POST',
            methodFqn: 'wix.iam.authentication.v1.AuthenticationService.ChangePassword',
            packageName: PACKAGE_NAME,
            url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
                protoPath: '/v2/change-password',
                data: payload,
                host,
            }),
            data: payload,
        };
        return metadata;
    }
    return __changePassword;
}
export function loginWithIdpConnection(payload) {
    function __loginWithIdpConnection({ host }) {
        const metadata = {
            entityFqdn: 'wix.iam.authentication.v1.authentication',
            method: 'GET',
            methodFqn: 'wix.iam.authentication.v1.AuthenticationService.LoginWithIdpConnection',
            packageName: PACKAGE_NAME,
            url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
                protoPath: '/v1/sso/login/{tenantId}/{idpConnectionId}',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTBytesToSDKBytes,
                    paths: [{ path: 'body' }],
                },
            ]),
            fallback: [
                {
                    method: 'GET',
                    url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
                        protoPath: '/v1/sso/login/{tenantId}/{idpConnectionId}',
                        data: payload,
                        host,
                    }),
                    params: toURLSearchParams(payload),
                },
            ],
        };
        return metadata;
    }
    return __loginWithIdpConnection;
}
export function loginCallback(payload) {
    function __loginCallback({ host }) {
        const metadata = {
            entityFqdn: 'wix.iam.authentication.v1.authentication',
            method: 'GET',
            methodFqn: 'wix.iam.authentication.v1.AuthenticationService.LoginCallback',
            packageName: PACKAGE_NAME,
            url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
                protoPath: '/v1/callback',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTBytesToSDKBytes,
                    paths: [{ path: 'body' }],
                },
            ]),
        };
        return metadata;
    }
    return __loginCallback;
}
/**
 * Log in with an IDP connection using a set of tokens that will be passed to the IDP for validation.
 * This can be used when the IDP can perform authentication directly with the client and then provide a token that
 * proves that authentication succeeded, eg. OIDC on a native app or sign in with Google when using their SDK.
 */
export function loginWithIdpConnectionTokenParams(payload) {
    function __loginWithIdpConnectionTokenParams({ host }) {
        const metadata = {
            entityFqdn: 'wix.iam.authentication.v1.authentication',
            method: 'POST',
            methodFqn: 'wix.iam.authentication.v1.AuthenticationService.LoginWithIdpConnectionTokenParams',
            packageName: PACKAGE_NAME,
            url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
                protoPath: '/v1/sso/login-with-token-params',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'identity.createdDate' },
                        { path: 'identity.updatedDate' },
                        { path: 'identity.identityProfile.customFields.value.dateValue' },
                        { path: 'additionalData.dateValue' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'identity.identityProfile.customFields.value.numValue' },
                        { path: 'additionalData.numValue' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __loginWithIdpConnectionTokenParams;
}
export function signOn(payload) {
    function __signOn({ host }) {
        const serializedData = transformPaths(payload, [
            {
                transformFn: transformSDKFloatToRESTFloat,
                paths: [{ path: 'profile.customFields.value.numValue' }],
            },
            {
                transformFn: transformSDKTimestampToRESTTimestamp,
                paths: [{ path: 'profile.customFields.value.dateValue' }],
            },
        ]);
        const metadata = {
            entityFqdn: 'wix.iam.authentication.v1.authentication',
            method: 'POST',
            methodFqn: 'wix.iam.authentication.v1.AuthenticationService.SignOn',
            packageName: PACKAGE_NAME,
            url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
                protoPath: '/v2/sign-on',
                data: serializedData,
                host,
            }),
            data: serializedData,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'identity.createdDate' },
                        { path: 'identity.updatedDate' },
                        { path: 'identity.identityProfile.customFields.value.dateValue' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'identity.identityProfile.customFields.value.numValue' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __signOn;
}
/** Logs out a member. */
export function logout(payload) {
    function __logout({ host }) {
        const metadata = {
            entityFqdn: 'wix.iam.authentication.v1.authentication',
            method: 'GET',
            methodFqn: 'wix.iam.authentication.v1.AuthenticationService.Logout',
            packageName: PACKAGE_NAME,
            url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
                protoPath: '/v1/logout',
                data: payload,
                host,
            }),
            params: toURLSearchParams(payload),
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTBytesToSDKBytes,
                    paths: [{ path: 'body' }],
                },
            ]),
        };
        return metadata;
    }
    return __logout;
}
export function verify(payload) {
    function __verify({ host }) {
        const metadata = {
            entityFqdn: 'wix.iam.authentication.v1.authentication',
            method: 'POST',
            methodFqn: 'wix.iam.authentication.v1.AuthenticationService.Verify',
            packageName: PACKAGE_NAME,
            url: resolveWixIamAuthenticationV1AuthenticationServiceUrl({
                protoPath: '/v2/{factorType}/verify',
                data: payload,
                host,
            }),
            data: payload,
            transformResponse: (payload) => transformPaths(payload, [
                {
                    transformFn: transformRESTTimestampToSDKTimestamp,
                    paths: [
                        { path: 'identity.createdDate' },
                        { path: 'identity.updatedDate' },
                        { path: 'identity.identityProfile.customFields.value.dateValue' },
                        { path: 'additionalData.dateValue' },
                    ],
                },
                {
                    transformFn: transformRESTFloatToSDKFloat,
                    paths: [
                        { path: 'identity.identityProfile.customFields.value.numValue' },
                        { path: 'additionalData.numValue' },
                    ],
                },
            ]),
        };
        return metadata;
    }
    return __verify;
}
//# sourceMappingURL=iam-authentication-v1-authentication-authentication.http.js.map