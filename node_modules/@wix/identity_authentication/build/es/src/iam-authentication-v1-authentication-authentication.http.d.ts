import { RequestOptionsFactory } from '@wix/sdk-types';
/**
 * Registers a new member.
 *
 * Typically, after a successful registration, you generate and use member tokens for the
 * registered member so that subsequent API calls are called as part of a member session.
 * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).
 *
 * If the email used to register the member already exists as a contact email, the registering
 * member need to verify the email address using a code that is sent to the address.
 */
export declare function registerV2(payload: object): RequestOptionsFactory<any>;
/**
 * Logs in an existing member.
 *
 * Typically, after a successful login, you generate and use member tokens for the
 * logged-in member so that subsequent API calls are called as part of a member session.
 * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).
 */
export declare function loginV2(payload: object): RequestOptionsFactory<any>;
/** Changes the password of a logged in user. */
export declare function changePassword(payload: object): RequestOptionsFactory<any>;
export declare function loginWithIdpConnection(payload: object): RequestOptionsFactory<any>;
export declare function loginCallback(payload: object): RequestOptionsFactory<any>;
/**
 * Log in with an IDP connection using a set of tokens that will be passed to the IDP for validation.
 * This can be used when the IDP can perform authentication directly with the client and then provide a token that
 * proves that authentication succeeded, eg. OIDC on a native app or sign in with Google when using their SDK.
 */
export declare function loginWithIdpConnectionTokenParams(payload: object): RequestOptionsFactory<any>;
export declare function signOn(payload: object): RequestOptionsFactory<any>;
/** Logs out a member. */
export declare function logout(payload: object): RequestOptionsFactory<any>;
export declare function verify(payload: object): RequestOptionsFactory<any>;
