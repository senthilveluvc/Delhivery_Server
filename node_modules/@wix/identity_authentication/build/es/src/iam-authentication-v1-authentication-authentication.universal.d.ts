export interface Authentication {
}
export interface RegisterV2Request {
    /** Identifier of the registering member. */
    loginId: LoginId;
    /** Password of the registering member. */
    password?: string;
    /** Profile information of registering member. */
    profile?: IdentityProfile;
    /** CAPTCHA tokens, when CAPTCHA setting is on. */
    captchaTokens?: CaptchaToken[];
    /** Additional data that's relevant for the flow. */
    clientMetaData?: Record<string, any> | null;
}
export interface LoginId extends LoginIdTypeOneOf {
    /** Login email address. */
    email?: string;
}
/** @oneof */
export interface LoginIdTypeOneOf {
    /** Login email address. */
    email?: string;
}
export interface IdentityProfile {
    /** Profile first name. */
    firstName?: string | null;
    /** Profile last name. */
    lastName?: string | null;
    /** Profile nickname. */
    nickname?: string | null;
    /** Profile picture URL. */
    picture?: string | null;
    /**
     * Deprecated. Use `secondaryEmails` instead.
     * @deprecated Deprecated. Use `secondaryEmails` instead.
     * @replacedBy secondary_emails
     * @targetRemovalDate 2023-11-01
     */
    emails?: string[];
    /**
     * Deprecated. Use `phonesV2` instead.
     * @deprecated Deprecated. Use `phonesV2` instead.
     * @replacedBy phones_v2
     * @targetRemovalDate 2023-11-01
     */
    phones?: string[];
    /** List of profile labels. */
    labels?: string[];
    /** Profile language. */
    language?: string | null;
    /** Profile privacy status. */
    privacyStatus?: PrivacyStatus;
    /**
     * Any number of custom fields. [Custom fields](https://support.wix.com/en/article/adding-custom-fields-to-contacts)
     * are used to store additional information about your site or app's contacts.
     */
    customFields?: CustomField[];
    /** List of profile email addresses. */
    secondaryEmails?: SecondaryEmail[];
    /** List of profile phone numbers. */
    phonesV2?: Phone[];
    /** List of profile physical addresses. */
    addresses?: AddressWrapper[];
    /** Company name. */
    company?: string | null;
    /** Position within company. */
    position?: string | null;
    /** Profile birthdate in `YYYY-MM-DD` format. */
    birthdate?: string | null;
    /** Profile slug. */
    slug?: string | null;
}
export declare enum PrivacyStatus {
    /** No defined privacy status. */
    UNDEFINED = "UNDEFINED",
    /** Profile details, such as profile name and profile picture, are visible to other members. */
    PUBLIC = "PUBLIC",
    /** Profile details aren't visible to other members. */
    PRIVATE = "PRIVATE"
}
export interface CustomField {
    /**
     * Custom field name. The name must match one of the key properties of the objects returned by
     * [`List Extended Fields`](https://dev.wix.com/docs/rest/api-reference/contacts/extended-fields/list-extended-fields)
     * with the `custom.` prefix removed.
     */
    name?: string;
    /** Custom field value. */
    value?: V1CustomValue;
}
export interface V1CustomValue extends V1CustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date | null;
    /** Array of values. */
    listValue?: V1ListValue;
    /** Map of values. */
    mapValue?: V1MapValue;
}
/** @oneof */
export interface V1CustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date | null;
    /** Array of values. */
    listValue?: V1ListValue;
    /** Map of values. */
    mapValue?: V1MapValue;
}
export interface V1ListValue {
    /** Custom value. */
    value?: V1CustomValue[];
}
export interface V1MapValue {
    /** Mapped custom value. */
    value?: Record<string, V1CustomValue>;
}
export interface SecondaryEmail {
    /** Email address. */
    email?: string;
    /** Email tag. */
    tag?: EmailTag;
}
export declare enum EmailTag {
    UNTAGGED = "UNTAGGED",
    MAIN = "MAIN",
    HOME = "HOME",
    WORK = "WORK"
}
export interface Phone {
    /** Phone country code. */
    countryCode?: string | null;
    /** Phone number. */
    phone?: string;
    /** Phone tag. */
    tag?: PhoneTag;
}
export declare enum PhoneTag {
    UNTAGGED = "UNTAGGED",
    MAIN = "MAIN",
    HOME = "HOME",
    MOBILE = "MOBILE",
    WORK = "WORK",
    FAX = "FAX"
}
export interface AddressWrapper {
    /** Address. */
    address?: Address;
    /** Address tag. */
    tag?: AddressTag;
}
/** Physical address */
export interface Address {
    /** Country code. */
    country?: string | null;
    /** Subdivision. Usually a state, region, prefecture, or province code, according to [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2). */
    subdivision?: string | null;
    /** City name. */
    city?: string | null;
    /** Zip/postal code. */
    postalCode?: string | null;
    /** Main address line, usually street and number as free text. */
    addressLine1?: string | null;
    /** Free text providing more detailed address info. Usually contains apartment, suite, and floor. */
    addressLine2?: string | null;
}
export declare enum AddressTag {
    UNTAGGED = "UNTAGGED",
    HOME = "HOME",
    WORK = "WORK",
    BILLING = "BILLING",
    SHIPPING = "SHIPPING"
}
export interface CaptchaToken extends CaptchaTokenTokenOneOf {
    Recaptcha?: string;
    InvisibleRecaptcha?: string;
    NoCaptcha?: string;
}
/** @oneof */
export interface CaptchaTokenTokenOneOf {
    Recaptcha?: string;
    InvisibleRecaptcha?: string;
    NoCaptcha?: string;
}
export interface StateMachineResponse extends StateMachineResponseStateDataOneOf {
    /** Current state of the login or registration process. */
    state?: StateType;
    /** Session token. If `state` is not `SUCCESS`, this field is undefined. */
    sessionToken?: string | null;
    /** Token that represents the current state of the login or registration process. */
    stateToken?: string | null;
    /** Identity of the current member. */
    identity?: Identity;
    /** Additional data relevant to the login or registration process. */
    additionalData?: Record<string, CustomValue>;
}
/** @oneof */
export interface StateMachineResponseStateDataOneOf {
}
export declare enum StateType {
    /** Initial unknown state. */
    UNKNOWN_STATE = "UNKNOWN_STATE",
    /** Login completed successfully. */
    SUCCESS = "SUCCESS",
    /** Indicates that the member needs the owner to approve their registration. */
    REQUIRE_OWNER_APPROVAL = "REQUIRE_OWNER_APPROVAL",
    /** Indicates that the member needs to verify their email. */
    REQUIRE_EMAIL_VERIFICATION = "REQUIRE_EMAIL_VERIFICATION",
    /** Indicates that the `status` is not one that prevents the member logging in, meaning it's not `OFFLINE`, `BLOCKED`, or `DELETED`. */
    STATUS_CHECK = "STATUS_CHECK"
}
export interface Identity {
    /** Identity ID. */
    _id?: string | null;
    /**
     * Revision number, which increments by 1 each time the identity is updated.
     * To prevent conflicting changes,
     * the current revision must be passed when updating the identity.
     *
     * Ignored when creating an identity.
     */
    revision?: string | null;
    /**
     * Date and time the identity was created.
     * @readonly
     */
    _createdDate?: Date | null;
    /**
     * Date and time the identity was updated.
     * @readonly
     */
    _updatedDate?: Date | null;
    /** The identity configured connections to authenticate with. */
    connections?: Connection[];
    /** Identity profile. */
    identityProfile?: IdentityProfile;
    /**
     * Additional information about the identity that can impact user access.
     * This data cannot be set.
     */
    metadata?: Metadata;
    /** Identity email address. */
    email?: Email;
    /** Identity's current status. */
    status?: StatusV2;
    /** Custom attributes. */
    customAttributes?: Record<string, any> | null;
    /**
     * Identity verification factors.
     * @readonly
     */
    factors?: Factor[];
}
export interface Connection extends ConnectionTypeOneOf {
    /** IDP connection. */
    idpConnection?: IdpConnection;
    /** Authenticator connection. */
    authenticatorConnection?: AuthenticatorConnection;
}
/** @oneof */
export interface ConnectionTypeOneOf {
    /** IDP connection. */
    idpConnection?: IdpConnection;
    /** Authenticator connection. */
    authenticatorConnection?: AuthenticatorConnection;
}
export interface IdpConnection {
    /** IDP connection ID. */
    idpConnectionId?: string;
    /** IDP user ID. */
    idpUserId?: string;
}
export interface AuthenticatorConnection {
    /** Authenticator connection ID. */
    authenticatorConnectionId?: string;
    /** Whether re-enrollment is required. */
    reEnrollmentRequired?: boolean;
}
export interface Metadata {
    /**
     * General tags. For example, `"isOwner"`.
     * @readonly
     */
    tags?: string[];
}
export interface Email {
    /** Email address. */
    address?: string;
    /** Whether the email address is verified. */
    isVerified?: boolean;
}
export interface StatusV2 {
    name?: StatusName;
    reasons?: Reason[];
}
export declare enum StatusName {
    UNKNOWN_STATUS = "UNKNOWN_STATUS",
    PENDING = "PENDING",
    ACTIVE = "ACTIVE",
    DELETED = "DELETED",
    BLOCKED = "BLOCKED",
    OFFLINE = "OFFLINE"
}
export declare enum Reason {
    UNKNOWN_REASON = "UNKNOWN_REASON",
    PENDING_ADMIN_APPROVAL_REQUIRED = "PENDING_ADMIN_APPROVAL_REQUIRED",
    PENDING_EMAIL_VERIFICATION_REQUIRED = "PENDING_EMAIL_VERIFICATION_REQUIRED"
}
export interface Factor {
    /** Factor ID. */
    factorId?: string;
    /** Factor type. */
    type?: FactorType;
    /** Factor status. */
    status?: Status;
}
export declare enum FactorType {
    /** Unknown factor type. */
    UNKNOWN_FACTOR_TYPE = "UNKNOWN_FACTOR_TYPE",
    /** Requires a password. */
    PASSWORD = "PASSWORD",
    /** Requires a code sent via SMS. */
    SMS = "SMS",
    /** Requires a code sent by phone call. */
    CALL = "CALL",
    /** Requires a code sent by email. */
    EMAIL = "EMAIL",
    /** Requires authentication via an authenticator app. */
    TOTP = "TOTP",
    /** Requires authentication via a push notification. */
    PUSH = "PUSH"
}
export declare enum Status {
    /** Factor requires activation. */
    INACTIVE = "INACTIVE",
    /** Factor is active and can be used for authentication. */
    ACTIVE = "ACTIVE",
    /** Factor is blocked and cannot be used for authentication. The user should reenroll the factor. */
    REQUIRE_REENROLL = "REQUIRE_REENROLL"
}
export interface CustomValue extends CustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date | null;
    /** List value. */
    listValue?: ListValue;
    /** Map value. */
    mapValue?: MapValue;
}
/** @oneof */
export interface CustomValueValueOneOf {
    /** String value. */
    strValue?: string;
    /** Number value. */
    numValue?: number;
    /** Date value. */
    dateValue?: Date | null;
    /** List value. */
    listValue?: ListValue;
    /** Map value. */
    mapValue?: MapValue;
}
export interface ListValue {
    /** Custom value. */
    value?: CustomValue[];
}
export interface MapValue {
    /** Mapped custom value. */
    value?: Record<string, CustomValue>;
}
export interface RequireMfaData {
    availableFactors?: V1Factor[];
}
export interface V1Factor {
    /** Type of verifation factor. */
    factorType?: FactorType;
}
export interface MfaChallengeData {
    /** Type of verifation factor. */
    factorType?: FactorType;
    verificationChallengeData?: VerificationChallenge;
    /** Factors types the member can choose from to verify themselves. */
    availableFactors?: V1Factor[];
}
export interface VerificationChallenge extends VerificationChallengeFactorChallengeDataOneOf {
    pushData?: PushChallengeData;
    hint?: string | null;
}
/** @oneof */
export interface VerificationChallengeFactorChallengeDataOneOf {
    pushData?: PushChallengeData;
}
export interface PushChallengeData {
    /**
     * This should be tied to a specific push notification.
     * It will be sent in subsequent requests to verify the factor.
     */
    transactionId?: string;
}
export interface LoginV2Request {
    /** Identifier of identity logging in. */
    loginId: LoginId;
    /** Password of the identity logging in. */
    password?: string;
    /** CAPTCHA tokens, when CAPTCHA setting is on. */
    captchaTokens?: CaptchaToken[];
    /** Additional data that's relevant for the flow. */
    clientMetaData?: Record<string, any> | null;
}
export interface ChangePasswordRequest {
    /** The new password to set for the logged in user */
    newPassword: string;
}
export interface ChangePasswordResponse {
}
export interface LoginWithIdpConnectionRequest {
    /** The id of the connection id (can be fetched by calling connection-service.listEnabledConnectionsClientData */
    idpConnectionId: string;
    /** The id of the tenant the caller wants to login into */
    tenantId: string;
    /** The type of the tenant the caller wants to login into */
    tenantType: TenantType;
    customPayload?: Record<string, string>;
    /**
     * This flow ultimately returns an HTML page that asynchronously posts the LoginResponse via the BroadcastChannel API.
     * The message will be posted to a channel named `wix-idp-$session_id`, and encrypted with the `encryption_key`.
     * Encryption key should be base64 encoded. Encryption is done using AES-GCM with a random IV that's sent alongside the payload
     */
    sessionId: string;
    encryptionKey: string;
    visitorId?: string | null;
    bsi?: string | null;
}
export declare enum TenantType {
    UNKNOWN_TENANT_TYPE = "UNKNOWN_TENANT_TYPE",
    ACCOUNT = "ACCOUNT",
    SITE = "SITE",
    ROOT = "ROOT"
}
export interface RawHttpResponse {
    body?: Uint8Array;
    statusCode?: number | null;
    headers?: HeadersEntry[];
}
export interface HeadersEntry {
    key?: string;
    value?: string;
}
export interface RawHttpRequest {
    body?: Uint8Array;
    pathParams?: PathParametersEntry[];
    queryParams?: QueryParametersEntry[];
    headers?: HeadersEntry[];
    method?: string;
    rawPath?: string;
    rawQuery?: string;
}
export interface PathParametersEntry {
    key?: string;
    value?: string;
}
export interface QueryParametersEntry {
    key?: string;
    value?: string;
}
export interface LoginCallbackRequest {
    /** state that that received on the redirect */
    state?: string;
    /** session token */
    sessionToken?: string;
}
export interface LoginWithIdpConnectionTokenParamsRequest {
    /** The id of the connection id (can be fetched by calling connection-service.listEnabledConnectionsClientData) */
    idpConnectionId?: string;
    /** A set of fields that are required for the connection to be able to identify and authenticate the user */
    tokenParams?: Record<string, string>;
}
export interface SignOnRequest {
    /** the identifier of the identity */
    loginId: LoginId;
    /** profile of the identity */
    profile?: IdentityProfile;
    /** when true will mark the email of the identity as verified */
    verifyEmail?: boolean;
    /** when false will create a new contact instead of merging the existing contact into the identity */
    mergeExistingContact?: boolean;
}
export interface SignOnResponse {
    /** session token for the requested identity */
    sessionToken?: string;
    /** The Identity of the provided login_id */
    identity?: Identity;
}
/** logout request payload */
export interface LogoutRequest {
    /** redirect after logout */
    postLogoutRedirectUri?: string | null;
    /** caller identifier */
    clientId?: string | null;
}
export interface VerifyRequest extends VerifyRequestFactorDataOneOf {
    smsData?: SmsVerifyData;
    callData?: CallVerifyData;
    emailData?: EmailVerifyData;
    totpData?: TotpVerifyData;
    pushData?: PushVerifyData;
    /** TODO: is this a reasonable maxLength? */
    stateToken?: string;
    factorType: FactorType;
    rememberThisDevice?: boolean;
}
/** @oneof */
export interface VerifyRequestFactorDataOneOf {
    smsData?: SmsVerifyData;
    callData?: CallVerifyData;
    emailData?: EmailVerifyData;
    totpData?: TotpVerifyData;
    pushData?: PushVerifyData;
}
export interface SmsVerifyData {
    code?: string | null;
}
export interface CallVerifyData {
    code?: string | null;
}
export interface EmailVerifyData {
    code?: string | null;
}
export interface TotpVerifyData {
    code?: string | null;
}
export interface PushVerifyData {
    transactionId?: string | null;
}
interface V1FactorNonNullableFields {
    factorType: FactorType;
}
interface RequireMfaDataNonNullableFields {
    availableFactors: V1FactorNonNullableFields[];
}
interface PushChallengeDataNonNullableFields {
    transactionId: string;
}
interface VerificationChallengeNonNullableFields {
    pushData?: PushChallengeDataNonNullableFields;
}
interface MfaChallengeDataNonNullableFields {
    factorType: FactorType;
    verificationChallengeData?: VerificationChallengeNonNullableFields;
    availableFactors: V1FactorNonNullableFields[];
}
interface IdpConnectionNonNullableFields {
    idpConnectionId: string;
    idpUserId: string;
}
interface AuthenticatorConnectionNonNullableFields {
    authenticatorConnectionId: string;
    reEnrollmentRequired: boolean;
}
interface ConnectionNonNullableFields {
    idpConnection?: IdpConnectionNonNullableFields;
    authenticatorConnection?: AuthenticatorConnectionNonNullableFields;
}
interface V1ListValueNonNullableFields {
    value: V1CustomValueNonNullableFields[];
}
interface V1CustomValueNonNullableFields {
    strValue: string;
    numValue: number;
    listValue?: V1ListValueNonNullableFields;
}
interface CustomFieldNonNullableFields {
    name: string;
    value?: V1CustomValueNonNullableFields;
}
interface SecondaryEmailNonNullableFields {
    email: string;
    tag: EmailTag;
}
interface PhoneNonNullableFields {
    phone: string;
    tag: PhoneTag;
}
interface AddressWrapperNonNullableFields {
    tag: AddressTag;
}
interface IdentityProfileNonNullableFields {
    emails: string[];
    phones: string[];
    labels: string[];
    privacyStatus: PrivacyStatus;
    customFields: CustomFieldNonNullableFields[];
    secondaryEmails: SecondaryEmailNonNullableFields[];
    phonesV2: PhoneNonNullableFields[];
    addresses: AddressWrapperNonNullableFields[];
}
interface MetadataNonNullableFields {
    tags: string[];
}
interface EmailNonNullableFields {
    address: string;
    isVerified: boolean;
}
interface StatusV2NonNullableFields {
    name: StatusName;
    reasons: Reason[];
}
interface FactorNonNullableFields {
    factorId: string;
    type: FactorType;
    status: Status;
}
interface IdentityNonNullableFields {
    connections: ConnectionNonNullableFields[];
    identityProfile?: IdentityProfileNonNullableFields;
    metadata?: MetadataNonNullableFields;
    email?: EmailNonNullableFields;
    status?: StatusV2NonNullableFields;
    factors: FactorNonNullableFields[];
}
export interface StateMachineResponseNonNullableFields {
    requireMfaData?: RequireMfaDataNonNullableFields;
    mfaChallengeData?: MfaChallengeDataNonNullableFields;
    state: StateType;
    identity?: IdentityNonNullableFields;
}
interface HeadersEntryNonNullableFields {
    key: string;
    value: string;
}
export interface RawHttpResponseNonNullableFields {
    body: Uint8Array;
    headers: HeadersEntryNonNullableFields[];
}
export interface SignOnResponseNonNullableFields {
    sessionToken: string;
    identity?: IdentityNonNullableFields;
}
/**
 * Registers a new member.
 *
 * Typically, after a successful registration, you generate and use member tokens for the
 * registered member so that subsequent API calls are called as part of a member session.
 * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).
 *
 * If the email used to register the member already exists as a contact email, the registering
 * member need to verify the email address using a code that is sent to the address.
 * @param loginId - Identifier of the registering member.
 * @public
 * @requiredField loginId
 * @fqn wix.iam.authentication.v1.AuthenticationService.RegisterV2
 */
export declare function registerV2(loginId: LoginId, options?: RegisterV2Options): Promise<StateMachineResponse & StateMachineResponseNonNullableFields>;
export interface RegisterV2Options {
    /** Password of the registering member. */
    password?: string;
    /** Profile information of registering member. */
    profile?: IdentityProfile;
    /** CAPTCHA tokens, when CAPTCHA setting is on. */
    captchaTokens?: CaptchaToken[];
    /** Additional data that's relevant for the flow. */
    clientMetaData?: Record<string, any> | null;
}
/**
 * Logs in an existing member.
 *
 * Typically, after a successful login, you generate and use member tokens for the
 * logged-in member so that subsequent API calls are called as part of a member session.
 * Use the `sessionToken` in the response to [get the site member's access and refresh tokens](https://dev.wix.com/docs/go-headless/coding/rest-api/visitors-and-members/handle-members-with-custom-login#get-the-site-members-access-and-refresh-tokens).
 * @param loginId - Identifier of identity logging in.
 * @public
 * @requiredField loginId
 * @fqn wix.iam.authentication.v1.AuthenticationService.LoginV2
 */
export declare function loginV2(loginId: LoginId, options?: LoginV2Options): Promise<StateMachineResponse & StateMachineResponseNonNullableFields>;
export interface LoginV2Options {
    /** Password of the identity logging in. */
    password?: string;
    /** CAPTCHA tokens, when CAPTCHA setting is on. */
    captchaTokens?: CaptchaToken[];
    /** Additional data that's relevant for the flow. */
    clientMetaData?: Record<string, any> | null;
}
/**
 * Changes the password of a logged in user.
 * @param newPassword - The new password to set for the logged in user
 * @public
 * @documentationMaturity preview
 * @requiredField newPassword
 * @permissionId IAM.CHANGE_PASSWORD
 * @fqn wix.iam.authentication.v1.AuthenticationService.ChangePassword
 */
export declare function changePassword(newPassword: string): Promise<void>;
/** @param tenantType - The type of the tenant the caller wants to login into
 * @public
 * @documentationMaturity preview
 * @requiredField identifiers
 * @requiredField identifiers.idpConnectionId
 * @requiredField identifiers.tenantId
 * @requiredField options.encryptionKey
 * @requiredField options.sessionId
 * @requiredField tenantType
 * @fqn wix.iam.authentication.v1.AuthenticationService.LoginWithIdpConnection
 */
export declare function loginWithIdpConnection(identifiers: LoginWithIdpConnectionIdentifiers, tenantType: TenantType, options?: LoginWithIdpConnectionOptions): Promise<RawHttpResponse & RawHttpResponseNonNullableFields>;
export interface LoginWithIdpConnectionIdentifiers {
    /** The id of the tenant the caller wants to login into */
    tenantId: string;
    /** The id of the connection id (can be fetched by calling connection-service.listEnabledConnectionsClientData */
    idpConnectionId: string;
}
export interface LoginWithIdpConnectionOptions {
    customPayload?: Record<string, string>;
    /**
     * This flow ultimately returns an HTML page that asynchronously posts the LoginResponse via the BroadcastChannel API.
     * The message will be posted to a channel named `wix-idp-$session_id`, and encrypted with the `encryption_key`.
     * Encryption key should be base64 encoded. Encryption is done using AES-GCM with a random IV that's sent alongside the payload
     */
    sessionId: string;
    encryptionKey: string;
    visitorId?: string | null;
    bsi?: string | null;
}
/** @public
 * @documentationMaturity preview
 * @fqn wix.iam.authentication.v1.AuthenticationService.LoginCallback
 */
export declare function loginCallback(options?: LoginCallbackOptions): Promise<RawHttpResponse & RawHttpResponseNonNullableFields>;
export interface LoginCallbackOptions {
    /** state that that received on the redirect */
    state?: string;
    /** session token */
    sessionToken?: string;
}
/**
 * Log in with an IDP connection using a set of tokens that will be passed to the IDP for validation.
 * This can be used when the IDP can perform authentication directly with the client and then provide a token that
 * proves that authentication succeeded, eg. OIDC on a native app or sign in with Google when using their SDK.
 * @public
 * @documentationMaturity preview
 * @fqn wix.iam.authentication.v1.AuthenticationService.LoginWithIdpConnectionTokenParams
 */
export declare function loginWithIdpConnectionTokenParams(options?: LoginWithIdpConnectionTokenParamsOptions): Promise<StateMachineResponse & StateMachineResponseNonNullableFields>;
export interface LoginWithIdpConnectionTokenParamsOptions {
    /** The id of the connection id (can be fetched by calling connection-service.listEnabledConnectionsClientData) */
    idpConnectionId?: string;
    /** A set of fields that are required for the connection to be able to identify and authenticate the user */
    tokenParams?: Record<string, string>;
}
/** @param loginId - the identifier of the identity
 * @public
 * @documentationMaturity preview
 * @requiredField loginId
 * @permissionId IAM.AUTHENTICAITON_SIGN_ON
 * @permissionScope Manage Members Authentication
 * @permissionScopeId SCOPE.DC-IDENTITY.MANAGE_AUTHENTICATION
 * @applicableIdentity APP
 * @fqn wix.iam.authentication.v1.AuthenticationService.SignOn
 */
export declare function signOn(loginId: LoginId, options?: SignOnOptions): Promise<SignOnResponse & SignOnResponseNonNullableFields>;
export interface SignOnOptions {
    /** profile of the identity */
    profile?: IdentityProfile;
    /** when true will mark the email of the identity as verified */
    verifyEmail?: boolean;
    /** when false will create a new contact instead of merging the existing contact into the identity */
    mergeExistingContact?: boolean;
}
/**
 * Logs out a member.
 * @public
 * @documentationMaturity preview
 * @fqn wix.iam.authentication.v1.AuthenticationService.Logout
 */
export declare function logout(options?: LogoutOptions): Promise<RawHttpResponse & RawHttpResponseNonNullableFields>;
export interface LogoutOptions {
    /** redirect after logout */
    postLogoutRedirectUri?: string | null;
    /** caller identifier */
    clientId?: string | null;
}
/** @public
 * @documentationMaturity preview
 * @requiredField factorType
 * @fqn wix.iam.authentication.v1.AuthenticationService.Verify
 */
export declare function verify(factorType: FactorType, options?: VerifyOptions): Promise<StateMachineResponse & StateMachineResponseNonNullableFields>;
export interface VerifyOptions extends VerifyRequestFactorDataOneOf {
    /** TODO: is this a reasonable maxLength? */
    stateToken?: string;
    rememberThisDevice?: boolean;
    smsData?: SmsVerifyData;
    callData?: CallVerifyData;
    emailData?: EmailVerifyData;
    totpData?: TotpVerifyData;
    pushData?: PushVerifyData;
}
export {};
