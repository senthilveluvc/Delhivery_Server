import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixGatewaysEcomV1DeliveryRatesGateway from './gateways-ecom-v1-delivery-rates-gateway-delivery-solutions.http.js';
import { transformSDKAddressToRESTAddress } from '@wix/sdk-runtime/transformations/address';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var SubdivisionType;
(function (SubdivisionType) {
    SubdivisionType["UNKNOWN_SUBDIVISION_TYPE"] = "UNKNOWN_SUBDIVISION_TYPE";
    /** State */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_1"] = "ADMINISTRATIVE_AREA_LEVEL_1";
    /** County */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_2"] = "ADMINISTRATIVE_AREA_LEVEL_2";
    /** City/town */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_3"] = "ADMINISTRATIVE_AREA_LEVEL_3";
    /** Neighborhood/quarter */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_4"] = "ADMINISTRATIVE_AREA_LEVEL_4";
    /** Street/block */
    SubdivisionType["ADMINISTRATIVE_AREA_LEVEL_5"] = "ADMINISTRATIVE_AREA_LEVEL_5";
    /** ADMINISTRATIVE_AREA_LEVEL_0. Indicates the national political entity, and is typically the highest order type returned by the Geocoder. */
    SubdivisionType["COUNTRY"] = "COUNTRY";
})(SubdivisionType || (SubdivisionType = {}));
/** tax info types */
export var VatType;
(function (VatType) {
    VatType["UNSPECIFIED"] = "UNSPECIFIED";
    /** CPF - for individual tax payers. */
    VatType["CPF"] = "CPF";
    /** CNPJ - for corporations */
    VatType["CNPJ"] = "CNPJ";
})(VatType || (VatType = {}));
export var WeightUnit;
(function (WeightUnit) {
    /** Weight unit can't be classified, due to an error */
    WeightUnit["UNSPECIFIED_WEIGHT_UNIT"] = "UNSPECIFIED_WEIGHT_UNIT";
    /** Kilograms */
    WeightUnit["KG"] = "KG";
    /** Pounds */
    WeightUnit["LB"] = "LB";
})(WeightUnit || (WeightUnit = {}));
export var PickupMethod;
(function (PickupMethod) {
    PickupMethod["UNKNOWN_METHOD"] = "UNKNOWN_METHOD";
    PickupMethod["STORE_PICKUP"] = "STORE_PICKUP";
    PickupMethod["PICKUP_POINT"] = "PICKUP_POINT";
})(PickupMethod || (PickupMethod = {}));
export var ChargeType;
(function (ChargeType) {
    ChargeType["HANDLING_FEE"] = "HANDLING_FEE";
})(ChargeType || (ChargeType = {}));
export var RuleType;
(function (RuleType) {
    RuleType["VALIDATION"] = "VALIDATION";
    RuleType["OTHER"] = "OTHER";
    RuleType["MAX"] = "MAX";
    RuleType["MIN"] = "MIN";
    RuleType["MAX_LENGTH"] = "MAX_LENGTH";
    RuleType["MIN_LENGTH"] = "MIN_LENGTH";
    RuleType["MAX_SIZE"] = "MAX_SIZE";
    RuleType["MIN_SIZE"] = "MIN_SIZE";
    RuleType["FORMAT"] = "FORMAT";
    RuleType["DECIMAL_LTE"] = "DECIMAL_LTE";
    RuleType["DECIMAL_GTE"] = "DECIMAL_GTE";
    RuleType["DECIMAL_LT"] = "DECIMAL_LT";
    RuleType["DECIMAL_GT"] = "DECIMAL_GT";
    RuleType["DECIMAL_MAX_SCALE"] = "DECIMAL_MAX_SCALE";
    RuleType["INVALID_ENUM_VALUE"] = "INVALID_ENUM_VALUE";
    RuleType["REQUIRED_FIELD"] = "REQUIRED_FIELD";
    RuleType["FIELD_NOT_ALLOWED"] = "FIELD_NOT_ALLOWED";
    RuleType["ONE_OF_ALIGNMENT"] = "ONE_OF_ALIGNMENT";
    RuleType["EXACT_LENGTH"] = "EXACT_LENGTH";
    RuleType["EXACT_SIZE"] = "EXACT_SIZE";
})(RuleType || (RuleType = {}));
/**
 * Get Delivery Solutions for the given line items from all relevant delivery carriers
 * @param lineItems - list of items to delivery that each of them points to delivery profile and delivery rule.
 * @public
 * @documentationMaturity preview
 * @requiredField lineItems
 * @requiredField options.currency
 * @requiredField options.destination
 * @requiredField options.destination.country
 * @permissionId ECOM.DELIVERY_SOLUTION_READ
 * @applicableIdentity VISITOR
 * @returns Each delivery option has a list of items that can be delivered by it - the chosen one
 * on Errors throw a business error from TC to catch and trigger destination completion
 * @fqn wix.ecom.deliveryprofile.v1.DeliveryRates.GetDeliverySolutions
 */
export async function getDeliverySolutions(lineItems, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        lineItems: lineItems,
        destination: options?.destination,
        origin: options?.origin,
        currency: options?.currency,
        contactDetails: options?.contactDetails,
        weightUnit: options?.weightUnit,
        userPreferences: options?.userPreferences,
        purchaseFlowId: options?.purchaseFlowId,
    }), [
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [{ path: 'destination' }, { path: 'origin' }],
        },
    ]);
    const reqOpts = ambassadorWixGatewaysEcomV1DeliveryRatesGateway.getDeliverySolutions(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [
                    { path: 'deliverySolutions.logistics.pickupDetails.address' },
                ],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                lineItems: '$[0]',
                destination: '$[1].destination',
                origin: '$[1].origin',
                currency: '$[1].currency',
                contactDetails: '$[1].contactDetails',
                weightUnit: '$[1].weightUnit',
                userPreferences: '$[1].userPreferences',
                purchaseFlowId: '$[1].purchaseFlowId',
            },
            singleArgumentUnchanged: false,
        }, ['lineItems', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=gateways-ecom-v1-delivery-rates-gateway-delivery-solutions.universal.js.map