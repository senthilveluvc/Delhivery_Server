import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { queryBuilder } from '@wix/sdk-runtime/query-builder';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixEcomDiscountsV1DiscountRule from './ecom-discounts-v1-discount-rule-discount-rules.http.js';
export var ScopeType;
(function (ScopeType) {
    ScopeType["UNDEFINED_SCOPE"] = "UNDEFINED_SCOPE";
    /** Specific catalog items */
    ScopeType["CATALOG_ITEM"] = "CATALOG_ITEM";
    /** Specific items by custom filters */
    ScopeType["CUSTOM_FILTER"] = "CUSTOM_FILTER";
})(ScopeType || (ScopeType = {}));
export var TriggerType;
(function (TriggerType) {
    TriggerType["UNDEFINED"] = "UNDEFINED";
    /** Operator used for chaining multiple triggers. Currently 1 `AND` chain operator is supported. */
    TriggerType["AND"] = "AND";
    /** Subtotal must be within the specified `subtotalRange` values. */
    TriggerType["SUBTOTAL_RANGE"] = "SUBTOTAL_RANGE";
    /** Quantity of items in scope must be within specified `itemQuantityRange` values. */
    TriggerType["ITEM_QUANTITY_RANGE"] = "ITEM_QUANTITY_RANGE";
    /** Custom trigger type defined in `customTrigger` object. */
    TriggerType["CUSTOM"] = "CUSTOM";
    /** Chain multiple triggers with OR operator */
    TriggerType["OR"] = "OR";
})(TriggerType || (TriggerType = {}));
export var Type;
(function (Type) {
    /** Target type is not defined */
    Type["UNDEFINED"] = "UNDEFINED";
    /** Target type is a set of specific items */
    Type["SPECIFIC_ITEMS"] = "SPECIFIC_ITEMS";
})(Type || (Type = {}));
export var DiscountType;
(function (DiscountType) {
    DiscountType["UNDEFINED"] = "UNDEFINED";
    /** Price is reduced by percentage value. */
    DiscountType["PERCENTAGE"] = "PERCENTAGE";
    /** Price is reduced by fixed amount. */
    DiscountType["FIXED_AMOUNT"] = "FIXED_AMOUNT";
    /** Price will be set to fixed amount. */
    DiscountType["FIXED_PRICE"] = "FIXED_PRICE";
})(DiscountType || (DiscountType = {}));
export var Status;
(function (Status) {
    /** Rule status is not defined. */
    Status["UNDEFINED"] = "UNDEFINED";
    /** Rule status is live. */
    Status["LIVE"] = "LIVE";
    /** Rule status is expired, it might have been live in the past. */
    Status["EXPIRED"] = "EXPIRED";
    /** Rule status is pending, it might be live in the future. */
    Status["PENDING"] = "PENDING";
})(Status || (Status = {}));
/** TODO: check if can be removed */
export var AppliedSubjectType;
(function (AppliedSubjectType) {
    AppliedSubjectType["UNDEFINED"] = "UNDEFINED";
    /** Discount applies to all items at checkout. */
    AppliedSubjectType["ALL_ITEMS"] = "ALL_ITEMS";
    /** Discount applies to the lowest priced item at checkout. */
    AppliedSubjectType["LOWEST_PRICED_ITEM"] = "LOWEST_PRICED_ITEM";
})(AppliedSubjectType || (AppliedSubjectType = {}));
export var SortOrder;
(function (SortOrder) {
    SortOrder["ASC"] = "ASC";
    SortOrder["DESC"] = "DESC";
})(SortOrder || (SortOrder = {}));
export var WebhookIdentityType;
(function (WebhookIdentityType) {
    WebhookIdentityType["UNKNOWN"] = "UNKNOWN";
    WebhookIdentityType["ANONYMOUS_VISITOR"] = "ANONYMOUS_VISITOR";
    WebhookIdentityType["MEMBER"] = "MEMBER";
    WebhookIdentityType["WIX_USER"] = "WIX_USER";
    WebhookIdentityType["APP"] = "APP";
})(WebhookIdentityType || (WebhookIdentityType = {}));
/**
 * Creates a new discount rule.
 *
 *
 * The `createDiscountRule()` function returns a Promise that resolves to the new discount rule when it's created.
 * @param discountRule - Discount rule info.
 * @public
 * @requiredField discountRule
 * @requiredField discountRule.discounts
 * @requiredField discountRule.name
 * @permissionId ECOM.DISCOUNT_RULES_CREATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns Discount rule.
 * @fqn com.wix.ecom.discounts.DiscountRuleService.CreateDiscountRule
 */
export async function createDiscountRule(discountRule) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        discountRule: discountRule,
    });
    const reqOpts = ambassadorWixEcomDiscountsV1DiscountRule.createDiscountRule(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.discountRule;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { discountRule: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['discountRule']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Retrieves a discount rule.
 *
 *
 * The `getDiscountRule()` function returns a Promise that resolves when the specified discount rule is retrieved.
 * @param discountRuleId - ID of the discount rule to retrieve.
 * @public
 * @requiredField discountRuleId
 * @permissionId ECOM.DISCOUNT_RULES_READ
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns The requested discount rule.
 * @fqn com.wix.ecom.discounts.DiscountRuleService.GetDiscountRule
 */
export async function getDiscountRule(discountRuleId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        discountRuleId: discountRuleId,
    });
    const reqOpts = ambassadorWixEcomDiscountsV1DiscountRule.getDiscountRule(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.discountRule;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { discountRuleId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['discountRuleId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Updates a discount rule's properties.
 *
 *
 * The `updateDiscountRule()` function returns a Promise that resolves when the specified discount rule's properties are updated.
 *
 * Each time the discount rule is updated, `revision` increments by 1. The existing `revision` must be included when updating the discount rule. This ensures you're working with the latest discount rule information, and it prevents unintended overwrites.
 * @param _id - Discount rule ID.
 * @public
 * @requiredField _id
 * @requiredField discountRule
 * @requiredField discountRule.revision
 * @param discountRule - Discount rule info.
 * @param options - Discount rule info.
 * @permissionId ECOM.DISCOUNT_RULES_UPDATE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @returns Updated discount rule.
 * @fqn com.wix.ecom.discounts.DiscountRuleService.UpdateDiscountRule
 */
export async function updateDiscountRule(_id, discountRule) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        discountRule: { ...discountRule, id: _id },
    });
    const reqOpts = ambassadorWixEcomDiscountsV1DiscountRule.updateDiscountRule(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data)?.discountRule;
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: { discountRule: '$[1]' },
            explicitPathsToArguments: { 'discountRule.id': '$[0]' },
            singleArgumentUnchanged: false,
        }, ['_id', 'discountRule']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Deletes a discount rule.
 *
 *
 * The `deleteDiscountRule()` function returns a Promise that resolves when the specified discount rule is deleted.
 * @param discountRuleId - ID of the discount rule to delete.
 * @public
 * @requiredField discountRuleId
 * @permissionId ECOM.DISCOUNT_RULES_DELETE
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @applicableIdentity APP
 * @fqn com.wix.ecom.discounts.DiscountRuleService.DeleteDiscountRule
 */
export async function deleteDiscountRule(discountRuleId) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        discountRuleId: discountRuleId,
    });
    const reqOpts = ambassadorWixEcomDiscountsV1DiscountRule.deleteDiscountRule(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { discountRuleId: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['discountRuleId']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Creates a query to retrieve a list of discount rules.
 *
 *
 * The `queryDiscountRules()` function builds a query to retrieve a list of up to 100 discount rules, and returns a [`DiscountRulesQueryBuilder`](#discountrulesquerybuilder) object.
 *
 * The returned object contains the query definition which is typically used to run the query using the [`find()`](/discount-rules/discount-rules-query-builder/find) function.
 *
 * You can refine the query by chaining `DiscountRulesQueryBuilder` functions onto the query. `DiscountRulesQueryBuilder` functions enable you to sort, filter, and control the results queryDiscountRules() returns.
 *
 * By default, `queryDiscountRules()` sorts results by [`ascending("_id")`](/discount-rules/discount-rules-query-builder/ascending) by default. This can be overridden.
 *
 * To learn how to query posts, refer to the table below.
 *
 * The following `DiscountRulesQueryBuilder` functions are supported for the `queryDiscountRules()` function. For a full description of the discount rule object, see the object returned for the [`items`](/discount-rules/discount-rules-query-result/items) property in the `DiscountRulesQueryResult`.
 * @public
 * @permissionScope Manage Stores - all permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.MANAGE-STORES
 * @permissionScope Read eCommerce - all read permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.READ-ECOM
 * @permissionScope Read Stores - all read permissions
 * @permissionScopeId SCOPE.DC-STORES-MEGA.READ-STORES
 * @permissionScope Manage Restaurants - all permissions
 * @permissionScopeId SCOPE.RESTAURANTS.MEGA-SCOPES
 * @permissionScope Manage eCommerce - all permissions
 * @permissionScopeId SCOPE.DC-ECOM-MEGA.MANAGE-ECOM
 * @permissionId ECOM.DISCOUNT_RULES_READ
 * @applicableIdentity APP
 * @fqn com.wix.ecom.discounts.DiscountRuleService.QueryDiscountRules
 */
export function queryDiscountRules() {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[0];
    return queryBuilder({
        func: async (payload) => {
            const reqOpts = ambassadorWixEcomDiscountsV1DiscountRule.queryDiscountRules(payload);
            sideEffects?.onSiteCall?.();
            try {
                const result = await httpClient.request(reqOpts);
                sideEffects?.onSuccess?.(result);
                return result;
            }
            catch (err) {
                sideEffects?.onError?.(err);
                throw err;
            }
        },
        requestTransformer: (query) => {
            const args = [query, {}];
            return renameKeysFromSDKRequestToRESTRequest({
                ...args?.[1],
                query: args?.[0],
            });
        },
        responseTransformer: ({ data, }) => {
            const transformedData = renameKeysFromRESTResponseToSDKResponse(data);
            return {
                items: transformedData?.discountRules,
                pagingMetadata: transformedData?.pagingMetadata,
            };
        },
        errorTransformer: (err) => {
            const transformedError = sdkTransformError(err, {
                spreadPathsToArguments: {},
                explicitPathsToArguments: { query: '$[0]' },
                singleArgumentUnchanged: false,
            });
            throw transformedError;
        },
        pagingMethod: 'CURSOR',
        transformationPaths: {},
    });
}
//# sourceMappingURL=ecom-discounts-v1-discount-rule-discount-rules.universal.js.map